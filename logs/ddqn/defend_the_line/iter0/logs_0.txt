Model: <class 'models.singleagent.ddqn.DDQNAgent'>, Env: defend_the_line/iter0, Date: 22/03/2020 20:21:14
CPU: 4 Core, 2.2GHz, 16.0 GB, Darwin-18.7.0-x86_64-i386-64bit
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 7732fe44f329b1fde20f61104aaf39cd52f24ee0
Branch: master

num_envs: 16,
state_size: (64, 64, 3),
action_size: [3],
action_space: Discrete(3),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x132d234a8>,

import torch
import random
import numpy as np
from utils.network import PTQNetwork, PTACAgent, LEARN_RATE, EPS_MIN, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE

class DDQNetwork(PTQNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddqn"): 
		super().__init__(state_size, action_size, lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, numpy=True, sample=True):
		with torch.no_grad():
			q_values = self.critic_local(state) if not use_target else self.critic_target(state)
			return q_values.softmax(-1).cpu().numpy() if numpy else q_values.softmax(-1)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			q_values = self.critic_local(state) if not use_target else self.critic_target(state)
			q_selected = torch.gather(q_values, dim=-1, index=action.argmax(-1, keepdims=True))
			return q_selected.cpu().numpy() if numpy else q_selected
	
	def optimize(self, states, actions, q_targets):
		q_values = self.get_q_value(states, actions, grad=True)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

class DDQNAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDQNetwork, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if e_greedy and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), sample=sample)
		return action_greedy
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True, numpy=False).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True, numpy=False)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=True)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)


Step:       0, Reward: 6.938 [4.250], Avg: 6.938 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 6.938 [3.596], Avg: 6.938 (0.9604) <0-00:01:37> 
Step:    2000, Reward: 6.375 [2.595], Avg: 6.75 (0.9224) <0-00:03:31> 
Step:    3000, Reward: 7.375 [3.059], Avg: 6.906 (0.8858) <0-00:05:31> 
Step:    4000, Reward: 9.125 [3.723], Avg: 7.35 (0.8681) <0-00:07:29> 
Step:    5000, Reward: 7.75 [4.994], Avg: 7.417 (0.8337) <0-00:09:29> 
Step:    6000, Reward: 7.812 [3.678], Avg: 7.473 (0.8007) <0-00:11:28> 
Step:    7000, Reward: 11.75 [4.100], Avg: 8.008 (0.7536) <0-00:13:32> 
Step:    8000, Reward: 8.0 [3.428], Avg: 8.007 (0.7238) <0-00:15:31> 
Step:    9000, Reward: 13.0 [4.835], Avg: 8.506 (0.7093) <0-00:17:38> 
Step:   10000, Reward: 13.375 [4.768], Avg: 8.949 (0.6951) <0-00:19:40> 
Step:   11000, Reward: 11.938 [4.867], Avg: 9.198 (0.6812) <0-00:21:43> 
Step:   12000, Reward: 12.875 [5.302], Avg: 9.481 (0.6543) <0-00:23:48> 
Step:   13000, Reward: 14.062 [6.369], Avg: 9.808 (0.6412) <0-00:25:57> 
Step:   14000, Reward: 8.438 [3.791], Avg: 9.717 (0.6283) <0-00:27:54> 
Step:   15000, Reward: 14.0 [3.657], Avg: 9.984 (0.6035) <0-00:30:05> 
Step:   16000, Reward: 14.938 [3.307], Avg: 10.276 (0.5914) <0-00:32:04> 
Step:   17000, Reward: 16.375 [4.357], Avg: 10.615 (0.5796) <0-00:34:11> 
Step:   18000, Reward: 14.688 [4.383], Avg: 10.829 (0.5566) <0-00:36:12> 
Step:   19000, Reward: 18.312 [4.179], Avg: 11.203 (0.5455) <0-00:38:23> 
Step:   20000, Reward: 14.125 [4.729], Avg: 11.342 (0.5346) <0-00:40:24> 
Step:   21000, Reward: 17.062 [4.993], Avg: 11.602 (0.5239) <0-00:42:33> 
Step:   22000, Reward: 16.0 [4.168], Avg: 11.794 (0.5031) <0-00:44:40> 
Step:   23000, Reward: 15.688 [4.297], Avg: 11.956 (0.4931) <0-00:46:41> 
Step:   24000, Reward: 16.438 [4.373], Avg: 12.135 (0.4832) <0-00:48:44> 
Step:   25000, Reward: 15.5 [3.062], Avg: 12.264 (0.4735) <0-00:50:42> 
Step:   26000, Reward: 15.25 [5.607], Avg: 12.375 (0.4641) <0-00:52:50> 
Step:   27000, Reward: 17.5 [5.755], Avg: 12.558 (0.4548) <0-00:54:56> 
Step:   28000, Reward: 16.5 [4.228], Avg: 12.694 (0.4368) <0-00:56:56> 
Step:   29000, Reward: 16.875 [5.721], Avg: 12.833 (0.4281) <0-00:59:06> 
Step:   30000, Reward: 18.125 [4.998], Avg: 13.004 (0.4111) <0-01:01:20> 
Step:   31000, Reward: 17.25 [4.191], Avg: 13.137 (0.4029) <0-01:03:23> 
Step:   32000, Reward: 14.75 [7.120], Avg: 13.186 (0.3948) <0-01:05:30> 
Step:   33000, Reward: 18.25 [5.890], Avg: 13.335 (0.3869) <0-01:07:46> 
Step:   34000, Reward: 15.562 [4.358], Avg: 13.398 (0.3792) <0-01:09:51> 
Step:   35000, Reward: 8.438 [2.828], Avg: 13.26 (0.3642) <0-01:11:50> 
Step:   36000, Reward: 14.625 [4.045], Avg: 13.297 (0.3569) <0-01:13:53> 
Step:   37000, Reward: 14.125 [4.897], Avg: 13.319 (0.3428) <0-01:15:58> 
Step:   38000, Reward: 13.438 [4.769], Avg: 13.322 (0.3359) <0-01:18:03> 
Step:   39000, Reward: 14.625 [6.518], Avg: 13.355 (0.3292) <0-01:20:16> 
Step:   40000, Reward: 14.188 [4.927], Avg: 13.375 (0.3226) <0-01:22:24> 
Step:   41000, Reward: 14.312 [5.009], Avg: 13.397 (0.3098) <0-01:24:24> 
Step:   42000, Reward: 14.75 [3.363], Avg: 13.429 (0.3036) <0-01:26:28> 
Step:   43000, Reward: 18.5 [6.354], Avg: 13.544 (0.2976) <0-01:28:45> 
Step:   44000, Reward: 14.438 [3.464], Avg: 13.564 (0.2916) <0-01:30:53> 
Step:   45000, Reward: 14.625 [4.622], Avg: 13.587 (0.2858) <0-01:33:35> 
Step:   46000, Reward: 14.5 [5.916], Avg: 13.606 (0.2745) <0-01:35:52> 
Step:   47000, Reward: 17.625 [4.807], Avg: 13.69 (0.2690) <0-01:38:14> 
Step:   48000, Reward: 14.875 [6.716], Avg: 13.714 (0.2636) <0-01:40:38> 
Step:   49000, Reward: 18.188 [5.570], Avg: 13.804 (0.2583) <0-01:43:02> 
Step:   50000, Reward: 17.25 [5.019], Avg: 13.871 (0.2531) <0-01:45:16> 
Step:   51000, Reward: 18.438 [2.806], Avg: 13.959 (0.2481) <0-01:47:22> 
Step:   52000, Reward: 16.25 [5.662], Avg: 14.002 (0.2431) <0-01:49:31> 
Step:   53000, Reward: 16.375 [3.773], Avg: 14.046 (0.2383) <0-01:51:45> 
Step:   54000, Reward: 18.562 [3.937], Avg: 14.128 (0.2335) <0-01:53:55> 
Step:   55000, Reward: 17.938 [4.981], Avg: 14.196 (0.2242) <0-01:56:11> 
Step:   56000, Reward: 18.688 [5.676], Avg: 14.275 (0.2198) <0-01:58:30> 
Step:   57000, Reward: 20.438 [5.000], Avg: 14.382 (0.2111) <0-02:00:43> 
Step:   58000, Reward: 17.25 [3.849], Avg: 14.43 (0.2068) <0-02:02:56> 
Step:   59000, Reward: 18.5 [5.454], Avg: 14.498 (0.2027) <0-02:05:14> 
Step:   60000, Reward: 19.688 [4.194], Avg: 14.583 (0.1947) <0-02:07:27> 
Step:   61000, Reward: 17.875 [7.322], Avg: 14.636 (0.1870) <0-02:09:44> 
Step:   62000, Reward: 19.125 [4.414], Avg: 14.707 (0.1832) <0-02:11:56> 
Step:   63000, Reward: 15.25 [4.750], Avg: 14.716 (0.1796) <0-02:14:01> 
Step:   64000, Reward: 20.438 [8.329], Avg: 14.804 (0.1725) <0-02:16:33> 
Step:   65000, Reward: 18.062 [4.736], Avg: 14.853 (0.1690) <0-02:18:48> 
Step:   66000, Reward: 18.0 [4.183], Avg: 14.9 (0.1623) <0-02:21:03> 
Step:   67000, Reward: 13.25 [4.337], Avg: 14.876 (0.1591) <0-02:23:11> 
Step:   68000, Reward: 13.312 [4.088], Avg: 14.853 (0.1559) <0-02:25:20> 
Step:   69000, Reward: 16.5 [6.364], Avg: 14.877 (0.1528) <0-02:27:24> 
Step:   70000, Reward: 17.188 [5.077], Avg: 14.909 (0.1497) <0-02:29:30> 
Step:   71000, Reward: 20.75 [5.297], Avg: 14.991 (0.1467) <0-02:31:43> 
Step:   72000, Reward: 17.125 [4.846], Avg: 15.02 (0.1438) <0-02:33:59> 
Step:   73000, Reward: 19.438 [4.962], Avg: 15.079 (0.1381) <0-02:36:14> 
Step:   74000, Reward: 18.125 [4.386], Avg: 15.12 (0.1353) <0-02:38:28> 
Step:   75000, Reward: 20.625 [5.883], Avg: 15.193 (0.1326) <0-02:40:48> 
Step:   76000, Reward: 16.375 [5.314], Avg: 15.208 (0.1274) <0-02:43:11> 
Step:   77000, Reward: 20.375 [5.689], Avg: 15.274 (0.1248) <0-02:45:42> 
Step:   78000, Reward: 17.375 [6.402], Avg: 15.301 (0.1223) <0-02:47:56> 
Step:   79000, Reward: 18.25 [3.913], Avg: 15.338 (0.1199) <0-02:50:12> 
Step:   80000, Reward: 20.938 [3.699], Avg: 15.407 (0.1151) <0-02:52:29> 
Step:   81000, Reward: 18.75 [3.345], Avg: 15.447 (0.1128) <0-02:54:39> 
Step:   82000, Reward: 17.188 [4.376], Avg: 15.468 (0.1084) <0-02:56:54> 
Step:   83000, Reward: 19.125 [5.600], Avg: 15.512 (0.1062) <0-02:59:14> 
Step:   84000, Reward: 17.438 [5.208], Avg: 15.535 (0.1041) <0-03:01:23> 
Step:   85000, Reward: 13.0 [3.937], Avg: 15.505 (0.0999) <0-03:03:30> 
Step:   86000, Reward: 20.875 [5.521], Avg: 15.567 (0.0979) <0-03:06:03> 
Step:   87000, Reward: 15.625 [4.328], Avg: 15.568 (0.0960) <0-03:08:14> 
Step:   88000, Reward: 17.562 [3.872], Avg: 15.59 (0.0941) <0-03:10:26> 
Step:   89000, Reward: 18.875 [4.075], Avg: 15.626 (0.0922) <0-03:12:42> 
Step:   90000, Reward: 18.438 [5.160], Avg: 15.657 (0.0903) <0-03:15:07> 
Step:   91000, Reward: 14.188 [3.940], Avg: 15.641 (0.0885) <0-03:17:20> 
Step:   92000, Reward: 18.5 [5.385], Avg: 15.672 (0.0868) <0-03:19:33> 
Step:   93000, Reward: 17.25 [4.737], Avg: 15.689 (0.0833) <0-03:21:48> 
Step:   94000, Reward: 18.25 [5.068], Avg: 15.716 (0.0800) <0-03:24:00> 
Step:   95000, Reward: 19.938 [3.992], Avg: 15.76 (0.0784) <0-03:26:14> 
Step:   96000, Reward: 16.438 [5.147], Avg: 15.767 (0.0769) <0-03:28:37> 
Step:   97000, Reward: 18.062 [5.367], Avg: 15.79 (0.0738) <0-03:30:59> 
Step:   98000, Reward: 18.25 [6.190], Avg: 15.815 (0.0709) <0-03:33:25> 
Step:   99000, Reward: 16.875 [4.859], Avg: 15.826 (0.0695) <0-03:35:35> 
Step:  100000, Reward: 19.25 [4.943], Avg: 15.86 (0.0667) <0-03:37:57> 
Step:  101000, Reward: 17.25 [5.921], Avg: 15.873 (0.0654) <0-03:40:19> 
Step:  102000, Reward: 17.75 [5.932], Avg: 15.891 (0.0641) <0-03:42:46> 
Step:  103000, Reward: 18.312 [5.892], Avg: 15.915 (0.0628) <0-03:45:08> 
Step:  104000, Reward: 18.062 [3.929], Avg: 15.935 (0.0615) <0-03:47:22> 
Step:  105000, Reward: 18.812 [5.399], Avg: 15.962 (0.0603) <0-03:49:43> 
Step:  106000, Reward: 19.375 [3.871], Avg: 15.994 (0.0591) <0-03:51:59> 
Step:  107000, Reward: 16.062 [3.508], Avg: 15.995 (0.0579) <0-03:54:07> 
Step:  108000, Reward: 18.0 [5.408], Avg: 16.013 (0.0568) <0-03:56:25> 
Step:  109000, Reward: 17.812 [3.025], Avg: 16.03 (0.0556) <0-03:58:38> 
Step:  110000, Reward: 18.188 [3.988], Avg: 16.049 (0.0545) <0-04:00:57> 
Step:  111000, Reward: 18.188 [5.929], Avg: 16.068 (0.0524) <0-04:03:17> 
Step:  112000, Reward: 17.125 [5.499], Avg: 16.077 (0.0513) <0-04:05:37> 
Step:  113000, Reward: 14.25 [4.191], Avg: 16.061 (0.0493) <0-04:07:50> 
Step:  114000, Reward: 17.625 [4.702], Avg: 16.075 (0.0483) <0-04:10:05> 
Step:  115000, Reward: 19.188 [4.786], Avg: 16.102 (0.0473) <0-04:12:21> 
Step:  116000, Reward: 17.75 [4.146], Avg: 16.116 (0.0464) <0-04:14:33> 
Step:  117000, Reward: 15.25 [3.832], Avg: 16.109 (0.0445) <0-04:16:41> 
Step:  118000, Reward: 15.625 [4.151], Avg: 16.105 (0.0428) <0-04:18:54> 
Step:  119000, Reward: 19.438 [5.722], Avg: 16.132 (0.0428) <0-04:21:10> 
Step:  120000, Reward: 16.375 [5.667], Avg: 16.134 (0.0411) <0-04:23:35> 
Step:  121000, Reward: 16.375 [4.151], Avg: 16.136 (0.0403) <0-04:25:49> 
Step:  122000, Reward: 17.188 [4.172], Avg: 16.145 (0.0395) <0-04:28:00> 
Step:  123000, Reward: 16.812 [4.362], Avg: 16.15 (0.0387) <0-04:30:17> 
Step:  124000, Reward: 16.062 [7.726], Avg: 16.15 (0.0371) <0-04:32:49> 
Step:  125000, Reward: 20.312 [5.253], Avg: 16.183 (0.0364) <0-04:35:12> 
Step:  126000, Reward: 16.562 [5.086], Avg: 16.186 (0.0350) <0-04:37:24> 
Step:  127000, Reward: 14.125 [4.211], Avg: 16.169 (0.0343) <0-04:39:31> 
Step:  128000, Reward: 20.062 [4.789], Avg: 16.2 (0.0329) <0-04:41:54> 
Step:  129000, Reward: 18.188 [5.329], Avg: 16.215 (0.0322) <0-04:44:20> 
Step:  130000, Reward: 16.875 [4.181], Avg: 16.22 (0.0316) <0-04:46:44> 
Step:  131000, Reward: 18.438 [4.358], Avg: 16.237 (0.0310) <0-04:48:57> 
Step:  132000, Reward: 18.312 [4.895], Avg: 16.252 (0.0297) <0-04:51:18> 
Step:  133000, Reward: 20.875 [5.988], Avg: 16.287 (0.0291) <0-04:53:50> 
Step:  134000, Reward: 19.0 [4.873], Avg: 16.307 (0.0286) <0-04:56:07> 
Step:  135000, Reward: 21.25 [5.890], Avg: 16.343 (0.0280) <0-04:58:34> 
Step:  136000, Reward: 19.0 [5.268], Avg: 16.363 (0.0274) <0-05:00:59> 
Step:  137000, Reward: 17.0 [4.000], Avg: 16.367 (0.0274) <0-05:03:11> 
Step:  138000, Reward: 18.062 [4.205], Avg: 16.38 (0.0263) <0-05:05:32> 
Step:  139000, Reward: 19.688 [4.713], Avg: 16.403 (0.0258) <0-05:07:54> 
Step:  140000, Reward: 20.375 [4.635], Avg: 16.431 (0.0248) <0-05:10:10> 
Step:  141000, Reward: 15.688 [2.142], Avg: 16.426 (0.0243) <0-05:12:12> 
Step:  142000, Reward: 12.875 [3.444], Avg: 16.401 (0.0238) <0-05:14:23> 
Step:  143000, Reward: 20.375 [4.885], Avg: 16.429 (0.0233) <0-05:16:49> 
Step:  144000, Reward: 12.875 [3.180], Avg: 16.404 (0.0229) <0-05:18:52> 
Step:  145000, Reward: 16.75 [4.630], Avg: 16.407 (0.0220) <0-05:21:06> 
Step:  146000, Reward: 17.25 [5.483], Avg: 16.412 (0.0215) <0-05:23:20> 
Step:  147000, Reward: 19.125 [4.794], Avg: 16.431 (0.0207) <0-05:25:38> 
Step:  148000, Reward: 19.562 [5.711], Avg: 16.452 (0.0203) <0-05:27:57> 
Step:  149000, Reward: 17.938 [4.085], Avg: 16.462 (0.0200) <0-05:30:11> 
Step:  150000, Reward: 17.812 [4.544], Avg: 16.471 (0.0200) <0-05:32:29> 
Step:  151000, Reward: 18.25 [4.294], Avg: 16.482 (0.0200) <0-05:34:37> 
Step:  152000, Reward: 20.25 [5.068], Avg: 16.507 (0.0200) <0-05:36:52> 
Step:  153000, Reward: 17.75 [3.231], Avg: 16.515 (0.0200) <0-05:39:02> 
Step:  154000, Reward: 17.875 [4.923], Avg: 16.524 (0.0200) <0-05:41:11> 
Step:  155000, Reward: 19.5 [6.052], Avg: 16.543 (0.0200) <0-05:43:26> 
Step:  156000, Reward: 15.938 [5.093], Avg: 16.539 (0.0200) <0-05:45:41> 
Step:  157000, Reward: 19.5 [6.937], Avg: 16.558 (0.0200) <0-05:48:02> 
Step:  158000, Reward: 15.625 [4.742], Avg: 16.552 (0.0200) <0-05:50:11> 
Step:  159000, Reward: 19.125 [5.611], Avg: 16.568 (0.0200) <0-05:52:32> 
Step:  160000, Reward: 16.438 [4.472], Avg: 16.567 (0.0200) <0-05:54:44> 
Step:  161000, Reward: 18.25 [4.116], Avg: 16.578 (0.0200) <0-05:56:52> 
Step:  162000, Reward: 18.562 [6.000], Avg: 16.59 (0.0200) <0-05:59:02> 
Step:  163000, Reward: 16.25 [3.929], Avg: 16.588 (0.0200) <0-06:01:12> 
Step:  164000, Reward: 18.938 [4.841], Avg: 16.602 (0.0200) <0-06:03:33> 
Step:  165000, Reward: 17.688 [5.009], Avg: 16.608 (0.0200) <0-06:05:51> 
Step:  166000, Reward: 18.125 [4.948], Avg: 16.618 (0.0200) <0-06:08:04> 
Step:  167000, Reward: 18.688 [5.253], Avg: 16.63 (0.0200) <0-06:10:28> 
Step:  168000, Reward: 18.25 [4.206], Avg: 16.639 (0.0200) <0-06:12:41> 
Step:  169000, Reward: 14.812 [3.609], Avg: 16.629 (0.0200) <0-06:14:51> 
Step:  170000, Reward: 17.0 [3.518], Avg: 16.631 (0.0200) <0-06:17:03> 
Step:  171000, Reward: 20.688 [5.796], Avg: 16.654 (0.0200) <0-06:19:28> 
Step:  172000, Reward: 18.25 [5.044], Avg: 16.664 (0.0200) <0-06:21:43> 
Step:  173000, Reward: 16.625 [2.803], Avg: 16.663 (0.0200) <0-06:23:58> 
Step:  174000, Reward: 18.625 [3.998], Avg: 16.675 (0.0200) <0-06:26:18> 
Step:  175000, Reward: 9.75 [3.307], Avg: 16.635 (0.0200) <0-06:28:26> 
Step:  176000, Reward: 16.562 [5.111], Avg: 16.635 (0.0200) <0-06:30:43> 
