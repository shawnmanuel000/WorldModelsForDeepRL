Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: take_cover/iter0, Date: 24/03/2020 08:16:51
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: ef489ddba6ce63c80e0efdcae97bf062fd7abd22
Branch: master

num_envs: 16,
state_size: (64, 64, 3),
action_size: [2],
action_space: Discrete(2),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f69bc6ea400>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: 328.0 [130.633], Avg: 328.0 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 318.75 [177.335], Avg: 323.375 (0.9604) <0-00:00:23> 
Step:    2000, Reward: 444.312 [216.740], Avg: 363.687 (0.9039) <0-00:00:47> 
Step:    3000, Reward: 381.188 [156.210], Avg: 368.062 (0.8681) <0-00:01:10> 
Step:    4000, Reward: 342.375 [172.634], Avg: 362.925 (0.8171) <0-00:01:34> 
Step:    5000, Reward: 417.0 [250.544], Avg: 371.938 (0.8007) <0-00:02:01> 
Step:    6000, Reward: 318.75 [145.091], Avg: 364.339 (0.7536) <0-00:02:24> 
Step:    7000, Reward: 450.438 [340.352], Avg: 375.102 (0.7238) <0-00:02:52> 
Step:    8000, Reward: 342.562 [193.533], Avg: 371.486 (0.6951) <0-00:03:17> 
Step:    9000, Reward: 368.375 [198.138], Avg: 371.175 (0.6676) <0-00:03:41> 
Step:   10000, Reward: 417.125 [195.503], Avg: 375.352 (0.6158) <0-00:04:05> 
Step:   11000, Reward: 399.875 [231.215], Avg: 377.396 (0.6035) <0-00:04:33> 
Step:   12000, Reward: 317.062 [125.720], Avg: 372.755 (0.5566) <0-00:04:56> 
Step:   13000, Reward: 277.812 [105.885], Avg: 365.973 (0.5346) <0-00:05:19> 
Step:   14000, Reward: 476.188 [197.407], Avg: 373.321 (0.5031) <0-00:05:45> 
Step:   15000, Reward: 346.562 [158.498], Avg: 371.648 (0.4641) <0-00:06:10> 
Step:   16000, Reward: 453.938 [248.444], Avg: 376.489 (0.4457) <0-00:06:39> 
Step:   17000, Reward: 604.625 [360.429], Avg: 389.163 (0.4195) <0-00:07:10> 
Step:   18000, Reward: 479.75 [219.558], Avg: 393.931 (0.4029) <0-00:07:36> 
Step:   19000, Reward: 426.5 [269.291], Avg: 395.559 (0.3948) <0-00:08:04> 
Step:   20000, Reward: 544.375 [280.378], Avg: 402.646 (0.3869) <0-00:08:33> 
Step:   21000, Reward: 385.125 [196.930], Avg: 401.849 (0.3642) <0-00:09:00> 
Step:   22000, Reward: 527.312 [359.573], Avg: 407.304 (0.3428) <0-00:09:31> 
Step:   23000, Reward: 313.25 [135.817], Avg: 403.385 (0.3292) <0-00:09:55> 
Step:   24000, Reward: 249.125 [86.002], Avg: 397.215 (0.3036) <0-00:10:18> 
Step:   25000, Reward: 233.75 [60.060], Avg: 390.928 (0.2801) <0-00:10:40> 
Step:   26000, Reward: 208.875 [50.931], Avg: 384.185 (0.2690) <0-00:11:01> 
Step:   27000, Reward: 252.062 [109.341], Avg: 379.466 (0.2481) <0-00:11:25> 
Step:   28000, Reward: 391.938 [185.616], Avg: 379.897 (0.2335) <0-00:11:50> 
Step:   29000, Reward: 283.312 [150.961], Avg: 376.677 (0.2154) <0-00:12:14> 
Step:   30000, Reward: 383.562 [247.448], Avg: 376.899 (0.2068) <0-00:12:40> 
Step:   31000, Reward: 218.625 [37.711], Avg: 371.953 (0.1908) <0-00:13:01> 
Step:   32000, Reward: 278.25 [85.613], Avg: 369.114 (0.1725) <0-00:13:24> 
Step:   33000, Reward: 434.625 [317.469], Avg: 371.04 (0.1623) <0-00:13:53> 
Step:   34000, Reward: 294.312 [152.291], Avg: 368.848 (0.1528) <0-00:14:17> 
Step:   35000, Reward: 309.438 [197.504], Avg: 367.198 (0.1409) <0-00:14:44> 
Step:   36000, Reward: 261.75 [150.437], Avg: 364.348 (0.1326) <0-00:15:08> 
Step:   37000, Reward: 356.938 [208.412], Avg: 364.153 (0.1274) <0-00:15:34> 
Step:   38000, Reward: 500.375 [262.099], Avg: 367.646 (0.1199) <0-00:16:02> 
Step:   39000, Reward: 409.375 [258.359], Avg: 368.689 (0.1106) <0-00:16:30> 
Step:   40000, Reward: 267.188 [171.167], Avg: 366.213 (0.1062) <0-00:16:55> 
Step:   41000, Reward: 252.375 [47.475], Avg: 363.503 (0.0999) <0-00:17:18> 
Step:   42000, Reward: 479.312 [247.496], Avg: 366.196 (0.0960) <0-00:17:45> 
Step:   43000, Reward: 671.188 [299.268], Avg: 373.128 (0.0941) <0-00:18:16> 
Step:   44000, Reward: 486.0 [348.486], Avg: 375.636 (0.0922) <0-00:18:46> 
Step:   45000, Reward: 687.125 [507.363], Avg: 382.408 (0.0885) <0-00:19:23> 
Step:   46000, Reward: 927.5 [391.941], Avg: 394.005 (0.0850) <0-00:19:55> 
Step:   47000, Reward: 668.688 [347.209], Avg: 399.728 (0.0833) <0-00:20:26> 
Step:   48000, Reward: 535.375 [374.233], Avg: 402.496 (0.0817) <0-00:20:58> 
Step:   49000, Reward: 671.312 [392.910], Avg: 407.872 (0.0784) <0-00:21:28> 
Step:   50000, Reward: 803.125 [551.830], Avg: 415.623 (0.0769) <0-00:22:07> 
Step:   51000, Reward: 736.562 [426.080], Avg: 421.794 (0.0738) <0-00:22:40> 
Step:   52000, Reward: 665.438 [542.474], Avg: 426.391 (0.0723) <0-00:23:14> 
Step:   53000, Reward: 567.75 [395.247], Avg: 429.009 (0.0709) <0-00:23:44> 
Step:   54000, Reward: 523.5 [347.985], Avg: 430.727 (0.0695) <0-00:24:13> 
Step:   55000, Reward: 695.938 [405.462], Avg: 435.463 (0.0667) <0-00:24:47> 
Step:   56000, Reward: 625.875 [345.958], Avg: 438.804 (0.0667) <0-00:25:18> 
Step:   57000, Reward: 571.938 [518.014], Avg: 441.099 (0.0615) <0-00:25:53> 
Step:   58000, Reward: 480.062 [286.964], Avg: 441.76 (0.0591) <0-00:26:23> 
Step:   59000, Reward: 307.75 [171.762], Avg: 439.526 (0.0556) <0-00:26:49> 
Step:   60000, Reward: 325.188 [131.884], Avg: 437.652 (0.0513) <0-00:27:14> 
Step:   61000, Reward: 491.812 [374.122], Avg: 438.525 (0.0493) <0-00:27:46> 
Step:   62000, Reward: 402.25 [190.777], Avg: 437.949 (0.0473) <0-00:28:12> 
Step:   63000, Reward: 691.812 [323.230], Avg: 441.916 (0.0455) <0-00:28:43> 
Step:   64000, Reward: 782.625 [452.250], Avg: 447.158 (0.0428) <0-00:29:14> 
