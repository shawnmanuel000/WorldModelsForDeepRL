Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: defend_the_line/iter1, Date: 23/03/2020 01:45:00
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: b19ecc9d85ff967409939649e274f3782e65a659
Branch: master

num_envs: 16,
state_size: (64, 64, 3),
action_size: [3],
action_space: Discrete(3),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f19e9ce1c50>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=True)
		q_taken = q_values.gather(-1, actions.argmax(-1, keepdim=True)) if self.discrete else q_values
		critic_loss = (q_taken - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = actor_action*q_actions if self.discrete else q_actions
		q_baseline = q_values.mean(-1, keepdim=True) if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True, numpy=False).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True, numpy=False)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)


Step:       0, Reward: 5.438 [3.824], Avg: 5.438 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 5.875 [4.594], Avg: 5.656 (0.9800) <0-00:00:34> 
Step:    2000, Reward: 8.25 [3.614], Avg: 6.521 (0.9412) <0-00:01:10> 
Step:    3000, Reward: 6.938 [3.269], Avg: 6.625 (0.8858) <0-00:01:44> 
Step:    4000, Reward: 4.438 [2.573], Avg: 6.188 (0.8508) <0-00:02:17> 
Step:    5000, Reward: 6.25 [3.363], Avg: 6.198 (0.8007) <0-00:02:52> 
Step:    6000, Reward: 5.75 [2.487], Avg: 6.134 (0.7690) <0-00:03:23> 
Step:    7000, Reward: 8.0 [3.041], Avg: 6.367 (0.7386) <0-00:03:59> 
Step:    8000, Reward: 8.312 [3.513], Avg: 6.583 (0.6951) <0-00:04:34> 
Step:    9000, Reward: 8.0 [3.202], Avg: 6.725 (0.6676) <0-00:05:08> 
Step:   10000, Reward: 8.438 [5.135], Avg: 6.881 (0.6412) <0-00:05:45> 
Step:   11000, Reward: 8.25 [3.961], Avg: 6.995 (0.6283) <0-00:06:20> 
Step:   12000, Reward: 8.312 [3.852], Avg: 7.096 (0.6035) <0-00:06:54> 
Step:   13000, Reward: 10.688 [5.785], Avg: 7.353 (0.5680) <0-00:07:33> 
Step:   14000, Reward: 8.75 [3.363], Avg: 7.446 (0.5566) <0-00:08:07> 
Step:   15000, Reward: 10.75 [3.683], Avg: 7.652 (0.5346) <0-00:08:42> 
Step:   16000, Reward: 11.188 [4.475], Avg: 7.86 (0.5239) <0-00:09:19> 
Step:   17000, Reward: 12.312 [5.892], Avg: 8.108 (0.5134) <0-00:09:59> 
Step:   18000, Reward: 12.0 [5.958], Avg: 8.313 (0.5031) <0-00:10:38> 
Step:   19000, Reward: 13.625 [5.171], Avg: 8.578 (0.4931) <0-00:11:15> 
Step:   20000, Reward: 16.812 [6.327], Avg: 8.97 (0.4735) <0-00:11:57> 
Step:   21000, Reward: 15.625 [4.702], Avg: 9.273 (0.4641) <0-00:12:36> 
Step:   22000, Reward: 14.188 [3.712], Avg: 9.486 (0.4548) <0-00:13:14> 
Step:   23000, Reward: 16.5 [4.301], Avg: 9.779 (0.4368) <0-00:13:53> 
Step:   24000, Reward: 16.875 [4.807], Avg: 10.063 (0.4195) <0-00:14:34> 
Step:   25000, Reward: 15.688 [4.283], Avg: 10.279 (0.4029) <0-00:15:10> 
Step:   26000, Reward: 15.688 [5.508], Avg: 10.479 (0.3948) <0-00:15:49> 
Step:   27000, Reward: 17.188 [4.111], Avg: 10.719 (0.3792) <0-00:16:29> 
Step:   28000, Reward: 17.0 [4.835], Avg: 10.935 (0.3716) <0-00:17:08> 
Step:   29000, Reward: 17.188 [5.468], Avg: 11.144 (0.3642) <0-00:17:46> 
Step:   30000, Reward: 20.312 [4.908], Avg: 11.44 (0.3569) <0-00:18:26> 
Step:   31000, Reward: 15.938 [3.631], Avg: 11.58 (0.3428) <0-00:19:04> 
Step:   32000, Reward: 18.562 [4.677], Avg: 11.792 (0.3359) <0-00:19:43> 
Step:   33000, Reward: 14.688 [2.844], Avg: 11.877 (0.3292) <0-00:20:19> 
Step:   34000, Reward: 17.25 [4.265], Avg: 12.03 (0.3226) <0-00:20:59> 
Step:   35000, Reward: 19.562 [4.568], Avg: 12.24 (0.3161) <0-00:21:39> 
Step:   36000, Reward: 17.312 [4.713], Avg: 12.377 (0.3161) <0-00:22:17> 
Step:   37000, Reward: 19.25 [4.548], Avg: 12.558 (0.3036) <0-00:22:57> 
Step:   38000, Reward: 19.562 [3.354], Avg: 12.737 (0.2976) <0-00:23:35> 
Step:   39000, Reward: 16.562 [6.031], Avg: 12.833 (0.2858) <0-00:24:16> 
Step:   40000, Reward: 13.938 [4.892], Avg: 12.86 (0.2801) <0-00:24:54> 
Step:   41000, Reward: 17.812 [3.005], Avg: 12.978 (0.2690) <0-00:25:32> 
Step:   42000, Reward: 16.5 [3.708], Avg: 13.06 (0.2636) <0-00:26:09> 
Step:   43000, Reward: 16.312 [3.404], Avg: 13.134 (0.2583) <0-00:26:48> 
Step:   44000, Reward: 19.625 [6.353], Avg: 13.278 (0.2531) <0-00:27:30> 
Step:   45000, Reward: 20.188 [6.337], Avg: 13.428 (0.2481) <0-00:28:12> 
Step:   46000, Reward: 19.375 [6.363], Avg: 13.555 (0.2431) <0-00:28:54> 
Step:   47000, Reward: 18.25 [5.056], Avg: 13.652 (0.2335) <0-00:29:34> 
Step:   48000, Reward: 20.562 [4.911], Avg: 13.793 (0.2288) <0-00:30:15> 
Step:   49000, Reward: 21.688 [5.440], Avg: 13.951 (0.2198) <0-00:30:56> 
Step:   50000, Reward: 17.625 [4.299], Avg: 14.023 (0.2154) <0-00:31:36> 
Step:   51000, Reward: 18.5 [2.398], Avg: 14.109 (0.2111) <0-00:32:13> 
Step:   52000, Reward: 16.688 [4.538], Avg: 14.158 (0.2027) <0-00:32:51> 
Step:   53000, Reward: 18.062 [3.976], Avg: 14.23 (0.1986) <0-00:33:31> 
Step:   54000, Reward: 20.312 [6.202], Avg: 14.341 (0.1947) <0-00:34:12> 
Step:   55000, Reward: 17.562 [4.486], Avg: 14.398 (0.1908) <0-00:34:52> 
Step:   56000, Reward: 21.125 [5.689], Avg: 14.516 (0.1832) <0-00:35:34> 
Step:   57000, Reward: 18.5 [3.984], Avg: 14.585 (0.1760) <0-00:36:13> 
Step:   58000, Reward: 16.625 [4.314], Avg: 14.62 (0.1725) <0-00:36:53> 
Step:   59000, Reward: 19.75 [4.054], Avg: 14.705 (0.1656) <0-00:37:33> 
Step:   60000, Reward: 17.562 [3.952], Avg: 14.752 (0.1623) <0-00:38:11> 
Step:   61000, Reward: 19.25 [5.117], Avg: 14.825 (0.1591) <0-00:38:54> 
Step:   62000, Reward: 16.375 [3.407], Avg: 14.849 (0.1528) <0-00:39:33> 
Step:   63000, Reward: 17.125 [3.982], Avg: 14.885 (0.1467) <0-00:40:12> 
Step:   64000, Reward: 17.312 [4.984], Avg: 14.922 (0.1438) <0-00:40:51> 
Step:   65000, Reward: 20.062 [3.631], Avg: 15.0 (0.1381) <0-00:41:31> 
Step:   66000, Reward: 14.938 [3.269], Avg: 14.999 (0.1353) <0-00:42:07> 
Step:   67000, Reward: 16.938 [4.366], Avg: 15.028 (0.1326) <0-00:42:45> 
Step:   68000, Reward: 15.875 [2.997], Avg: 15.04 (0.1274) <0-00:43:21> 
Step:   69000, Reward: 18.25 [4.265], Avg: 15.086 (0.1223) <0-00:44:02> 
Step:   70000, Reward: 16.375 [5.521], Avg: 15.104 (0.1199) <0-00:44:41> 
Step:   71000, Reward: 16.062 [4.130], Avg: 15.117 (0.1175) <0-00:45:19> 
Step:   72000, Reward: 14.312 [5.096], Avg: 15.106 (0.1151) <0-00:45:59> 
Step:   73000, Reward: 15.438 [4.873], Avg: 15.111 (0.1106) <0-00:46:39> 
Step:   74000, Reward: 17.188 [4.216], Avg: 15.138 (0.1084) <0-00:47:18> 
Step:   75000, Reward: 15.75 [4.220], Avg: 15.146 (0.1062) <0-00:47:57> 
Step:   76000, Reward: 17.688 [3.404], Avg: 15.179 (0.1020) <0-00:48:34> 
Step:   77000, Reward: 16.438 [4.092], Avg: 15.196 (0.1020) <0-00:49:12> 
Step:   78000, Reward: 19.688 [4.579], Avg: 15.252 (0.0979) <0-00:49:54> 
Step:   79000, Reward: 20.188 [5.833], Avg: 15.314 (0.0941) <0-00:50:35> 
Step:   80000, Reward: 18.875 [4.702], Avg: 15.358 (0.0922) <0-00:51:15> 
Step:   81000, Reward: 18.125 [4.768], Avg: 15.392 (0.0903) <0-00:51:55> 
Step:   82000, Reward: 21.375 [7.017], Avg: 15.464 (0.0903) <0-00:52:41> 
Step:   83000, Reward: 20.312 [4.312], Avg: 15.522 (0.0868) <0-00:53:22> 
Step:   84000, Reward: 15.438 [3.409], Avg: 15.521 (0.0850) <0-00:54:01> 
Step:   85000, Reward: 20.625 [5.061], Avg: 15.58 (0.0833) <0-00:54:41> 
Step:   86000, Reward: 20.688 [5.632], Avg: 15.639 (0.0800) <0-00:55:23> 
Step:   87000, Reward: 16.125 [2.997], Avg: 15.644 (0.0784) <0-00:55:59> 
Step:   88000, Reward: 18.875 [4.285], Avg: 15.681 (0.0753) <0-00:56:41> 
Step:   89000, Reward: 20.312 [4.857], Avg: 15.732 (0.0738) <0-00:57:21> 
Step:   90000, Reward: 17.312 [4.740], Avg: 15.749 (0.0709) <0-00:58:00> 
Step:   91000, Reward: 20.125 [5.622], Avg: 15.797 (0.0695) <0-00:58:45> 
Step:   92000, Reward: 13.688 [3.703], Avg: 15.774 (0.0681) <0-00:59:21> 
Step:   93000, Reward: 18.375 [4.498], Avg: 15.802 (0.0667) <0-01:00:00> 
Step:   94000, Reward: 16.188 [4.142], Avg: 15.806 (0.0654) <0-01:00:40> 
Step:   95000, Reward: 17.75 [5.238], Avg: 15.826 (0.0628) <0-01:01:20> 
Step:   96000, Reward: 18.938 [5.953], Avg: 15.858 (0.0615) <0-01:02:01> 
Step:   97000, Reward: 21.0 [4.062], Avg: 15.911 (0.0603) <0-01:02:42> 
Step:   98000, Reward: 20.812 [5.779], Avg: 15.96 (0.0591) <0-01:03:23> 
Step:   99000, Reward: 16.375 [4.299], Avg: 15.964 (0.0579) <0-01:04:01> 
Step:  100000, Reward: 16.125 [3.314], Avg: 15.966 (0.0568) <0-01:04:37> 
Step:  101000, Reward: 20.5 [4.031], Avg: 16.01 (0.0545) <0-01:05:17> 
Step:  102000, Reward: 18.812 [5.844], Avg: 16.038 (0.0534) <0-01:05:58> 
Step:  103000, Reward: 18.875 [4.151], Avg: 16.065 (0.0524) <0-01:06:37> 
Step:  104000, Reward: 19.125 [5.023], Avg: 16.094 (0.0513) <0-01:07:19> 
Step:  105000, Reward: 20.625 [4.755], Avg: 16.137 (0.0503) <0-01:08:03> 
