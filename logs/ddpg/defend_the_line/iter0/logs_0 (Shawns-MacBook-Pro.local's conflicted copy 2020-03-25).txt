Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: defend_the_line/iter0, Date: 24/03/2020 15:30:05
CPU: 4 Core, 2.2GHz, 16.0 GB, Darwin-18.7.0-x86_64-i386-64bit
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 56691ae322b4160e26475e814b89099e839b1564
Branch: master

num_envs: 16,
state_size: (64, 64, 3),
action_size: [3],
action_space: Discrete(3),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x1272ae240>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: 6.438 [3.061], Avg: 6.438 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 5.625 [1.932], Avg: 6.031 (0.9604) <0-00:01:55> 
Step:    2000, Reward: 5.0 [2.424], Avg: 5.688 (0.9224) <0-00:04:12> 
Step:    3000, Reward: 5.875 [2.934], Avg: 5.734 (0.8858) <0-00:06:33> 
Step:    4000, Reward: 4.625 [2.472], Avg: 5.513 (0.8508) <0-00:08:40> 
Step:    5000, Reward: 5.625 [1.965], Avg: 5.531 (0.8171) <0-00:10:51> 
Step:    6000, Reward: 7.812 [3.025], Avg: 5.857 (0.8007) <0-00:13:11> 
Step:    7000, Reward: 4.875 [2.233], Avg: 5.734 (0.7536) <0-00:15:22> 
Step:    8000, Reward: 7.562 [3.102], Avg: 5.937 (0.7386) <0-00:17:37> 
Step:    9000, Reward: 6.062 [3.648], Avg: 5.95 (0.7238) <0-00:19:53> 
Step:   10000, Reward: 6.812 [2.505], Avg: 6.028 (0.6812) <0-00:22:14> 
Step:   11000, Reward: 9.5 [4.583], Avg: 6.318 (0.6676) <0-00:24:44> 
Step:   12000, Reward: 8.188 [4.503], Avg: 6.461 (0.6543) <0-00:27:06> 
Step:   13000, Reward: 6.938 [3.816], Avg: 6.496 (0.6283) <0-00:29:26> 
Step:   14000, Reward: 9.688 [3.548], Avg: 6.708 (0.6035) <0-00:31:52> 
Step:   15000, Reward: 9.688 [4.209], Avg: 6.895 (0.5796) <0-00:34:17> 
Step:   16000, Reward: 10.188 [4.261], Avg: 7.088 (0.5680) <0-00:36:36> 
Step:   17000, Reward: 13.375 [5.085], Avg: 7.438 (0.5455) <0-00:39:09> 
Step:   18000, Reward: 10.812 [3.988], Avg: 7.615 (0.5346) <0-00:41:32> 
Step:   19000, Reward: 11.688 [6.659], Avg: 7.819 (0.5134) <0-00:44:05> 
Step:   20000, Reward: 11.938 [4.854], Avg: 8.015 (0.5031) <0-00:46:27> 
Step:   21000, Reward: 11.438 [3.605], Avg: 8.171 (0.4832) <0-00:48:46> 
Step:   22000, Reward: 13.875 [5.967], Avg: 8.419 (0.4735) <0-00:51:22> 
Step:   23000, Reward: 14.312 [4.633], Avg: 8.664 (0.4548) <0-00:53:46> 
Step:   24000, Reward: 17.188 [5.052], Avg: 9.005 (0.4457) <0-00:56:24> 
Step:   25000, Reward: 14.438 [4.609], Avg: 9.214 (0.4281) <0-00:58:55> 
Step:   26000, Reward: 14.562 [4.795], Avg: 9.412 (0.4195) <0-01:01:22> 
Step:   27000, Reward: 16.188 [5.150], Avg: 9.654 (0.4111) <0-01:03:57> 
Step:   28000, Reward: 17.812 [4.003], Avg: 9.935 (0.3948) <0-01:06:30> 
Step:   29000, Reward: 18.875 [5.207], Avg: 10.233 (0.3869) <0-01:08:57> 
Step:   30000, Reward: 15.188 [4.475], Avg: 10.393 (0.3716) <0-01:11:25> 
Step:   31000, Reward: 15.688 [4.179], Avg: 10.559 (0.3569) <0-01:13:50> 
Step:   32000, Reward: 14.312 [3.635], Avg: 10.672 (0.3497) <0-01:16:12> 
Step:   33000, Reward: 16.125 [4.314], Avg: 10.833 (0.3428) <0-01:18:40> 
Step:   34000, Reward: 15.625 [3.982], Avg: 10.97 (0.3292) <0-01:21:18> 
Step:   35000, Reward: 16.875 [6.753], Avg: 11.134 (0.3161) <0-01:24:08> 
Step:   36000, Reward: 16.312 [3.583], Avg: 11.274 (0.3036) <0-01:26:36> 
Step:   37000, Reward: 15.5 [5.160], Avg: 11.385 (0.2976) <0-01:29:09> 
Step:   38000, Reward: 20.438 [3.240], Avg: 11.617 (0.2916) <0-01:31:38> 
Step:   39000, Reward: 16.938 [3.631], Avg: 11.75 (0.2858) <0-01:34:06> 
Step:   40000, Reward: 18.625 [5.325], Avg: 11.918 (0.2745) <0-01:36:36> 
Step:   41000, Reward: 17.125 [4.755], Avg: 12.042 (0.2636) <0-01:39:04> 
Step:   42000, Reward: 21.062 [4.789], Avg: 12.252 (0.2583) <0-01:41:49> 
Step:   43000, Reward: 15.25 [3.509], Avg: 12.32 (0.2481) <0-01:44:18> 
Step:   44000, Reward: 20.625 [4.060], Avg: 12.504 (0.2431) <0-01:46:58> 
Step:   45000, Reward: 19.125 [5.011], Avg: 12.648 (0.2335) <0-01:49:32> 
Step:   46000, Reward: 19.312 [4.805], Avg: 12.79 (0.2288) <0-01:52:10> 
Step:   47000, Reward: 16.0 [4.243], Avg: 12.857 (0.2198) <0-01:54:43> 
Step:   48000, Reward: 20.938 [3.864], Avg: 13.022 (0.2111) <0-01:57:25> 
Step:   49000, Reward: 17.312 [5.181], Avg: 13.108 (0.2068) <0-01:59:57> 
Step:   50000, Reward: 18.812 [4.489], Avg: 13.219 (0.2027) <0-02:02:40> 
Step:   51000, Reward: 18.25 [4.670], Avg: 13.316 (0.1986) <0-02:05:20> 
Step:   52000, Reward: 20.062 [3.976], Avg: 13.443 (0.1947) <0-02:07:55> 
Step:   53000, Reward: 18.562 [4.911], Avg: 13.538 (0.1870) <0-02:10:27> 
Step:   54000, Reward: 15.688 [4.088], Avg: 13.577 (0.1832) <0-02:12:55> 
Step:   55000, Reward: 14.625 [3.462], Avg: 13.596 (0.1796) <0-02:15:19> 
Step:   56000, Reward: 15.188 [3.302], Avg: 13.624 (0.1760) <0-02:17:49> 
Step:   57000, Reward: 17.25 [2.926], Avg: 13.686 (0.1725) <0-02:20:38> 
Step:   58000, Reward: 15.75 [5.414], Avg: 13.721 (0.1656) <0-02:23:16> 
Step:   59000, Reward: 18.688 [3.117], Avg: 13.804 (0.1623) <0-02:25:54> 
Step:   60000, Reward: 15.0 [4.047], Avg: 13.824 (0.1559) <0-02:28:25> 
Step:   61000, Reward: 17.812 [3.661], Avg: 13.888 (0.1528) <0-02:30:53> 
Step:   62000, Reward: 19.25 [3.800], Avg: 13.973 (0.1497) <0-02:33:24> 
Step:   63000, Reward: 15.312 [2.931], Avg: 13.994 (0.1409) <0-02:35:51> 
Step:   64000, Reward: 19.125 [4.594], Avg: 14.073 (0.1381) <0-02:38:30> 
Step:   65000, Reward: 17.312 [3.216], Avg: 14.122 (0.1353) <0-02:41:03> 
Step:   66000, Reward: 16.875 [3.839], Avg: 14.163 (0.1326) <0-02:43:34> 
Step:   67000, Reward: 19.562 [4.596], Avg: 14.243 (0.1300) <0-02:46:11> 
Step:   68000, Reward: 18.0 [3.725], Avg: 14.297 (0.1274) <0-02:48:42> 
Step:   69000, Reward: 16.0 [4.796], Avg: 14.321 (0.1223) <0-02:51:18> 
Step:   70000, Reward: 20.125 [4.755], Avg: 14.403 (0.1199) <0-02:53:56> 
Step:   71000, Reward: 20.125 [5.721], Avg: 14.483 (0.1151) <0-02:56:37> 
Step:   72000, Reward: 18.625 [5.510], Avg: 14.539 (0.1106) <0-02:59:22> 
Step:   73000, Reward: 19.125 [6.143], Avg: 14.601 (0.1084) <0-03:02:16> 
Step:   74000, Reward: 19.688 [2.615], Avg: 14.669 (0.1062) <0-03:04:42> 
Step:   75000, Reward: 16.5 [5.545], Avg: 14.693 (0.1020) <0-03:07:13> 
Step:   76000, Reward: 19.25 [4.828], Avg: 14.752 (0.0999) <0-03:10:03> 
Step:   77000, Reward: 16.5 [4.272], Avg: 14.775 (0.0979) <0-03:12:37> 
Step:   78000, Reward: 19.438 [4.077], Avg: 14.834 (0.0941) <0-03:15:10> 
Step:   79000, Reward: 16.438 [4.873], Avg: 14.854 (0.0922) <0-03:17:51> 
Step:   80000, Reward: 16.312 [4.740], Avg: 14.872 (0.0885) <0-03:20:35> 
Step:   81000, Reward: 15.125 [3.219], Avg: 14.875 (0.0868) <0-03:23:06> 
