Model: <class 'models.ddpg.DDPGAgent'>, Dir: iter0/


import os
import math
import torch
import random
import numpy as np
from models.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE

EPS_MIN = 0.01                	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
NUM_STEPS = 1000				# The number of steps to collect experience in sequence for each GAE calculation

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, *action_size)
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, *action_size)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh()
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)==1 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(*action_size, INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, gpu=True, load=None): 
		super().__init__(state_size, action_size, DDPGActor, DDPGCritic, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, use_target=False, numpy=True, sample=True):
		with torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, numpy=True):
		with torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			return critic(state, action).cpu().numpy() if numpy else critic(state, action)
	
	def optimize(self, states, actions, q_targets, importances=1):
		q_values = self.critic_local(states, actions)
		critic_error = q_values - q_targets.detach()
		critic_loss = importances.to(self.device) * critic_error.pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())

		q_actions = self.critic_local(states, self.actor_local(states))
		actor_loss = -(q_actions - q_values.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		
		self.soft_copy(self.actor_local, self.actor_target)
		self.soft_copy(self.critic_local, self.critic_target)
		return critic_error.cpu().detach().numpy().squeeze(-1)
	
	def save_model(self, dirname="pytorch", name="best"):
		super().save_model("ddpg", dirname, name)
		
	def load_model(self, dirname="pytorch", name="best"):
		super().load_model("ddpg", dirname, name)

class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, lr=lr, update_freq=update_freq, decay=decay, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if e_greedy and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), sample=sample)
		action = action_greedy if e_greedy else np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if len(self.buffer) >= int(self.update_freq * (1 - self.eps + EPS_MIN)**0.5):
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			next_state = self.to_tensor(next_state)
			next_action = self.network.get_action(next_state, use_target=True, numpy=False)
			values = self.network.get_q_value(states, actions, use_target=True, numpy=False)
			next_value = self.network.get_q_value(next_state, next_action, use_target=True, numpy=False)
			targets, advantages = self.compute_gae(next_value, rewards.unsqueeze(-1), dones.unsqueeze(-1), values)
			states, actions, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states, actions, targets, advantages)]
			self.replay_buffer.extend(zip(states, actions, targets, advantages))	
		if len(self.replay_buffer) > 0:
			(states, actions, targets, advantages), indices, importances = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)
			errors = self.network.optimize(states, actions, targets, importances**(1-self.eps))
			self.replay_buffer.update_priorities(indices, errors)
			if done[0]: self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.97			# The discount rate to use in the Bellman Equation
NUM_STEPS = 1000				# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.1                 	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.995             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer

Ep: 0, Reward: -52.0974, Test: -52.3377 [15.65], Avg: -67.9866 (0.980)
Ep: 1, Reward: -48.0367, Test: -52.1861 [26.51], Avg: -73.3429 (0.960)
Ep: 2, Reward: -58.7755, Test: -46.8534 [45.16], Avg: -79.5672 (0.941)
Ep: 3, Reward: -58.4385, Test: -62.2460 [17.67], Avg: -79.6533 (0.922)
Ep: 4, Reward: -57.9531, Test: -56.9128 [14.94], Avg: -78.0931 (0.904)
Ep: 5, Reward: -59.4155, Test: -42.8685 [25.96], Avg: -76.5484 (0.886)
Ep: 6, Reward: -58.6531, Test: -45.9723 [23.38], Avg: -75.5208 (0.868)
Ep: 7, Reward: -71.4471, Test: -65.8272 [15.06], Avg: -76.1921 (0.851)
Ep: 8, Reward: -46.0248, Test: -61.9483 [16.97], Avg: -76.4947 (0.834)
Ep: 9, Reward: -56.6662, Test: -42.2639 [22.17], Avg: -75.2887 (0.817)
Ep: 10, Reward: -51.2600, Test: -50.6521 [34.11], Avg: -76.1495 (0.801)
Ep: 11, Reward: -52.8671, Test: -50.1456 [27.94], Avg: -76.3108 (0.785)
Ep: 12, Reward: -51.1544, Test: -47.8095 [33.94], Avg: -76.7288 (0.769)
Ep: 13, Reward: -44.6937, Test: -43.8521 [25.23], Avg: -76.1825 (0.754)
Ep: 14, Reward: -39.6250, Test: -57.6276 [18.52], Avg: -76.1799 (0.739)
Ep: 15, Reward: -58.2616, Test: -58.1196 [15.72], Avg: -76.0334 (0.724)
Ep: 16, Reward: -43.7361, Test: -86.1851 [51.18], Avg: -79.6413 (0.709)
Ep: 17, Reward: -63.1798, Test: -39.4583 [9.23], Avg: -77.9215 (0.695)
Ep: 18, Reward: -53.0035, Test: -48.9088 [21.44], Avg: -77.5227 (0.681)
Ep: 19, Reward: -52.5696, Test: -47.2998 [19.96], Avg: -77.0096 (0.668)
Ep: 20, Reward: -58.7989, Test: -50.7842 [41.51], Avg: -77.7376 (0.654)
Ep: 21, Reward: -42.4238, Test: -65.4235 [42.52], Avg: -79.1106 (0.641)
Ep: 22, Reward: -56.5484, Test: -48.6648 [16.16], Avg: -78.4894 (0.628)
Ep: 23, Reward: -55.7914, Test: -59.0280 [23.10], Avg: -78.6411 (0.616)
Ep: 24, Reward: -37.7548, Test: -48.8220 [42.26], Avg: -79.1388 (0.603)
Ep: 25, Reward: -64.0226, Test: -50.8767 [20.85], Avg: -78.8538 (0.591)
Ep: 26, Reward: -27.1525, Test: -25.8976 [43.92], Avg: -78.5190 (0.580)
Ep: 27, Reward: -40.7013, Test: -48.3819 [59.32], Avg: -79.5613 (0.568)
Ep: 28, Reward: -43.9099, Test: -33.4731 [40.70], Avg: -79.3756 (0.557)
Ep: 29, Reward: -40.6391, Test: -37.9598 [33.78], Avg: -79.1212 (0.545)
Ep: 30, Reward: -45.3273, Test: -8.2611 [45.28], Avg: -78.2962 (0.535)
Ep: 31, Reward: -48.7212, Test: -39.8386 [64.12], Avg: -79.0981 (0.524)
Ep: 32, Reward: -35.9431, Test: -25.8045 [60.85], Avg: -79.3272 (0.513)
Ep: 33, Reward: -27.0205, Test: -40.9287 [35.30], Avg: -79.2361 (0.503)
Ep: 34, Reward: -2.4021, Test: -28.7919 [74.28], Avg: -79.9170 (0.493)
Ep: 35, Reward: 3.2664, Test: -34.7116 [26.02], Avg: -79.3841 (0.483)
Ep: 36, Reward: -5.1960, Test: 14.5312 [47.91], Avg: -78.1406 (0.474)
Ep: 37, Reward: 10.4880, Test: -4.7791 [47.49], Avg: -77.4598 (0.464)
Ep: 38, Reward: 26.5493, Test: 7.7921 [49.90], Avg: -76.5534 (0.455)
Ep: 39, Reward: -10.6177, Test: -7.4525 [30.34], Avg: -75.5845 (0.446)
Ep: 40, Reward: 1.6746, Test: 19.2809 [53.18], Avg: -74.5678 (0.437)
Ep: 41, Reward: 16.3043, Test: 9.0626 [56.86], Avg: -73.9305 (0.428)
Ep: 42, Reward: 14.3050, Test: 16.4336 [71.64], Avg: -73.4950 (0.419)
Ep: 43, Reward: 19.6483, Test: 7.1264 [36.29], Avg: -72.4875 (0.411)
Ep: 44, Reward: 14.7228, Test: 28.2220 [95.87], Avg: -72.3800 (0.403)
Ep: 45, Reward: 4.9382, Test: 84.4980 [98.20], Avg: -71.1044 (0.395)
Ep: 46, Reward: -0.9000, Test: 24.5870 [57.33], Avg: -70.2883 (0.387)
Ep: 47, Reward: 31.4247, Test: 37.3730 [97.86], Avg: -70.0841 (0.379)
Ep: 48, Reward: 33.5475, Test: 18.9809 [49.55], Avg: -69.2776 (0.372)
Ep: 49, Reward: 5.7402, Test: 6.9270 [47.02], Avg: -68.6938 (0.364)
Ep: 50, Reward: 33.9864, Test: 63.2565 [113.64], Avg: -68.3348 (0.350)
Ep: 51, Reward: 72.4001, Test: 7.9092 [101.15], Avg: -68.8137 (0.343)
Ep: 52, Reward: 64.2417, Test: -7.6352 [50.43], Avg: -68.6109 (0.336)
Ep: 53, Reward: 69.2385, Test: 136.4546 [187.74], Avg: -68.2901 (0.329)
Ep: 54, Reward: 49.8110, Test: 41.1611 [65.93], Avg: -67.4988 (0.323)
Ep: 55, Reward: 54.6455, Test: 68.5920 [127.18], Avg: -67.3397 (0.316)
Ep: 56, Reward: 40.4524, Test: 88.9472 [108.89], Avg: -66.5082 (0.310)
Ep: 57, Reward: 100.8833, Test: 51.6793 [72.80], Avg: -65.7256 (0.304)
Ep: 58, Reward: 78.7036, Test: 46.8460 [82.80], Avg: -65.2209 (0.298)
Ep: 59, Reward: 60.0885, Test: 30.1753 [122.39], Avg: -65.6709 (0.292)
Ep: 60, Reward: 69.8766, Test: 121.5409 [132.34], Avg: -64.7713 (0.286)
Ep: 61, Reward: 144.8568, Test: 72.1885 [117.63], Avg: -64.4596 (0.280)
Ep: 62, Reward: 138.5697, Test: 166.8161 [143.20], Avg: -63.0616 (0.274)
Ep: 63, Reward: 172.4456, Test: 143.0241 [104.49], Avg: -61.4742 (0.269)
Ep: 64, Reward: 132.9861, Test: 303.0598 [164.12], Avg: -58.3908 (0.264)
Ep: 65, Reward: 171.3690, Test: 187.5051 [156.34], Avg: -57.0340 (0.258)
Ep: 66, Reward: 224.3804, Test: 212.1295 [159.77], Avg: -55.4012 (0.253)
Ep: 67, Reward: 220.1196, Test: 226.1705 [107.85], Avg: -52.8465 (0.248)
Ep: 68, Reward: 238.2726, Test: 247.1111 [152.17], Avg: -50.7046 (0.243)
