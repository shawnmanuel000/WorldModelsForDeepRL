Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: CarRacing-v0/iter1, Date: 25/03/2020 19:20:33
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
GPU 1: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 85df50193a14965f0609f099a1fec05b0ca186c1
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7fcd8f77cb38>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -48.849 [15.755], Avg: -48.849 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -45.8 [20.813], Avg: -47.324 (0.9800) <0-00:01:12> 
Step:    2000, Reward: -48.832 [19.855], Avg: -47.827 (0.9604) <0-00:02:28> 
Step:    3000, Reward: -38.785 [26.673], Avg: -45.566 (0.9412) <0-00:03:43> 
Step:    4000, Reward: -34.665 [21.598], Avg: -43.386 (0.9224) <0-00:05:00> 
Step:    5000, Reward: -36.017 [21.132], Avg: -42.158 (0.9039) <0-00:06:17> 
Step:    6000, Reward: -34.023 [30.195], Avg: -40.996 (0.8858) <0-00:07:34> 
Step:    7000, Reward: -33.788 [20.861], Avg: -40.095 (0.8681) <0-00:08:51> 
Step:    8000, Reward: -30.255 [20.218], Avg: -39.002 (0.8508) <0-00:10:09> 
Step:    9000, Reward: -39.547 [16.197], Avg: -39.056 (0.8337) <0-00:11:26> 
Step:   10000, Reward: -35.463 [26.068], Avg: -38.729 (0.8171) <0-00:12:41> 
Step:   11000, Reward: -43.374 [23.538], Avg: -39.117 (0.8007) <0-00:14:00> 
Step:   12000, Reward: -22.287 [34.110], Avg: -37.822 (0.7847) <0-00:15:17> 
Step:   13000, Reward: -44.227 [36.886], Avg: -38.279 (0.7690) <0-00:16:35> 
Step:   14000, Reward: -33.936 [18.837], Avg: -37.99 (0.7536) <0-00:17:52> 
Step:   15000, Reward: -25.645 [26.151], Avg: -37.218 (0.7386) <0-00:19:12> 
Step:   16000, Reward: -37.826 [28.831], Avg: -37.254 (0.7238) <0-00:20:28> 
Step:   17000, Reward: -18.907 [38.283], Avg: -36.235 (0.7093) <0-00:21:47> 
Step:   18000, Reward: -22.075 [30.943], Avg: -35.49 (0.6951) <0-00:23:05> 
Step:   19000, Reward: -28.557 [26.472], Avg: -35.143 (0.6812) <0-00:24:21> 
Step:   20000, Reward: -19.614 [33.182], Avg: -34.403 (0.6676) <0-00:25:36> 
Step:   21000, Reward: -0.848 [29.820], Avg: -32.878 (0.6543) <0-00:26:53> 
Step:   22000, Reward: -1.382 [57.712], Avg: -31.509 (0.6412) <0-00:28:09> 
Step:   23000, Reward: 25.801 [43.669], Avg: -29.121 (0.6283) <0-00:29:25> 
Step:   24000, Reward: 18.219 [59.612], Avg: -27.227 (0.6158) <0-00:30:44> 
Step:   25000, Reward: 11.611 [50.369], Avg: -25.734 (0.6035) <0-00:32:02> 
Step:   26000, Reward: 27.174 [57.814], Avg: -23.774 (0.5914) <0-00:33:20> 
Step:   27000, Reward: 32.038 [56.937], Avg: -21.781 (0.5796) <0-00:34:36> 
Step:   28000, Reward: 46.36 [60.962], Avg: -19.431 (0.5680) <0-00:35:55> 
Step:   29000, Reward: 41.832 [71.986], Avg: -17.389 (0.5566) <0-00:37:11> 
Step:   30000, Reward: 43.529 [54.849], Avg: -15.424 (0.5455) <0-00:38:27> 
Step:   31000, Reward: 23.481 [56.307], Avg: -14.208 (0.5346) <0-00:39:48> 
Step:   32000, Reward: 16.125 [39.742], Avg: -13.289 (0.5239) <0-00:41:02> 
Step:   33000, Reward: 41.242 [79.516], Avg: -11.685 (0.5134) <0-00:42:16> 
Step:   34000, Reward: 66.437 [87.658], Avg: -9.453 (0.5031) <0-00:43:33> 
Step:   35000, Reward: 77.15 [80.899], Avg: -7.047 (0.4931) <0-00:44:49> 
Step:   36000, Reward: 142.361 [82.034], Avg: -3.009 (0.4832) <0-00:46:07> 
Step:   37000, Reward: 105.62 [89.177], Avg: -0.151 (0.4735) <0-00:47:24> 
Step:   38000, Reward: 130.833 [132.206], Avg: 3.208 (0.4641) <0-00:48:39> 
Step:   39000, Reward: 221.81 [82.337], Avg: 8.673 (0.4548) <0-00:49:56> 
Step:   40000, Reward: 120.044 [105.614], Avg: 11.389 (0.4457) <0-00:51:14> 
Step:   41000, Reward: 162.021 [136.229], Avg: 14.976 (0.4368) <0-00:52:31> 
Step:   42000, Reward: 163.683 [85.040], Avg: 18.434 (0.4281) <0-00:53:46> 
Step:   43000, Reward: 175.23 [96.196], Avg: 21.998 (0.4195) <0-00:55:00> 
Step:   44000, Reward: 219.538 [135.251], Avg: 26.387 (0.4111) <0-00:56:15> 
Step:   45000, Reward: 221.14 [61.024], Avg: 30.621 (0.4029) <0-00:57:35> 
Step:   46000, Reward: 142.916 [134.301], Avg: 33.01 (0.3948) <0-00:58:53> 
Step:   47000, Reward: 208.692 [86.815], Avg: 36.671 (0.3869) <0-01:00:10> 
Step:   48000, Reward: 169.042 [113.821], Avg: 39.372 (0.3792) <0-01:01:25> 
Step:   49000, Reward: 253.014 [80.970], Avg: 43.645 (0.3716) <0-01:02:43> 
Step:   50000, Reward: 209.66 [118.605], Avg: 46.9 (0.3642) <0-01:03:57> 
Step:   51000, Reward: 226.494 [134.678], Avg: 50.354 (0.3569) <0-01:05:16> 
Step:   52000, Reward: 190.184 [147.868], Avg: 52.992 (0.3497) <0-01:06:33> 
Step:   53000, Reward: 257.538 [173.538], Avg: 56.78 (0.3428) <0-01:07:50> 
Step:   54000, Reward: 228.998 [164.176], Avg: 59.911 (0.3359) <0-01:09:09> 
Step:   55000, Reward: 228.174 [122.197], Avg: 62.916 (0.3292) <0-01:10:25> 
Step:   56000, Reward: 292.299 [181.871], Avg: 66.94 (0.3226) <0-01:11:41> 
Step:   57000, Reward: 308.954 [175.211], Avg: 71.113 (0.3161) <0-01:13:01> 
Step:   58000, Reward: 285.116 [200.215], Avg: 74.74 (0.3098) <0-01:14:20> 
Step:   59000, Reward: 341.858 [139.385], Avg: 79.192 (0.3036) <0-01:15:37> 
Step:   60000, Reward: 404.609 [72.806], Avg: 84.527 (0.2976) <0-01:16:55> 
Step:   61000, Reward: 416.471 [155.941], Avg: 89.881 (0.2916) <0-01:18:13> 
Step:   62000, Reward: 491.957 [82.975], Avg: 96.263 (0.2858) <0-01:19:29> 
Step:   63000, Reward: 406.662 [82.219], Avg: 101.113 (0.2801) <0-01:20:47> 
Step:   64000, Reward: 405.059 [145.877], Avg: 105.789 (0.2745) <0-01:22:06> 
Step:   65000, Reward: 449.543 [95.251], Avg: 110.997 (0.2690) <0-01:23:25> 
Step:   66000, Reward: 476.765 [75.206], Avg: 116.456 (0.2636) <0-01:24:42> 
Step:   67000, Reward: 536.087 [103.088], Avg: 122.627 (0.2583) <0-01:25:58> 
