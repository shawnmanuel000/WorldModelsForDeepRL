Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: CarRacing-v0/iter1, Date: 23/03/2020 22:03:22
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 57eb00c1a9e75822d6f7108a463014144cffb906
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f48300ebf98>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)


Step:       0, Reward: -37.505 [16.643], Avg: -37.505 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -42.38 [16.773], Avg: -39.942 (0.9800) <0-00:00:45> 
Step:    2000, Reward: -47.989 [13.812], Avg: -42.625 (0.9604) <0-00:01:33> 
Step:    3000, Reward: -54.105 [18.170], Avg: -45.495 (0.9412) <0-00:02:22> 
Step:    4000, Reward: -50.139 [27.106], Avg: -46.424 (0.9224) <0-00:03:11> 
Step:    5000, Reward: -41.494 [24.917], Avg: -45.602 (0.9039) <0-00:03:59> 
Step:    6000, Reward: -40.888 [20.290], Avg: -44.929 (0.8858) <0-00:04:48> 
Step:    7000, Reward: -34.091 [23.486], Avg: -43.574 (0.8681) <0-00:05:37> 
Step:    8000, Reward: -37.952 [14.045], Avg: -42.949 (0.8508) <0-00:06:26> 
Step:    9000, Reward: -44.05 [17.100], Avg: -43.059 (0.8337) <0-00:07:15> 
Step:   10000, Reward: -43.271 [18.890], Avg: -43.079 (0.8171) <0-00:08:04> 
Step:   11000, Reward: -42.262 [17.644], Avg: -43.01 (0.8007) <0-00:08:52> 
Step:   12000, Reward: -33.693 [35.762], Avg: -42.294 (0.7847) <0-00:09:41> 
Step:   13000, Reward: -42.961 [15.710], Avg: -42.341 (0.7690) <0-00:10:30> 
Step:   14000, Reward: -33.545 [16.368], Avg: -41.755 (0.7536) <0-00:11:18> 
Step:   15000, Reward: -32.185 [25.128], Avg: -41.157 (0.7386) <0-00:12:07> 
Step:   16000, Reward: -31.701 [20.604], Avg: -40.601 (0.7238) <0-00:12:56> 
Step:   17000, Reward: -39.33 [28.130], Avg: -40.53 (0.7093) <0-00:13:46> 
Step:   18000, Reward: -22.458 [44.345], Avg: -39.579 (0.6951) <0-00:14:42> 
Step:   19000, Reward: -18.172 [31.262], Avg: -38.509 (0.6812) <0-00:15:31> 
Step:   20000, Reward: -4.357 [44.550], Avg: -36.882 (0.6676) <0-00:16:20> 
Step:   21000, Reward: -4.505 [34.981], Avg: -35.411 (0.6543) <0-00:17:08> 
Step:   22000, Reward: 19.086 [43.512], Avg: -33.041 (0.6412) <0-00:17:57> 
Step:   23000, Reward: -6.997 [37.883], Avg: -31.956 (0.6283) <0-00:18:46> 
Step:   24000, Reward: 6.654 [72.369], Avg: -30.412 (0.6158) <0-00:19:35> 
Step:   25000, Reward: 25.471 [57.370], Avg: -28.262 (0.6035) <0-00:20:24> 
Step:   26000, Reward: 23.856 [72.168], Avg: -26.332 (0.5914) <0-00:21:13> 
Step:   27000, Reward: -16.658 [34.207], Avg: -25.986 (0.5796) <0-00:22:02> 
Step:   28000, Reward: 4.853 [89.490], Avg: -24.923 (0.5680) <0-00:22:51> 
Step:   29000, Reward: 38.57 [82.205], Avg: -22.807 (0.5566) <0-00:23:40> 
Step:   30000, Reward: 29.148 [70.963], Avg: -21.131 (0.5455) <0-00:24:29> 
Step:   31000, Reward: 30.33 [65.010], Avg: -19.522 (0.5346) <0-00:25:18> 
Step:   32000, Reward: 12.301 [55.024], Avg: -18.558 (0.5239) <0-00:26:07> 
Step:   33000, Reward: 66.138 [76.520], Avg: -16.067 (0.5134) <0-00:26:56> 
Step:   34000, Reward: 117.614 [76.190], Avg: -12.248 (0.5031) <0-00:27:45> 
Step:   35000, Reward: 34.76 [63.059], Avg: -10.942 (0.4931) <0-00:28:34> 
Step:   36000, Reward: 92.586 [86.670], Avg: -8.144 (0.4832) <0-00:29:22> 
Step:   37000, Reward: 107.314 [88.939], Avg: -5.105 (0.4735) <0-00:30:11> 
Step:   38000, Reward: 110.593 [119.181], Avg: -2.139 (0.4641) <0-00:31:00> 
Step:   39000, Reward: 42.203 [68.651], Avg: -1.03 (0.4548) <0-00:31:49> 
Step:   40000, Reward: 46.749 [93.440], Avg: 0.135 (0.4457) <0-00:32:38> 
Step:   41000, Reward: 94.421 [89.282], Avg: 2.38 (0.4368) <0-00:33:27> 
Step:   42000, Reward: 129.863 [102.460], Avg: 5.345 (0.4281) <0-00:34:16> 
Step:   43000, Reward: 133.921 [57.928], Avg: 8.267 (0.4195) <0-00:35:05> 
Step:   44000, Reward: 121.963 [51.861], Avg: 10.793 (0.4111) <0-00:35:54> 
Step:   45000, Reward: 139.33 [69.410], Avg: 13.588 (0.4029) <0-00:36:43> 
Step:   46000, Reward: 155.768 [75.054], Avg: 16.613 (0.3948) <0-00:37:32> 
Step:   47000, Reward: 180.318 [100.567], Avg: 20.023 (0.3869) <0-00:38:21> 
Step:   48000, Reward: 158.185 [108.029], Avg: 22.843 (0.3792) <0-00:39:10> 
Step:   49000, Reward: 207.338 [122.846], Avg: 26.533 (0.3716) <0-00:39:58> 
Step:   50000, Reward: 200.294 [103.395], Avg: 29.94 (0.3642) <0-00:40:47> 
Step:   51000, Reward: 136.012 [128.446], Avg: 31.98 (0.3569) <0-00:41:36> 
Step:   52000, Reward: 102.782 [139.041], Avg: 33.316 (0.3497) <0-00:42:25> 
Step:   53000, Reward: 178.671 [161.754], Avg: 36.007 (0.3428) <0-00:43:14> 
Step:   54000, Reward: 214.786 [192.820], Avg: 39.258 (0.3359) <0-00:44:02> 
Step:   55000, Reward: 271.816 [110.702], Avg: 43.411 (0.3292) <0-00:44:51> 
Step:   56000, Reward: 173.276 [173.277], Avg: 45.689 (0.3226) <0-00:45:40> 
Step:   57000, Reward: 280.463 [176.376], Avg: 49.737 (0.3161) <0-00:46:29> 
Step:   58000, Reward: 299.436 [156.795], Avg: 53.969 (0.3098) <0-00:47:17> 
Step:   59000, Reward: 429.604 [138.654], Avg: 60.23 (0.3036) <0-00:48:06> 
Step:   60000, Reward: 360.291 [170.639], Avg: 65.149 (0.2976) <0-00:48:55> 
Step:   61000, Reward: 395.913 [59.186], Avg: 70.484 (0.2916) <0-00:49:44> 
Step:   62000, Reward: 404.776 [93.794], Avg: 75.79 (0.2858) <0-00:50:33> 
Step:   63000, Reward: 363.567 [122.248], Avg: 80.286 (0.2801) <0-00:51:22> 
Step:   64000, Reward: 338.993 [155.570], Avg: 84.267 (0.2745) <0-00:52:11> 
Step:   65000, Reward: 425.769 [77.022], Avg: 89.441 (0.2690) <0-00:53:00> 
Step:   66000, Reward: 438.632 [67.941], Avg: 94.653 (0.2636) <0-00:53:48> 
Step:   67000, Reward: 473.529 [76.162], Avg: 100.224 (0.2583) <0-00:54:37> 
Step:   68000, Reward: 375.949 [142.665], Avg: 104.22 (0.2531) <0-00:55:26> 
Step:   69000, Reward: 508.844 [89.334], Avg: 110.001 (0.2481) <0-00:56:15> 
Step:   70000, Reward: 450.726 [171.442], Avg: 114.8 (0.2431) <0-00:57:04> 
Step:   71000, Reward: 263.369 [176.112], Avg: 116.863 (0.2383) <0-00:57:53> 
Step:   72000, Reward: 504.565 [206.056], Avg: 122.174 (0.2335) <0-00:58:41> 
Step:   73000, Reward: 420.448 [208.805], Avg: 126.205 (0.2288) <0-00:59:30> 
Step:   74000, Reward: 461.998 [184.620], Avg: 130.682 (0.2242) <0-01:00:19> 
Step:   75000, Reward: 314.537 [211.607], Avg: 133.101 (0.2198) <0-01:01:08> 
Step:   76000, Reward: 293.597 [210.992], Avg: 135.186 (0.2154) <0-01:01:56> 
Step:   77000, Reward: 479.828 [226.674], Avg: 139.604 (0.2111) <0-01:02:45> 
Step:   78000, Reward: 423.376 [206.256], Avg: 143.196 (0.2068) <0-01:03:33> 
Step:   79000, Reward: 559.65 [203.629], Avg: 148.402 (0.2027) <0-01:04:23> 
Step:   80000, Reward: 661.953 [209.219], Avg: 154.742 (0.1986) <0-01:05:12> 
Step:   81000, Reward: 598.469 [192.259], Avg: 160.153 (0.1947) <0-01:06:00> 
Step:   82000, Reward: 597.733 [205.538], Avg: 165.425 (0.1908) <0-01:06:49> 
Step:   83000, Reward: 626.916 [169.190], Avg: 170.919 (0.1870) <0-01:07:38> 
Step:   84000, Reward: 732.188 [166.483], Avg: 177.522 (0.1832) <0-01:08:27> 
Step:   85000, Reward: 837.869 [123.151], Avg: 185.201 (0.1796) <0-01:09:16> 
Step:   86000, Reward: 802.573 [124.107], Avg: 192.297 (0.1760) <0-01:10:05> 
Step:   87000, Reward: 767.297 [171.803], Avg: 198.831 (0.1725) <0-01:10:53> 
Step:   88000, Reward: 801.536 [163.960], Avg: 205.603 (0.1690) <0-01:11:42> 
Step:   89000, Reward: 815.524 [116.357], Avg: 212.38 (0.1656) <0-01:12:31> 
Step:   90000, Reward: 750.417 [195.897], Avg: 218.292 (0.1623) <0-01:13:19> 
Step:   91000, Reward: 771.74 [198.698], Avg: 224.308 (0.1591) <0-01:14:08> 
Step:   92000, Reward: 826.739 [43.860], Avg: 230.786 (0.1559) <0-01:14:57> 
Step:   93000, Reward: 848.513 [33.239], Avg: 237.358 (0.1528) <0-01:15:46> 
Step:   94000, Reward: 776.779 [147.683], Avg: 243.036 (0.1497) <0-01:16:35> 
Step:   95000, Reward: 727.323 [180.193], Avg: 248.08 (0.1467) <0-01:17:24> 
Step:   96000, Reward: 690.385 [190.707], Avg: 252.64 (0.1438) <0-01:18:12> 
Step:   97000, Reward: 572.682 [218.909], Avg: 255.906 (0.1409) <0-01:19:01> 
Step:   98000, Reward: 477.429 [178.447], Avg: 258.144 (0.1381) <0-01:19:50> 
Step:   99000, Reward: 651.153 [173.220], Avg: 262.074 (0.1353) <0-01:20:39> 
Step:  100000, Reward: 669.875 [190.763], Avg: 266.111 (0.1326) <0-01:21:28> 
Step:  101000, Reward: 712.811 [139.906], Avg: 270.491 (0.1300) <0-01:22:17> 
Step:  102000, Reward: 512.958 [221.052], Avg: 272.845 (0.1274) <0-01:23:06> 
Step:  103000, Reward: 722.096 [172.382], Avg: 277.164 (0.1248) <0-01:23:54> 
Step:  104000, Reward: 792.478 [149.395], Avg: 282.072 (0.1223) <0-01:24:43> 
Step:  105000, Reward: 742.108 [209.837], Avg: 286.412 (0.1199) <0-01:25:32> 
Step:  106000, Reward: 652.004 [280.424], Avg: 289.829 (0.1175) <0-01:26:21> 
Step:  107000, Reward: 766.076 [177.283], Avg: 294.239 (0.1151) <0-01:27:10> 
Step:  108000, Reward: 768.093 [182.659], Avg: 298.586 (0.1128) <0-01:27:58> 
Step:  109000, Reward: 718.81 [124.265], Avg: 302.406 (0.1106) <0-01:28:47> 
Step:  110000, Reward: 627.911 [203.728], Avg: 305.339 (0.1084) <0-01:29:36> 
Step:  111000, Reward: 563.605 [192.958], Avg: 307.645 (0.1062) <0-01:30:25> 
Step:  112000, Reward: 532.862 [182.717], Avg: 309.638 (0.1041) <0-01:31:13> 
Step:  113000, Reward: 555.376 [200.218], Avg: 311.793 (0.1020) <0-01:32:02> 
Step:  114000, Reward: 562.258 [188.143], Avg: 313.971 (0.0999) <0-01:32:51> 
Step:  115000, Reward: 565.657 [220.127], Avg: 316.141 (0.0979) <0-01:33:40> 
Step:  116000, Reward: 579.129 [202.746], Avg: 318.389 (0.0960) <0-01:34:29> 
Step:  117000, Reward: 641.727 [203.220], Avg: 321.129 (0.0941) <0-01:35:18> 
Step:  118000, Reward: 569.073 [175.826], Avg: 323.212 (0.0922) <0-01:36:07> 
Step:  119000, Reward: 688.326 [186.613], Avg: 326.255 (0.0903) <0-01:36:56> 
Step:  120000, Reward: 481.844 [168.307], Avg: 327.541 (0.0885) <0-01:37:45> 
Step:  121000, Reward: 513.227 [196.623], Avg: 329.063 (0.0868) <0-01:38:33> 
Step:  122000, Reward: 725.078 [61.785], Avg: 332.282 (0.0850) <0-01:39:22> 
Step:  123000, Reward: 809.624 [38.317], Avg: 336.132 (0.0833) <0-01:40:10> 
Step:  124000, Reward: 854.78 [61.742], Avg: 340.281 (0.0817) <0-01:40:59> 
Step:  125000, Reward: 894.125 [26.075], Avg: 344.677 (0.0800) <0-01:41:48> 
Step:  126000, Reward: 863.11 [71.157], Avg: 348.759 (0.0784) <0-01:42:38> 
Step:  127000, Reward: 762.736 [189.649], Avg: 351.993 (0.0769) <0-01:43:27> 
Step:  128000, Reward: 841.857 [44.550], Avg: 355.79 (0.0753) <0-01:44:16> 
Step:  129000, Reward: 820.533 [120.790], Avg: 359.365 (0.0738) <0-01:45:04> 
Step:  130000, Reward: 884.868 [29.938], Avg: 363.377 (0.0723) <0-01:45:53> 
Step:  131000, Reward: 893.606 [23.470], Avg: 367.394 (0.0695) <0-01:46:43> 
Step:  132000, Reward: 890.225 [19.039], Avg: 371.325 (0.0681) <0-01:47:32> 
Step:  133000, Reward: 896.789 [21.754], Avg: 375.246 (0.0667) <0-01:48:21> 
Step:  134000, Reward: 857.76 [15.239], Avg: 378.82 (0.0654) <0-01:49:10> 
Step:  135000, Reward: 876.795 [24.862], Avg: 382.482 (0.0641) <0-01:49:59> 
Step:  136000, Reward: 874.478 [68.020], Avg: 386.073 (0.0628) <0-01:50:47> 
Step:  137000, Reward: 884.186 [18.350], Avg: 389.683 (0.0615) <0-01:51:36> 
Step:  138000, Reward: 859.208 [177.080], Avg: 393.061 (0.0603) <0-01:52:25> 
Step:  139000, Reward: 863.915 [123.902], Avg: 396.424 (0.0591) <0-01:53:14> 
Step:  140000, Reward: 765.18 [206.811], Avg: 399.039 (0.0579) <0-01:54:03> 
Step:  141000, Reward: 824.406 [189.847], Avg: 402.035 (0.0568) <0-01:54:52> 
Step:  142000, Reward: 643.259 [286.026], Avg: 403.722 (0.0556) <0-01:55:41> 
Step:  143000, Reward: 890.762 [29.955], Avg: 407.104 (0.0545) <0-01:56:30> 
Step:  144000, Reward: 848.687 [147.049], Avg: 410.149 (0.0534) <0-01:57:19> 
Step:  145000, Reward: 907.254 [19.386], Avg: 413.554 (0.0513) <0-01:58:08> 
Step:  146000, Reward: 895.381 [20.520], Avg: 416.832 (0.0503) <0-01:58:57> 
Step:  147000, Reward: 899.531 [23.406], Avg: 420.093 (0.0493) <0-01:59:46> 
Step:  148000, Reward: 881.677 [11.135], Avg: 423.191 (0.0483) <0-02:00:35> 
Step:  149000, Reward: 882.316 [41.693], Avg: 426.252 (0.0473) <0-02:01:24> 
Step:  150000, Reward: 884.71 [40.110], Avg: 429.288 (0.0464) <0-02:02:13> 
Step:  151000, Reward: 872.768 [61.018], Avg: 432.206 (0.0455) <0-02:03:02> 
Step:  152000, Reward: 864.928 [66.748], Avg: 435.034 (0.0445) <0-02:03:51> 
Step:  153000, Reward: 878.938 [23.346], Avg: 437.916 (0.0437) <0-02:04:40> 
Step:  154000, Reward: 903.81 [19.566], Avg: 440.922 (0.0428) <0-02:05:29> 
Step:  155000, Reward: 903.37 [34.062], Avg: 443.887 (0.0419) <0-02:06:19> 
Step:  156000, Reward: 833.508 [158.383], Avg: 446.368 (0.0411) <0-02:07:08> 
Step:  157000, Reward: 891.222 [21.849], Avg: 449.184 (0.0403) <0-02:07:57> 
Step:  158000, Reward: 718.752 [251.216], Avg: 450.879 (0.0395) <0-02:08:46> 
Step:  159000, Reward: 761.898 [259.063], Avg: 452.823 (0.0387) <0-02:09:35> 
Step:  160000, Reward: 733.095 [289.996], Avg: 454.564 (0.0379) <0-02:10:24> 
Step:  161000, Reward: 536.645 [314.293], Avg: 455.071 (0.0371) <0-02:11:13> 
Step:  162000, Reward: 902.093 [28.327], Avg: 457.813 (0.0364) <0-02:12:02> 
Step:  163000, Reward: 692.878 [260.453], Avg: 459.246 (0.0357) <0-02:12:51> 
Step:  164000, Reward: 900.123 [29.657], Avg: 461.918 (0.0350) <0-02:13:40> 
Step:  165000, Reward: 863.124 [166.671], Avg: 464.335 (0.0343) <0-02:14:29> 
