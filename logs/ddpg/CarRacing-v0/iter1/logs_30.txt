Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: CarRacing-v0/iter1, Date: 25/03/2020 09:52:13
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
GPU 1: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 75217ee4675634f8777811ed51c7de0078811309
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7ffadc121b38>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -44.631 [16.888], Avg: -44.631 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -45.366 [20.441], Avg: -44.998 (0.9800) <0-00:01:11> 
Step:    2000, Reward: -48.864 [25.909], Avg: -46.287 (0.9604) <0-00:02:27> 
Step:    3000, Reward: -35.368 [22.644], Avg: -43.557 (0.9412) <0-00:03:43> 
Step:    4000, Reward: -47.078 [21.304], Avg: -44.261 (0.9224) <0-00:04:59> 
Step:    5000, Reward: -42.322 [19.183], Avg: -43.938 (0.9039) <0-00:06:16> 
Step:    6000, Reward: -50.527 [18.552], Avg: -44.879 (0.8858) <0-00:07:32> 
Step:    7000, Reward: -28.451 [37.389], Avg: -42.826 (0.8681) <0-00:08:50> 
Step:    8000, Reward: -34.97 [31.087], Avg: -41.953 (0.8508) <0-00:10:07> 
Step:    9000, Reward: -37.733 [20.421], Avg: -41.531 (0.8337) <0-00:11:22> 
Step:   10000, Reward: -37.619 [20.282], Avg: -41.175 (0.8171) <0-00:12:40> 
Step:   11000, Reward: -32.631 [19.960], Avg: -40.463 (0.8007) <0-00:13:57> 
Step:   12000, Reward: -33.455 [25.608], Avg: -39.924 (0.7847) <0-00:15:13> 
Step:   13000, Reward: -28.123 [24.333], Avg: -39.081 (0.7690) <0-00:16:29> 
Step:   14000, Reward: -26.507 [24.999], Avg: -38.243 (0.7536) <0-00:17:46> 
Step:   15000, Reward: -21.724 [29.010], Avg: -37.211 (0.7386) <0-00:19:03> 
Step:   16000, Reward: -29.373 [31.685], Avg: -36.75 (0.7238) <0-00:20:19> 
Step:   17000, Reward: -17.108 [37.147], Avg: -35.658 (0.7093) <0-00:21:36> 
Step:   18000, Reward: -25.291 [24.043], Avg: -35.113 (0.6951) <0-00:22:52> 
Step:   19000, Reward: -3.099 [31.313], Avg: -33.512 (0.6812) <0-00:24:09> 
Step:   20000, Reward: -34.237 [48.573], Avg: -33.547 (0.6676) <0-00:25:25> 
Step:   21000, Reward: -7.826 [45.677], Avg: -32.377 (0.6543) <0-00:26:40> 
Step:   22000, Reward: 18.854 [42.454], Avg: -30.15 (0.6412) <0-00:27:56> 
Step:   23000, Reward: -6.053 [39.474], Avg: -29.146 (0.6283) <0-00:29:13> 
Step:   24000, Reward: 13.711 [66.840], Avg: -27.432 (0.6158) <0-00:30:30> 
Step:   25000, Reward: 36.088 [62.394], Avg: -24.989 (0.6035) <0-00:31:46> 
Step:   26000, Reward: 3.359 [73.890], Avg: -23.939 (0.5914) <0-00:33:03> 
Step:   27000, Reward: 37.051 [94.300], Avg: -21.76 (0.5796) <0-00:34:19> 
Step:   28000, Reward: 48.268 [77.758], Avg: -19.346 (0.5680) <0-00:35:35> 
Step:   29000, Reward: 60.679 [96.828], Avg: -16.678 (0.5566) <0-00:36:52> 
Step:   30000, Reward: 51.887 [80.565], Avg: -14.466 (0.5455) <0-00:38:10> 
Step:   31000, Reward: 112.871 [88.437], Avg: -10.487 (0.5346) <0-00:39:26> 
Step:   32000, Reward: 149.615 [77.017], Avg: -5.636 (0.5239) <0-00:40:41> 
Step:   33000, Reward: 143.342 [48.904], Avg: -1.254 (0.5134) <0-00:41:58> 
Step:   34000, Reward: 114.56 [73.758], Avg: 2.055 (0.5031) <0-00:43:14> 
Step:   35000, Reward: 142.024 [78.252], Avg: 5.943 (0.4931) <0-00:44:30> 
Step:   36000, Reward: 136.337 [74.424], Avg: 9.467 (0.4832) <0-00:45:46> 
Step:   37000, Reward: 109.718 [75.423], Avg: 12.105 (0.4735) <0-00:47:03> 
Step:   38000, Reward: 140.841 [97.866], Avg: 15.406 (0.4641) <0-00:48:20> 
Step:   39000, Reward: 100.103 [107.168], Avg: 17.524 (0.4548) <0-00:49:36> 
Step:   40000, Reward: 151.916 [126.118], Avg: 20.802 (0.4457) <0-00:50:53> 
Step:   41000, Reward: 133.484 [140.328], Avg: 23.485 (0.4368) <0-00:52:09> 
Step:   42000, Reward: 71.741 [111.407], Avg: 24.607 (0.4281) <0-00:53:24> 
Step:   43000, Reward: 151.082 [111.658], Avg: 27.481 (0.4195) <0-00:54:40> 
Step:   44000, Reward: 74.85 [72.521], Avg: 28.534 (0.4111) <0-00:55:57> 
Step:   45000, Reward: 152.296 [135.435], Avg: 31.224 (0.4029) <0-00:57:14> 
Step:   46000, Reward: 118.624 [141.559], Avg: 33.084 (0.3948) <0-00:58:30> 
Step:   47000, Reward: 152.486 [119.184], Avg: 35.571 (0.3869) <0-00:59:46> 
Step:   48000, Reward: 248.761 [141.876], Avg: 39.922 (0.3792) <0-01:01:03> 
Step:   49000, Reward: 206.14 [122.189], Avg: 43.247 (0.3716) <0-01:02:19> 
Step:   50000, Reward: 320.021 [77.647], Avg: 48.674 (0.3642) <0-01:03:35> 
Step:   51000, Reward: 249.836 [104.416], Avg: 52.542 (0.3569) <0-01:04:52> 
Step:   52000, Reward: 252.126 [98.191], Avg: 56.308 (0.3497) <0-01:06:09> 
Step:   53000, Reward: 270.555 [138.347], Avg: 60.275 (0.3428) <0-01:07:25> 
Step:   54000, Reward: 267.019 [66.399], Avg: 64.034 (0.3359) <0-01:08:41> 
Step:   55000, Reward: 291.899 [106.193], Avg: 68.103 (0.3292) <0-01:09:57> 
Step:   56000, Reward: 333.808 [158.473], Avg: 72.765 (0.3226) <0-01:11:13> 
Step:   57000, Reward: 372.95 [153.957], Avg: 77.94 (0.3161) <0-01:12:29> 
Step:   58000, Reward: 400.052 [123.924], Avg: 83.4 (0.3098) <0-01:13:46> 
Step:   59000, Reward: 359.931 [132.413], Avg: 88.009 (0.3036) <0-01:15:03> 
Step:   60000, Reward: 364.837 [207.977], Avg: 92.547 (0.2976) <0-01:16:19> 
Step:   61000, Reward: 326.803 [188.116], Avg: 96.325 (0.2916) <0-01:17:35> 
Step:   62000, Reward: 335.629 [181.074], Avg: 100.124 (0.2858) <0-01:18:52> 
Step:   63000, Reward: 320.563 [176.848], Avg: 103.568 (0.2801) <0-01:20:08> 
Step:   64000, Reward: 432.788 [140.039], Avg: 108.633 (0.2745) <0-01:21:25> 
Step:   65000, Reward: 558.469 [229.951], Avg: 115.449 (0.2690) <0-01:22:40> 
Step:   66000, Reward: 604.172 [141.156], Avg: 122.743 (0.2636) <0-01:23:57> 
Step:   67000, Reward: 576.54 [228.010], Avg: 129.417 (0.2583) <0-01:25:13> 
Step:   68000, Reward: 619.98 [188.284], Avg: 136.526 (0.2531) <0-01:26:30> 
Step:   69000, Reward: 647.437 [156.302], Avg: 143.825 (0.2481) <0-01:27:46> 
Step:   70000, Reward: 594.979 [82.306], Avg: 150.179 (0.2431) <0-01:29:02> 
Step:   71000, Reward: 599.275 [69.678], Avg: 156.417 (0.2383) <0-01:30:19> 
Step:   72000, Reward: 615.923 [88.794], Avg: 162.711 (0.2335) <0-01:31:34> 
Step:   73000, Reward: 585.269 [126.857], Avg: 168.422 (0.2288) <0-01:32:51> 
Step:   74000, Reward: 702.005 [80.203], Avg: 175.536 (0.2242) <0-01:34:07> 
Step:   75000, Reward: 657.467 [108.644], Avg: 181.877 (0.2198) <0-01:35:24> 
Step:   76000, Reward: 700.836 [71.771], Avg: 188.617 (0.2154) <0-01:36:40> 
Step:   77000, Reward: 803.551 [122.405], Avg: 196.501 (0.2111) <0-01:37:57> 
Step:   78000, Reward: 402.417 [263.809], Avg: 199.107 (0.2068) <0-01:39:14> 
Step:   79000, Reward: 643.159 [245.341], Avg: 204.658 (0.2027) <0-01:40:30> 
Step:   80000, Reward: 509.166 [246.329], Avg: 208.417 (0.1986) <0-01:41:46> 
Step:   81000, Reward: 664.175 [148.838], Avg: 213.975 (0.1947) <0-01:43:03> 
Step:   82000, Reward: 815.399 [80.500], Avg: 221.221 (0.1908) <0-01:44:20> 
Step:   83000, Reward: 663.944 [260.119], Avg: 226.492 (0.1870) <0-01:45:39> 
Step:   84000, Reward: 736.352 [184.712], Avg: 232.49 (0.1832) <0-01:46:55> 
Step:   85000, Reward: 749.427 [215.130], Avg: 238.501 (0.1796) <0-01:48:14> 
Step:   86000, Reward: 848.332 [110.052], Avg: 245.511 (0.1760) <0-01:49:30> 
Step:   87000, Reward: 859.783 [56.855], Avg: 252.491 (0.1725) <0-01:50:47> 
Step:   88000, Reward: 855.86 [99.533], Avg: 259.27 (0.1690) <0-01:52:02> 
Step:   89000, Reward: 845.788 [60.570], Avg: 265.787 (0.1656) <0-01:53:19> 
Step:   90000, Reward: 792.041 [70.876], Avg: 271.57 (0.1623) <0-01:54:35> 
Step:   91000, Reward: 823.571 [102.483], Avg: 277.57 (0.1591) <0-01:55:52> 
Step:   92000, Reward: 769.703 [125.948], Avg: 282.862 (0.1559) <0-01:57:08> 
Step:   93000, Reward: 787.412 [211.593], Avg: 288.23 (0.1528) <0-01:58:25> 
Step:   94000, Reward: 674.961 [259.422], Avg: 292.3 (0.1497) <0-01:59:42> 
Step:   95000, Reward: 453.56 [182.791], Avg: 293.98 (0.1467) <0-02:00:59> 
Step:   96000, Reward: 569.936 [220.110], Avg: 296.825 (0.1438) <0-02:02:16> 
Step:   97000, Reward: 490.897 [243.334], Avg: 298.805 (0.1409) <0-02:03:33> 
Step:   98000, Reward: 504.333 [233.372], Avg: 300.881 (0.1381) <0-02:04:49> 
Step:   99000, Reward: 571.738 [216.859], Avg: 303.59 (0.1353) <0-02:06:06> 
Step:  100000, Reward: 552.157 [205.118], Avg: 306.051 (0.1326) <0-02:07:23> 
Step:  101000, Reward: 611.483 [266.768], Avg: 309.046 (0.1300) <0-02:08:39> 
Step:  102000, Reward: 570.778 [270.071], Avg: 311.587 (0.1274) <0-02:09:57> 
Step:  103000, Reward: 750.485 [173.240], Avg: 315.807 (0.1248) <0-02:11:15> 
Step:  104000, Reward: 862.303 [73.920], Avg: 321.012 (0.1223) <0-02:12:32> 
Step:  105000, Reward: 692.811 [197.127], Avg: 324.519 (0.1199) <0-02:13:49> 
Step:  106000, Reward: 723.639 [257.963], Avg: 328.249 (0.1175) <0-02:15:06> 
Step:  107000, Reward: 647.411 [246.844], Avg: 331.204 (0.1151) <0-02:16:22> 
Step:  108000, Reward: 577.898 [249.641], Avg: 333.468 (0.1128) <0-02:17:40> 
Step:  109000, Reward: 540.189 [251.035], Avg: 335.347 (0.1106) <0-02:18:57> 
Step:  110000, Reward: 542.648 [233.424], Avg: 337.214 (0.1084) <0-02:20:14> 
Step:  111000, Reward: 611.318 [314.363], Avg: 339.662 (0.1062) <0-02:21:31> 
Step:  112000, Reward: 682.916 [172.364], Avg: 342.699 (0.1041) <0-02:22:48> 
Step:  113000, Reward: 728.859 [264.342], Avg: 346.087 (0.1020) <0-02:24:05> 
Step:  114000, Reward: 727.357 [185.754], Avg: 349.402 (0.0999) <0-02:25:26> 
Step:  115000, Reward: 751.79 [209.624], Avg: 352.871 (0.0979) <0-02:26:43> 
Step:  116000, Reward: 655.248 [237.074], Avg: 355.456 (0.0960) <0-02:28:00> 
Step:  117000, Reward: 570.417 [213.440], Avg: 357.277 (0.0941) <0-02:29:18> 
Step:  118000, Reward: 741.999 [205.792], Avg: 360.51 (0.0922) <0-02:30:36> 
Step:  119000, Reward: 817.255 [67.638], Avg: 364.316 (0.0903) <0-02:31:54> 
Step:  120000, Reward: 829.405 [40.822], Avg: 368.16 (0.0885) <0-02:33:12> 
Step:  121000, Reward: 719.652 [230.455], Avg: 371.041 (0.0868) <0-02:34:29> 
Step:  122000, Reward: 847.056 [66.326], Avg: 374.911 (0.0850) <0-02:35:47> 
Step:  123000, Reward: 819.773 [80.022], Avg: 378.499 (0.0833) <0-02:37:04> 
Step:  124000, Reward: 841.272 [71.151], Avg: 382.201 (0.0817) <0-02:38:21> 
Step:  125000, Reward: 757.694 [195.930], Avg: 385.181 (0.0800) <0-02:39:38> 
Step:  126000, Reward: 819.264 [75.400], Avg: 388.599 (0.0784) <0-02:40:55> 
Step:  127000, Reward: 848.195 [62.172], Avg: 392.19 (0.0769) <0-02:42:12> 
Step:  128000, Reward: 819.211 [142.999], Avg: 395.5 (0.0753) <0-02:43:29> 
Step:  129000, Reward: 741.089 [149.829], Avg: 398.158 (0.0738) <0-02:44:46> 
Step:  130000, Reward: 700.996 [174.624], Avg: 400.47 (0.0723) <0-02:46:02> 
Step:  131000, Reward: 784.538 [148.457], Avg: 403.38 (0.0709) <0-02:47:20> 
Step:  132000, Reward: 805.4 [98.218], Avg: 406.402 (0.0695) <0-02:48:37> 
Step:  133000, Reward: 858.932 [45.894], Avg: 409.779 (0.0681) <0-02:49:54> 
Step:  134000, Reward: 722.468 [173.725], Avg: 412.096 (0.0667) <0-02:51:11> 
Step:  135000, Reward: 824.751 [25.579], Avg: 415.13 (0.0654) <0-02:52:28> 
Step:  136000, Reward: 776.932 [210.945], Avg: 417.771 (0.0641) <0-02:53:45> 
Step:  137000, Reward: 822.711 [65.731], Avg: 420.705 (0.0628) <0-02:55:04> 
Step:  138000, Reward: 842.004 [110.149], Avg: 423.736 (0.0615) <0-02:56:20> 
Step:  139000, Reward: 772.858 [134.644], Avg: 426.23 (0.0603) <0-02:57:39> 
Step:  140000, Reward: 881.007 [33.146], Avg: 429.455 (0.0591) <0-02:58:55> 
Step:  141000, Reward: 856.398 [54.634], Avg: 432.462 (0.0579) <0-03:00:13> 
Step:  142000, Reward: 813.353 [152.087], Avg: 435.125 (0.0568) <0-03:01:30> 
Step:  143000, Reward: 787.837 [59.035], Avg: 437.575 (0.0556) <0-03:02:47> 
Step:  144000, Reward: 765.55 [271.768], Avg: 439.837 (0.0545) <0-03:04:04> 
Step:  145000, Reward: 862.245 [66.233], Avg: 442.73 (0.0534) <0-03:05:21> 
Step:  146000, Reward: 751.969 [206.878], Avg: 444.834 (0.0524) <0-03:06:39> 
Step:  147000, Reward: 868.12 [103.103], Avg: 447.694 (0.0513) <0-03:07:56> 
Step:  148000, Reward: 877.584 [39.731], Avg: 450.579 (0.0503) <0-03:09:14> 
Step:  149000, Reward: 866.97 [133.271], Avg: 453.355 (0.0493) <0-03:10:31> 
Step:  150000, Reward: 887.532 [31.571], Avg: 456.23 (0.0483) <0-03:11:48> 
Step:  151000, Reward: 847.717 [83.420], Avg: 458.806 (0.0473) <0-03:13:05> 
Step:  152000, Reward: 886.527 [29.114], Avg: 461.601 (0.0464) <0-03:14:23> 
Step:  153000, Reward: 886.158 [21.612], Avg: 464.358 (0.0455) <0-03:15:40> 
Step:  154000, Reward: 870.177 [22.922], Avg: 466.976 (0.0445) <0-03:16:57> 
Step:  155000, Reward: 886.281 [26.259], Avg: 469.664 (0.0437) <0-03:18:14> 
Step:  156000, Reward: 893.972 [24.004], Avg: 472.367 (0.0428) <0-03:19:31> 
Step:  157000, Reward: 802.999 [125.962], Avg: 474.459 (0.0419) <0-03:20:48> 
Step:  158000, Reward: 887.642 [26.919], Avg: 477.058 (0.0411) <0-03:22:05> 
Step:  159000, Reward: 591.953 [257.523], Avg: 477.776 (0.0403) <0-03:23:22> 
Step:  160000, Reward: 880.623 [36.232], Avg: 480.278 (0.0395) <0-03:24:39> 
Step:  161000, Reward: 836.962 [146.136], Avg: 482.48 (0.0387) <0-03:25:56> 
Step:  162000, Reward: 834.231 [128.890], Avg: 484.638 (0.0379) <0-03:27:14> 
Step:  163000, Reward: 870.514 [26.000], Avg: 486.991 (0.0371) <0-03:28:31> 
Step:  164000, Reward: 851.622 [44.220], Avg: 489.201 (0.0364) <0-03:29:48> 
Step:  165000, Reward: 870.089 [15.247], Avg: 491.495 (0.0357) <0-03:31:05> 
Step:  166000, Reward: 861.563 [16.469], Avg: 493.711 (0.0350) <0-03:32:22> 
