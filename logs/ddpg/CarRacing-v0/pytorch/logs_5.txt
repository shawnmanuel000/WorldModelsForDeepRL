Model: <class 'models.singleagent.ddpg.DDPGAgent'>, Env: CarRacing-v0/pytorch, Date: 25/03/2020 09:52:41
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
GPU 1: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 75217ee4675634f8777811ed51c7de0078811309
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.ImgStack object at 0x7fde20080be0>,

import torch
import random
import numpy as np
from utils.rand import RandomAgent, PrioritizedReplayBuffer, ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, NUM_STEPS, EPS_DECAY, EPS_MIN, gsoftmax, one_hot

class DDPGActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, sample=True):
		state = self.layer1(state).relu() 
		state = self.layer2(state).relu() 
		state = self.layer3(state).relu() 
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).exp()
		epsilon = torch.randn_like(action_sig)
		action = action_mu + epsilon.mul(action_sig) if sample else action_mu
		return action.tanh() if not self.discrete else gsoftmax(action)
	
class DDPGCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class DDPGNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=DDPGActor, critic=DDPGCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="ddpg"): 
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)

	def get_action(self, state, use_target=False, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			actor = self.actor_local if not use_target else self.actor_target
			return actor(state, sample).cpu().numpy() if numpy else actor(state, sample)

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			q_value = q_value.gather(-1, action.argmax(-1, keepdim=True)) if self.discrete and not probs else q_value
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, q_targets, importances=1.0):
		actions = one_hot(actions) if self.actor_local.discrete else actions
		q_values = self.get_q_value(states, actions, grad=True, probs=False)
		critic_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic_loss.mean())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True, probs=True)
		q_actions = (actor_action*q_actions).sum(-1) if self.discrete else q_actions
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = -(q_actions - q_baseline.detach())
		self.step(self.actor_optimizer, actor_loss.mean())
		self.soft_copy(self.actor_local, self.actor_target)
		
class DDPGAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, DDPGNetwork, decay=decay, lr=lr, tau=tau, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		eps = self.eps if eps is None else eps
		action_random = super().get_action(state, eps)
		if self.discrete and random.random() < eps: return action_random
		action_greedy = self.network.get_action(self.to_tensor(state), numpy=True, sample=sample)
		action = np.clip((1-eps)*action_greedy + eps*action_random, -1, 1)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			actions = torch.cat([actions, self.network.get_action(states[-1], use_target=True).unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets)]
			self.replay_buffer.extend(list(zip(states, actions, targets)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets)
			if np.any(done[0]): self.eps = max(self.eps * self.decay, EPS_MIN)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -35.78 [22.116], Avg: -35.78 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -45.973 [18.509], Avg: -40.876 (0.9800) <0-00:01:13> 
Step:    2000, Reward: -39.412 [20.111], Avg: -40.388 (0.9604) <0-00:02:36> 
Step:    3000, Reward: -42.89 [17.590], Avg: -41.014 (0.9412) <0-00:03:59> 
Step:    4000, Reward: -50.44 [18.692], Avg: -42.899 (0.9224) <0-00:05:23> 
Step:    5000, Reward: -43.902 [22.614], Avg: -43.066 (0.9039) <0-00:06:46> 
Step:    6000, Reward: -35.642 [16.075], Avg: -42.006 (0.8858) <0-00:08:09> 
Step:    7000, Reward: -30.364 [28.425], Avg: -40.55 (0.8681) <0-00:09:32> 
Step:    8000, Reward: -40.286 [17.126], Avg: -40.521 (0.8508) <0-00:10:56> 
Step:    9000, Reward: -36.383 [29.386], Avg: -40.107 (0.8337) <0-00:12:20> 
Step:   10000, Reward: -42.81 [20.770], Avg: -40.353 (0.8171) <0-00:13:43> 
Step:   11000, Reward: -53.84 [16.935], Avg: -41.477 (0.8007) <0-00:15:07> 
Step:   12000, Reward: -48.872 [19.299], Avg: -42.046 (0.7847) <0-00:16:30> 
Step:   13000, Reward: -32.075 [27.035], Avg: -41.334 (0.7690) <0-00:17:53> 
Step:   14000, Reward: -37.151 [23.570], Avg: -41.055 (0.7536) <0-00:19:16> 
Step:   15000, Reward: -21.114 [32.185], Avg: -39.808 (0.7386) <0-00:20:40> 
Step:   16000, Reward: -35.674 [19.701], Avg: -39.565 (0.7238) <0-00:22:04> 
Step:   17000, Reward: -64.868 [36.987], Avg: -40.971 (0.7093) <0-00:23:28> 
Step:   18000, Reward: -77.524 [50.921], Avg: -42.895 (0.6951) <0-00:24:52> 
Step:   19000, Reward: -26.044 [40.888], Avg: -42.052 (0.6812) <0-00:26:17> 
Step:   20000, Reward: -22.037 [29.427], Avg: -41.099 (0.6676) <0-00:27:40> 
Step:   21000, Reward: -25.17 [46.765], Avg: -40.375 (0.6543) <0-00:29:04> 
Step:   22000, Reward: -7.371 [24.424], Avg: -38.94 (0.6412) <0-00:30:28> 
Step:   23000, Reward: -12.204 [41.028], Avg: -37.826 (0.6283) <0-00:31:53> 
Step:   24000, Reward: -4.313 [67.031], Avg: -36.486 (0.6158) <0-00:33:17> 
Step:   25000, Reward: 7.422 [45.081], Avg: -34.797 (0.6035) <0-00:34:41> 
Step:   26000, Reward: 20.811 [51.985], Avg: -32.737 (0.5914) <0-00:36:05> 
Step:   27000, Reward: 20.487 [55.505], Avg: -30.836 (0.5796) <0-00:37:29> 
Step:   28000, Reward: 31.446 [39.340], Avg: -28.689 (0.5680) <0-00:38:53> 
Step:   29000, Reward: 30.834 [66.559], Avg: -26.705 (0.5566) <0-00:40:18> 
Step:   30000, Reward: 29.325 [59.729], Avg: -24.897 (0.5455) <0-00:41:42> 
Step:   31000, Reward: 59.654 [74.374], Avg: -22.255 (0.5346) <0-00:43:06> 
Step:   32000, Reward: 115.91 [51.777], Avg: -18.068 (0.5239) <0-00:44:31> 
Step:   33000, Reward: 112.703 [62.614], Avg: -14.222 (0.5134) <0-00:45:56> 
Step:   34000, Reward: 82.706 [73.033], Avg: -11.453 (0.5031) <0-00:47:19> 
Step:   35000, Reward: 24.394 [48.194], Avg: -10.457 (0.4931) <0-00:48:43> 
Step:   36000, Reward: 36.395 [88.679], Avg: -9.191 (0.4832) <0-00:50:07> 
Step:   37000, Reward: 32.764 [73.195], Avg: -8.087 (0.4735) <0-00:51:31> 
Step:   38000, Reward: 72.247 [90.766], Avg: -6.027 (0.4641) <0-00:52:56> 
Step:   39000, Reward: 13.307 [87.811], Avg: -5.543 (0.4548) <0-00:54:20> 
Step:   40000, Reward: 55.599 [112.703], Avg: -4.052 (0.4457) <0-00:55:44> 
Step:   41000, Reward: 14.321 [70.122], Avg: -3.615 (0.4368) <0-00:57:08> 
Step:   42000, Reward: -10.472 [62.534], Avg: -3.774 (0.4281) <0-00:58:33> 
Step:   43000, Reward: 89.472 [102.971], Avg: -1.655 (0.4195) <0-00:59:58> 
Step:   44000, Reward: 129.647 [68.154], Avg: 1.263 (0.4111) <0-01:01:22> 
Step:   45000, Reward: 163.236 [85.060], Avg: 4.784 (0.4029) <0-01:02:46> 
Step:   46000, Reward: 167.102 [84.867], Avg: 8.238 (0.3948) <0-01:04:10> 
Step:   47000, Reward: 132.994 [90.684], Avg: 10.837 (0.3869) <0-01:05:35> 
Step:   48000, Reward: 156.857 [109.803], Avg: 13.817 (0.3792) <0-01:06:59> 
Step:   49000, Reward: 172.431 [142.357], Avg: 16.989 (0.3716) <0-01:08:23> 
Step:   50000, Reward: 215.707 [114.182], Avg: 20.885 (0.3642) <0-01:09:48> 
Step:   51000, Reward: 204.112 [172.763], Avg: 24.409 (0.3569) <0-01:11:11> 
Step:   52000, Reward: 239.513 [178.354], Avg: 28.468 (0.3497) <0-01:12:35> 
Step:   53000, Reward: 129.573 [155.068], Avg: 30.34 (0.3428) <0-01:13:58> 
Step:   54000, Reward: 113.155 [111.826], Avg: 31.846 (0.3359) <0-01:15:23> 
Step:   55000, Reward: 141.006 [161.167], Avg: 33.795 (0.3292) <0-01:16:46> 
Step:   56000, Reward: 155.38 [126.205], Avg: 35.928 (0.3226) <0-01:18:11> 
Step:   57000, Reward: 281.206 [181.790], Avg: 40.157 (0.3161) <0-01:19:34> 
Step:   58000, Reward: 163.442 [154.237], Avg: 42.247 (0.3098) <0-01:20:58> 
Step:   59000, Reward: 246.528 [196.057], Avg: 45.651 (0.3036) <0-01:22:22> 
Step:   60000, Reward: 313.813 [142.101], Avg: 50.047 (0.2976) <0-01:23:46> 
Step:   61000, Reward: 375.614 [95.573], Avg: 55.298 (0.2916) <0-01:25:10> 
Step:   62000, Reward: 307.964 [116.265], Avg: 59.309 (0.2858) <0-01:26:33> 
Step:   63000, Reward: 340.966 [74.781], Avg: 63.71 (0.2801) <0-01:27:57> 
Step:   64000, Reward: 434.058 [79.527], Avg: 69.408 (0.2745) <0-01:29:22> 
Step:   65000, Reward: 388.075 [82.532], Avg: 74.236 (0.2690) <0-01:30:46> 
Step:   66000, Reward: 445.519 [66.320], Avg: 79.777 (0.2636) <0-01:32:10> 
Step:   67000, Reward: 493.771 [90.714], Avg: 85.866 (0.2583) <0-01:33:34> 
Step:   68000, Reward: 554.376 [75.181], Avg: 92.656 (0.2531) <0-01:34:58> 
Step:   69000, Reward: 596.686 [72.329], Avg: 99.856 (0.2481) <0-01:36:22> 
Step:   70000, Reward: 482.033 [201.361], Avg: 105.239 (0.2431) <0-01:37:45> 
Step:   71000, Reward: 209.491 [214.126], Avg: 106.687 (0.2383) <0-01:39:08> 
Step:   72000, Reward: 442.905 [267.468], Avg: 111.292 (0.2335) <0-01:40:31> 
Step:   73000, Reward: 622.007 [276.574], Avg: 118.194 (0.2288) <0-01:41:55> 
Step:   74000, Reward: 832.13 [106.791], Avg: 127.713 (0.2242) <0-01:43:17> 
Step:   75000, Reward: 786.492 [149.137], Avg: 136.381 (0.2198) <0-01:44:41> 
Step:   76000, Reward: 722.304 [94.391], Avg: 143.991 (0.2154) <0-01:46:04> 
Step:   77000, Reward: 704.348 [103.995], Avg: 151.175 (0.2111) <0-01:47:27> 
Step:   78000, Reward: 701.186 [156.271], Avg: 158.137 (0.2068) <0-01:48:51> 
Step:   79000, Reward: 747.507 [80.762], Avg: 165.504 (0.2027) <0-01:50:15> 
Step:   80000, Reward: 736.614 [103.933], Avg: 172.555 (0.1986) <0-01:51:39> 
Step:   81000, Reward: 687.274 [98.687], Avg: 178.832 (0.1947) <0-01:53:04> 
Step:   82000, Reward: 693.769 [87.457], Avg: 185.036 (0.1908) <0-01:54:28> 
Step:   83000, Reward: 571.191 [149.785], Avg: 189.633 (0.1870) <0-01:55:52> 
Step:   84000, Reward: 757.747 [82.729], Avg: 196.317 (0.1832) <0-01:57:15> 
Step:   85000, Reward: 773.209 [116.076], Avg: 203.025 (0.1796) <0-01:58:39> 
Step:   86000, Reward: 772.347 [93.955], Avg: 209.569 (0.1760) <0-02:00:04> 
Step:   87000, Reward: 825.477 [70.092], Avg: 216.568 (0.1725) <0-02:01:27> 
Step:   88000, Reward: 823.191 [83.462], Avg: 223.384 (0.1690) <0-02:02:50> 
Step:   89000, Reward: 789.171 [140.350], Avg: 229.67 (0.1656) <0-02:04:14> 
Step:   90000, Reward: 801.504 [91.473], Avg: 235.954 (0.1623) <0-02:05:38> 
Step:   91000, Reward: 750.736 [161.881], Avg: 241.549 (0.1591) <0-02:07:02> 
Step:   92000, Reward: 757.774 [150.333], Avg: 247.1 (0.1559) <0-02:08:26> 
Step:   93000, Reward: 783.664 [225.554], Avg: 252.808 (0.1528) <0-02:09:49> 
Step:   94000, Reward: 689.587 [195.362], Avg: 257.406 (0.1497) <0-02:11:15> 
Step:   95000, Reward: 634.71 [249.217], Avg: 261.336 (0.1467) <0-02:12:39> 
Step:   96000, Reward: 522.928 [164.178], Avg: 264.033 (0.1438) <0-02:14:03> 
Step:   97000, Reward: 619.59 [211.276], Avg: 267.661 (0.1409) <0-02:15:27> 
Step:   98000, Reward: 633.072 [180.293], Avg: 271.352 (0.1381) <0-02:16:51> 
Step:   99000, Reward: 520.782 [205.617], Avg: 273.847 (0.1353) <0-02:18:16> 
Step:  100000, Reward: 402.723 [157.466], Avg: 275.123 (0.1326) <0-02:19:39> 
Step:  101000, Reward: 404.683 [194.692], Avg: 276.393 (0.1300) <0-02:21:04> 
Step:  102000, Reward: 392.443 [169.798], Avg: 277.519 (0.1274) <0-02:22:27> 
Step:  103000, Reward: 686.221 [218.853], Avg: 281.449 (0.1248) <0-02:23:50> 
Step:  104000, Reward: 632.35 [179.559], Avg: 284.791 (0.1223) <0-02:25:14> 
Step:  105000, Reward: 782.428 [114.870], Avg: 289.486 (0.1199) <0-02:26:37> 
Step:  106000, Reward: 717.756 [232.822], Avg: 293.488 (0.1175) <0-02:28:00> 
Step:  107000, Reward: 832.074 [130.444], Avg: 298.475 (0.1151) <0-02:29:24> 
Step:  108000, Reward: 851.783 [78.891], Avg: 303.552 (0.1128) <0-02:30:48> 
Step:  109000, Reward: 847.888 [59.048], Avg: 308.5 (0.1106) <0-02:32:12> 
Step:  110000, Reward: 862.844 [25.287], Avg: 313.494 (0.1084) <0-02:33:36> 
Step:  111000, Reward: 848.079 [69.705], Avg: 318.267 (0.1062) <0-02:35:00> 
Step:  112000, Reward: 827.628 [79.958], Avg: 322.775 (0.1041) <0-02:36:23> 
Step:  113000, Reward: 880.748 [23.726], Avg: 327.669 (0.1020) <0-02:37:47> 
Step:  114000, Reward: 841.949 [101.790], Avg: 332.141 (0.0999) <0-02:39:11> 
Step:  115000, Reward: 863.272 [20.676], Avg: 336.72 (0.0979) <0-02:40:35> 
Step:  116000, Reward: 876.921 [19.691], Avg: 341.337 (0.0960) <0-02:41:58> 
Step:  117000, Reward: 867.247 [30.378], Avg: 345.794 (0.0941) <0-02:43:22> 
Step:  118000, Reward: 883.196 [24.135], Avg: 350.31 (0.0922) <0-02:44:46> 
Step:  119000, Reward: 897.669 [25.455], Avg: 354.871 (0.0903) <0-02:46:10> 
Step:  120000, Reward: 881.737 [19.675], Avg: 359.226 (0.0885) <0-02:47:33> 
Step:  121000, Reward: 869.219 [37.067], Avg: 363.406 (0.0868) <0-02:48:57> 
Step:  122000, Reward: 878.609 [27.704], Avg: 367.595 (0.0850) <0-02:50:22> 
Step:  123000, Reward: 886.124 [22.700], Avg: 371.776 (0.0833) <0-02:51:45> 
Step:  124000, Reward: 873.529 [17.804], Avg: 375.79 (0.0817) <0-02:53:09> 
Step:  125000, Reward: 890.907 [20.351], Avg: 379.878 (0.0800) <0-02:54:32> 
Step:  126000, Reward: 855.761 [27.230], Avg: 383.626 (0.0784) <0-02:55:55> 
Step:  127000, Reward: 878.237 [28.096], Avg: 387.49 (0.0769) <0-02:57:18> 
Step:  128000, Reward: 886.061 [15.775], Avg: 391.355 (0.0753) <0-02:58:41> 
Step:  129000, Reward: 855.023 [77.859], Avg: 394.921 (0.0738) <0-03:00:05> 
Step:  130000, Reward: 791.316 [166.538], Avg: 397.947 (0.0723) <0-03:01:28> 
Step:  131000, Reward: 867.46 [40.677], Avg: 401.504 (0.0709) <0-03:02:51> 
Step:  132000, Reward: 778.782 [106.226], Avg: 404.341 (0.0695) <0-03:04:15> 
Step:  133000, Reward: 803.506 [64.046], Avg: 407.32 (0.0681) <0-03:05:38> 
Step:  134000, Reward: 844.337 [19.062], Avg: 410.557 (0.0667) <0-03:07:01> 
Step:  135000, Reward: 861.214 [27.490], Avg: 413.87 (0.0654) <0-03:08:24> 
Step:  136000, Reward: 863.87 [23.710], Avg: 417.155 (0.0641) <0-03:09:48> 
Step:  137000, Reward: 898.37 [23.674], Avg: 420.642 (0.0628) <0-03:11:11> 
Step:  138000, Reward: 853.194 [18.251], Avg: 423.754 (0.0615) <0-03:12:35> 
Step:  139000, Reward: 894.403 [24.241], Avg: 427.116 (0.0603) <0-03:13:59> 
Step:  140000, Reward: 875.667 [15.075], Avg: 430.297 (0.0591) <0-03:15:22> 
Step:  141000, Reward: 857.781 [34.434], Avg: 433.308 (0.0579) <0-03:16:47> 
Step:  142000, Reward: 828.91 [85.648], Avg: 436.074 (0.0568) <0-03:18:10> 
Step:  143000, Reward: 833.025 [110.819], Avg: 438.831 (0.0556) <0-03:19:34> 
Step:  144000, Reward: 819.785 [57.381], Avg: 441.458 (0.0545) <0-03:20:57> 
Step:  145000, Reward: 856.944 [18.609], Avg: 444.304 (0.0534) <0-03:22:21> 
Step:  146000, Reward: 808.461 [120.227], Avg: 446.781 (0.0524) <0-03:23:44> 
Step:  147000, Reward: 882.213 [15.029], Avg: 449.723 (0.0513) <0-03:25:07> 
Step:  148000, Reward: 886.331 [17.176], Avg: 452.653 (0.0503) <0-03:26:30> 
Step:  149000, Reward: 876.934 [17.695], Avg: 455.482 (0.0493) <0-03:27:55> 
Step:  150000, Reward: 899.593 [26.604], Avg: 458.423 (0.0483) <0-03:29:18> 
Step:  151000, Reward: 886.884 [24.481], Avg: 461.242 (0.0473) <0-03:30:42> 
Step:  152000, Reward: 873.339 [95.155], Avg: 463.935 (0.0464) <0-03:32:06> 
