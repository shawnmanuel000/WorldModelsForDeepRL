Model: <class 'models.singleagent.sac.SACAgent'>, Env: CarRacing-v0/iter1/, Date: 22/03/2020 11:45:26
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 4847a635cb8a41d9a8d03639eabcac5f1e90c0c5
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f1310040f28>,

import torch
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE, gsoftmax

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-5,0).exp()
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		action = gsoftmax(action, hard=False) if self.discrete else action
		log_prob = torch.log(action+1e-6) if self.discrete else dist.log_prob(action)
		log_prob -= torch.log(1-action.tanh().pow(2)+1e-6)
		return action.tanh(), log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"):
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, SACCritic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, next_states, rewards, dones, gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-5, 0).detach().exp()
		next_actions, next_log_prob = self.actor_local(next_states)
		q_nexts = self.get_q_value(next_states, next_actions, use_target=True) - alpha*next_log_prob
		q_nexts = (next_actions*q_nexts).mean(-1, keepdim=True) if self.discrete else q_nexts
		q_targets = rewards.unsqueeze(-1) + gamma * q_nexts * (1 - dones.unsqueeze(-1))

		q_values = self.get_q_value(states, actions, grad=True)
		q_values = q_values.gather(-1, actions.argmax(-1, keepdim=True)) if self.discrete else q_values
		critic1_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True)
		actor_loss = alpha*log_prob - (q_actions - q_values.detach())
		actor_loss = actor_action*actor_loss if self.discrete else actor_loss
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters())
		
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)[0]
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.replay_buffer.extend(list(zip(state, action, next_state, reward, done)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, next_states, rewards, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, next_states, rewards, dones)


Step:       0, Reward: -24.043 [12.858], Avg: -24.043 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -24.018 [12.631], Avg: -24.03 (1.0000) <0-00:00:49> 
Step:    2000, Reward: -15.494 [17.600], Avg: -21.185 (1.0000) <0-00:01:38> 
Step:    3000, Reward: -25.252 [12.050], Avg: -22.202 (1.0000) <0-00:02:26> 
Step:    4000, Reward: -16.84 [18.218], Avg: -21.129 (1.0000) <0-00:03:16> 
Step:    5000, Reward: -21.724 [18.052], Avg: -21.228 (1.0000) <0-00:04:05> 
Step:    6000, Reward: -29.77 [10.098], Avg: -22.449 (1.0000) <0-00:04:55> 
Step:    7000, Reward: -17.326 [16.678], Avg: -21.808 (1.0000) <0-00:05:44> 
Step:    8000, Reward: -17.631 [18.498], Avg: -21.344 (1.0000) <0-00:06:33> 
Step:    9000, Reward: -14.194 [17.581], Avg: -20.629 (1.0000) <0-00:07:22> 
Step:   10000, Reward: -26.833 [10.148], Avg: -21.193 (1.0000) <0-00:08:12> 
Step:   11000, Reward: -26.544 [10.901], Avg: -21.639 (1.0000) <0-00:09:01> 
Step:   12000, Reward: -22.279 [16.167], Avg: -21.688 (1.0000) <0-00:09:49> 
Step:   13000, Reward: -21.211 [17.601], Avg: -21.654 (1.0000) <0-00:10:36> 
Step:   14000, Reward: -18.275 [18.243], Avg: -21.429 (1.0000) <0-00:11:23> 
Step:   15000, Reward: -25.342 [9.056], Avg: -21.673 (1.0000) <0-00:12:09> 
Step:   16000, Reward: -18.625 [16.395], Avg: -21.494 (1.0000) <0-00:12:57> 
Step:   17000, Reward: -24.276 [12.540], Avg: -21.649 (1.0000) <0-00:13:47> 
Step:   18000, Reward: -20.871 [16.261], Avg: -21.608 (1.0000) <0-00:14:38> 
Step:   19000, Reward: -24.743 [14.781], Avg: -21.765 (1.0000) <0-00:15:30> 
Step:   20000, Reward: -20.832 [14.538], Avg: -21.72 (1.0000) <0-00:16:20> 
Step:   21000, Reward: -26.405 [11.420], Avg: -21.933 (1.0000) <0-00:17:10> 
Step:   22000, Reward: -22.555 [11.878], Avg: -21.96 (1.0000) <0-00:18:00> 
Step:   23000, Reward: -27.266 [12.489], Avg: -22.181 (1.0000) <0-00:18:51> 
Step:   24000, Reward: -25.465 [8.511], Avg: -22.313 (1.0000) <0-00:19:41> 
Step:   25000, Reward: -18.042 [18.187], Avg: -22.148 (1.0000) <0-00:20:32> 
Step:   26000, Reward: -22.068 [15.788], Avg: -22.145 (1.0000) <0-00:21:23> 
Step:   27000, Reward: -16.895 [16.587], Avg: -21.958 (1.0000) <0-00:22:12> 
Step:   28000, Reward: -21.249 [26.683], Avg: -21.933 (1.0000) <0-00:23:02> 
Step:   29000, Reward: -143.534 [8.321], Avg: -25.987 (1.0000) <0-00:23:52> 
Step:   30000, Reward: -24.714 [23.386], Avg: -25.946 (1.0000) <0-00:24:41> 
Step:   31000, Reward: -43.107 [21.518], Avg: -26.482 (1.0000) <0-00:25:32> 
Step:   32000, Reward: -35.377 [58.385], Avg: -26.752 (1.0000) <0-00:26:22> 
Step:   33000, Reward: -143.978 [4.661], Avg: -30.199 (1.0000) <0-00:27:07> 
Step:   34000, Reward: -137.31 [28.712], Avg: -33.26 (1.0000) <0-00:27:58> 
Step:   35000, Reward: -132.817 [9.436], Avg: -36.025 (1.0000) <0-00:28:44> 
Step:   36000, Reward: -42.362 [27.103], Avg: -36.196 (1.0000) <0-00:29:33> 
Step:   37000, Reward: -115.34 [8.126], Avg: -38.279 (1.0000) <0-00:30:16> 
Step:   38000, Reward: -108.066 [4.441], Avg: -40.069 (1.0000) <0-00:30:55> 
Step:   39000, Reward: -66.059 [20.313], Avg: -40.718 (1.0000) <0-00:31:44> 
Step:   40000, Reward: -58.957 [3.322], Avg: -41.163 (1.0000) <0-00:32:35> 
Step:   41000, Reward: -81.537 [5.134], Avg: -42.124 (1.0000) <0-00:33:24> 
Step:   42000, Reward: -78.948 [2.093], Avg: -42.981 (1.0000) <0-00:34:14> 
Step:   43000, Reward: -82.5 [1.413], Avg: -43.879 (1.0000) <0-00:35:04> 
Step:   44000, Reward: -82.817 [1.109], Avg: -44.744 (1.0000) <0-00:35:54> 
Step:   45000, Reward: -83.785 [2.070], Avg: -45.593 (1.0000) <0-00:36:44> 
Step:   46000, Reward: -58.199 [20.607], Avg: -45.861 (1.0000) <0-00:37:34> 
Step:   47000, Reward: -83.457 [2.068], Avg: -46.644 (1.0000) <0-00:38:24> 
Step:   48000, Reward: -83.021 [1.495], Avg: -47.387 (1.0000) <0-00:39:14> 
Step:   49000, Reward: -84.041 [1.571], Avg: -48.12 (1.0000) <0-00:40:04> 
Step:   50000, Reward: -82.936 [1.530], Avg: -48.803 (1.0000) <0-00:40:54> 
Step:   51000, Reward: -61.685 [3.116], Avg: -49.05 (1.0000) <0-00:41:43> 
Step:   52000, Reward: -62.51 [4.624], Avg: -49.304 (1.0000) <0-00:42:33> 
Step:   53000, Reward: -82.598 [1.590], Avg: -49.921 (1.0000) <0-00:43:23> 
Step:   54000, Reward: -78.625 [1.648], Avg: -50.443 (1.0000) <0-00:44:14> 
Step:   55000, Reward: -63.399 [9.394], Avg: -50.674 (1.0000) <0-00:45:04> 
Step:   56000, Reward: -54.597 [12.640], Avg: -50.743 (1.0000) <0-00:45:54> 
Step:   57000, Reward: -109.517 [44.417], Avg: -51.756 (1.0000) <0-00:46:43> 
Step:   58000, Reward: -133.121 [48.046], Avg: -53.135 (1.0000) <0-00:47:33> 
Step:   59000, Reward: -74.236 [2.928], Avg: -53.487 (1.0000) <0-00:48:22> 
Step:   60000, Reward: -75.479 [7.719], Avg: -53.847 (1.0000) <0-00:49:12> 
Step:   61000, Reward: -11.455 [33.429], Avg: -53.164 (1.0000) <0-00:50:00> 
Step:   62000, Reward: -47.947 [8.135], Avg: -53.081 (1.0000) <0-00:50:50> 
Step:   63000, Reward: -82.765 [2.149], Avg: -53.545 (1.0000) <0-00:51:40> 
Step:   64000, Reward: 118.36 [53.488], Avg: -50.9 (1.0000) <0-00:52:31> 
Step:   65000, Reward: -72.755 [9.147], Avg: -51.231 (1.0000) <0-00:53:21> 
Step:   66000, Reward: -36.932 [19.418], Avg: -51.018 (1.0000) <0-00:54:09> 
Step:   67000, Reward: -55.72 [4.670], Avg: -51.087 (1.0000) <0-00:54:57> 
Step:   68000, Reward: -17.366 [70.088], Avg: -50.598 (1.0000) <0-00:55:48> 
Step:   69000, Reward: -33.681 [33.459], Avg: -50.357 (1.0000) <0-00:56:37> 
Step:   70000, Reward: -80.161 [41.098], Avg: -50.776 (1.0000) <0-00:57:25> 
Step:   71000, Reward: -73.897 [6.410], Avg: -51.097 (1.0000) <0-00:58:16> 
Step:   72000, Reward: -37.612 [27.282], Avg: -50.913 (1.0000) <0-00:59:06> 
Step:   73000, Reward: -29.08 [20.454], Avg: -50.618 (1.0000) <0-00:59:54> 
Step:   74000, Reward: -26.237 [25.512], Avg: -50.293 (1.0000) <0-01:00:43> 
Step:   75000, Reward: -59.976 [16.235], Avg: -50.42 (1.0000) <0-01:01:35> 
Step:   76000, Reward: -48.843 [17.942], Avg: -50.4 (1.0000) <0-01:02:23> 
Step:   77000, Reward: -41.841 [19.969], Avg: -50.29 (1.0000) <0-01:03:15> 
Step:   78000, Reward: 175.926 [150.644], Avg: -47.426 (1.0000) <0-01:04:11> 
Step:   79000, Reward: 107.969 [57.821], Avg: -45.484 (1.0000) <0-01:05:06> 
Step:   80000, Reward: 59.821 [58.973], Avg: -44.184 (1.0000) <0-01:06:01> 
Step:   81000, Reward: 11.227 [48.342], Avg: -43.508 (1.0000) <0-01:06:52> 
Step:   82000, Reward: 11.795 [50.682], Avg: -42.842 (1.0000) <0-01:07:41> 
Step:   83000, Reward: 14.376 [40.442], Avg: -42.161 (1.0000) <0-01:08:32> 
Step:   84000, Reward: 156.574 [66.119], Avg: -39.823 (1.0000) <0-01:09:26> 
Step:   85000, Reward: 135.419 [141.488], Avg: -37.785 (1.0000) <0-01:10:22> 
Step:   86000, Reward: -21.365 [25.047], Avg: -37.596 (1.0000) <0-01:11:18> 
Step:   87000, Reward: 35.346 [53.569], Avg: -36.767 (1.0000) <0-01:12:14> 
Step:   88000, Reward: -21.98 [29.148], Avg: -36.601 (1.0000) <0-01:13:10> 
Step:   89000, Reward: -38.885 [29.472], Avg: -36.626 (1.0000) <0-01:14:07> 
Step:   90000, Reward: 48.758 [59.994], Avg: -35.688 (1.0000) <0-01:15:03> 
Step:   91000, Reward: 141.662 [117.860], Avg: -33.76 (1.0000) <0-01:15:58> 
Step:   92000, Reward: 134.383 [96.442], Avg: -31.952 (1.0000) <0-01:16:54> 
Step:   93000, Reward: 188.99 [171.404], Avg: -29.602 (1.0000) <0-01:17:50> 
Step:   94000, Reward: 133.653 [154.922], Avg: -27.884 (1.0000) <0-01:18:46> 
Step:   95000, Reward: 132.102 [30.727], Avg: -26.217 (1.0000) <0-01:19:43> 
Step:   96000, Reward: 132.903 [102.731], Avg: -24.577 (1.0000) <0-01:20:34> 
Step:   97000, Reward: 225.641 [170.976], Avg: -22.023 (1.0000) <0-01:21:24> 
Step:   98000, Reward: 162.791 [96.476], Avg: -20.157 (1.0000) <0-01:22:15> 
Step:   99000, Reward: -9.58 [33.260], Avg: -20.051 (1.0000) <0-01:23:06> 
Step:  100000, Reward: 211.545 [120.028], Avg: -17.758 (1.0000) <0-01:23:55> 
Step:  101000, Reward: 211.09 [123.468], Avg: -15.514 (1.0000) <0-01:24:45> 
Step:  102000, Reward: 236.124 [179.005], Avg: -13.071 (1.0000) <0-01:25:33> 
Step:  103000, Reward: 109.911 [111.892], Avg: -11.889 (1.0000) <0-01:26:22> 
Step:  104000, Reward: 66.495 [65.744], Avg: -11.142 (1.0000) <0-01:27:10> 
Step:  105000, Reward: 198.266 [127.507], Avg: -9.166 (1.0000) <0-01:27:58> 
