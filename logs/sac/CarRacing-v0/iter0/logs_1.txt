Model: <class 'models.singleagent.sac.SACAgent'>, Env: CarRacing-v0/iter0, Date: 25/03/2020 13:19:36
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 8618ee2070fab907c130c9532a2873a5eaa6b0fe
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f7ce4986b38>,

import torch
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE, gsoftmax

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-5,0).exp()
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		action_out = gsoftmax(action_mu, hard=False) if self.discrete else action.tanh()
		log_prob = torch.log(action_out+1e-6) if self.discrete else dist.log_prob(action)-torch.log(1-action_out.pow(2)+1e-6)
		return action_out, log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"):
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, targets, next_log_probs, dones, gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-5, 0).detach().exp()
		if not self.discrete: next_log_probs = next_log_probs.sum(-1, keepdim=True)
		q_targets = targets - gamma*alpha*next_log_probs*(1-dones.unsqueeze(-1))
		q_targets = (actions*q_targets).sum(-1, keepdim=True) if self.discrete else q_targets

		q_values = self.get_q_value(states, actions, grad=True)
		q_values = q_values.gather(-1, actions.argmax(-1, keepdim=True)) if self.discrete else q_values
		critic1_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True)
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = alpha*log_prob - (q_actions - q_baseline.detach())
		actor_loss = actor_action*actor_loss if self.discrete else actor_loss
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters())
		
		log_prob = (actor_action*log_prob).sum(-1) if self.discrete else log_prob
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			next_action, next_log_prob = self.network.get_action_probs(states[-1])
			actions = torch.cat([actions, next_action.unsqueeze(0)], dim=0)
			log_probs = torch.cat([log_probs, next_log_prob.unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets, next_log_probs, dones = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets, log_probs[1:], dones)]
			self.replay_buffer.extend(list(zip(states, actions, targets, next_log_probs, dones)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets, next_log_probs, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets, next_log_probs, dones)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -24.579 [14.327], Avg: -24.579 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -17.035 [15.875], Avg: -20.807 (1.0000) <0-00:00:53> 
Step:    2000, Reward: -11.693 [22.817], Avg: -17.769 (1.0000) <0-00:01:55> 
Step:    3000, Reward: -23.214 [13.416], Avg: -19.13 (1.0000) <0-00:02:59> 
Step:    4000, Reward: -17.689 [16.931], Avg: -18.842 (1.0000) <0-00:04:06> 
Step:    5000, Reward: -21.111 [17.668], Avg: -19.22 (1.0000) <0-00:05:20> 
Step:    6000, Reward: -21.136 [18.861], Avg: -19.494 (1.0000) <0-00:06:35> 
Step:    7000, Reward: -24.728 [16.444], Avg: -20.148 (1.0000) <0-00:07:53> 
Step:    8000, Reward: -21.609 [14.967], Avg: -20.31 (1.0000) <0-00:09:11> 
Step:    9000, Reward: -27.07 [10.086], Avg: -20.986 (1.0000) <0-00:10:31> 
Step:   10000, Reward: -12.556 [20.428], Avg: -20.22 (1.0000) <0-00:11:51> 
Step:   11000, Reward: -18.124 [20.595], Avg: -20.045 (1.0000) <0-00:13:12> 
Step:   12000, Reward: -25.317 [16.072], Avg: -20.451 (1.0000) <0-00:14:33> 
Step:   13000, Reward: -21.057 [15.881], Avg: -20.494 (1.0000) <0-00:15:54> 
Step:   14000, Reward: -14.948 [19.061], Avg: -20.124 (1.0000) <0-00:17:17> 
Step:   15000, Reward: -23.325 [14.709], Avg: -20.324 (1.0000) <0-00:18:39> 
Step:   16000, Reward: -24.008 [15.319], Avg: -20.541 (1.0000) <0-00:20:00> 
Step:   17000, Reward: -77.745 [2.390], Avg: -23.719 (1.0000) <0-00:21:23> 
Step:   18000, Reward: -91.963 [38.223], Avg: -27.311 (1.0000) <0-00:22:45> 
Step:   19000, Reward: -124.116 [21.954], Avg: -32.151 (1.0000) <0-00:24:06> 
Step:   20000, Reward: -98.872 [30.678], Avg: -35.328 (1.0000) <0-00:25:28> 
Step:   21000, Reward: -110.444 [16.044], Avg: -38.743 (1.0000) <0-00:26:42> 
Step:   22000, Reward: -65.32 [11.639], Avg: -39.898 (1.0000) <0-00:28:04> 
Step:   23000, Reward: -64.86 [14.369], Avg: -40.938 (1.0000) <0-00:29:26> 
Step:   24000, Reward: -71.135 [11.645], Avg: -42.146 (1.0000) <0-00:30:48> 
Step:   25000, Reward: -42.77 [63.565], Avg: -42.17 (1.0000) <0-00:32:10> 
Step:   26000, Reward: 347.285 [214.140], Avg: -27.746 (1.0000) <0-00:33:30> 
Step:   27000, Reward: 173.341 [120.965], Avg: -20.564 (1.0000) <0-00:34:52> 
Step:   28000, Reward: -31.039 [3.867], Avg: -20.925 (1.0000) <0-00:36:13> 
Step:   29000, Reward: -78.862 [49.133], Avg: -22.857 (1.0000) <0-00:37:35> 
Step:   30000, Reward: -78.871 [34.805], Avg: -24.664 (1.0000) <0-00:38:57> 
Step:   31000, Reward: -12.9 [41.219], Avg: -24.296 (1.0000) <0-00:40:19> 
Step:   32000, Reward: 176.271 [201.646], Avg: -18.218 (1.0000) <0-00:41:41> 
Step:   33000, Reward: 261.466 [163.956], Avg: -9.992 (1.0000) <0-00:43:02> 
Step:   34000, Reward: -62.62 [3.256], Avg: -11.496 (1.0000) <0-00:44:22> 
Step:   35000, Reward: -44.763 [21.426], Avg: -12.42 (1.0000) <0-00:45:44> 
Step:   36000, Reward: 349.86 [284.412], Avg: -2.629 (1.0000) <0-00:47:06> 
Step:   37000, Reward: 466.602 [209.699], Avg: 9.72 (1.0000) <0-00:48:28> 
Step:   38000, Reward: 151.972 [71.363], Avg: 13.367 (1.0000) <0-00:49:49> 
Step:   39000, Reward: 629.157 [233.321], Avg: 28.762 (1.0000) <0-00:51:11> 
Step:   40000, Reward: 238.771 [112.204], Avg: 33.884 (1.0000) <0-00:52:33> 
Step:   41000, Reward: 271.186 [101.285], Avg: 39.534 (1.0000) <0-00:53:55> 
Step:   42000, Reward: 145.816 [129.854], Avg: 42.006 (1.0000) <0-00:55:17> 
Step:   43000, Reward: 14.821 [41.302], Avg: 41.388 (1.0000) <0-00:56:38> 
Step:   44000, Reward: 235.211 [174.639], Avg: 45.695 (1.0000) <0-00:58:01> 
Step:   45000, Reward: 257.404 [225.918], Avg: 50.297 (1.0000) <0-00:59:23> 
Step:   46000, Reward: 212.384 [169.759], Avg: 53.746 (1.0000) <0-01:00:44> 
Step:   47000, Reward: 237.937 [152.614], Avg: 57.583 (1.0000) <0-01:02:05> 
Step:   48000, Reward: 303.038 [131.909], Avg: 62.593 (1.0000) <0-01:03:27> 
Step:   49000, Reward: 239.338 [147.693], Avg: 66.128 (1.0000) <0-01:04:49> 
Step:   50000, Reward: 155.095 [103.304], Avg: 67.872 (1.0000) <0-01:06:10> 
Step:   51000, Reward: 270.374 [165.575], Avg: 71.766 (1.0000) <0-01:07:32> 
Step:   52000, Reward: 266.112 [189.668], Avg: 75.433 (1.0000) <0-01:08:53> 
Step:   53000, Reward: 197.482 [129.358], Avg: 77.693 (1.0000) <0-01:10:14> 
Step:   54000, Reward: 244.262 [117.182], Avg: 80.722 (1.0000) <0-01:11:36> 
Step:   55000, Reward: 200.145 [143.637], Avg: 82.854 (1.0000) <0-01:12:58> 
Step:   56000, Reward: 219.329 [126.576], Avg: 85.249 (1.0000) <0-01:14:20> 
Step:   57000, Reward: 235.574 [93.150], Avg: 87.841 (1.0000) <0-01:15:43> 
Step:   58000, Reward: 208.785 [93.777], Avg: 89.89 (1.0000) <0-01:17:05> 
Step:   59000, Reward: 376.64 [149.170], Avg: 94.67 (1.0000) <0-01:18:26> 
Step:   60000, Reward: 326.162 [153.489], Avg: 98.465 (1.0000) <0-01:19:49> 
Step:   61000, Reward: 397.051 [189.071], Avg: 103.281 (1.0000) <0-01:21:10> 
Step:   62000, Reward: 390.804 [163.117], Avg: 107.844 (1.0000) <0-01:22:32> 
Step:   63000, Reward: 364.254 [208.354], Avg: 111.851 (1.0000) <0-01:23:54> 
Step:   64000, Reward: 379.876 [146.675], Avg: 115.974 (1.0000) <0-01:25:16> 
Step:   65000, Reward: 398.571 [180.493], Avg: 120.256 (1.0000) <0-01:26:37> 
Step:   66000, Reward: 489.738 [168.744], Avg: 125.771 (1.0000) <0-01:27:58> 
Step:   67000, Reward: 482.326 [167.395], Avg: 131.014 (1.0000) <0-01:29:20> 
Step:   68000, Reward: 664.481 [105.239], Avg: 138.746 (1.0000) <0-01:30:41> 
