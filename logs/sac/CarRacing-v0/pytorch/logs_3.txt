Model: <class 'models.singleagent.sac.SACAgent'>, Env: CarRacing-v0/pytorch, Date: 24/03/2020 00:35:55
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 44ca20cf6a7c5235268ae2ebd115f3bbd37b7654
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.ImgStack object at 0x7f98b1914c18>,

import torch
import numpy as np
from utils.rand import ReplayBuffer
from utils.network import PTACNetwork, PTACAgent, PTCritic, LEARN_RATE, REPLAY_BATCH_SIZE, TARGET_UPDATE_RATE, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, Conv, EPS_DECAY, DISCOUNT_RATE, gsoftmax

class SACActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig(state).clamp(-5,0).exp()
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.rsample() if sample else action_mu
		action_out = gsoftmax(action_mu, hard=False) if self.discrete else action.tanh()
		log_prob = torch.log(action_out+1e-6) if self.discrete else dist.log_prob(action)-torch.log(1-action_out.pow(2)+1e-6)
		return action_out, log_prob

class SACCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.net_state = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.net_action = torch.nn.Linear(action_size[-1], INPUT_LAYER)
		self.net_layer1 = torch.nn.Linear(2*INPUT_LAYER, CRITIC_HIDDEN)
		self.net_layer2 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.q_value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state, action):
		state = self.net_state(state).relu()
		net_action = self.net_action(action).relu()
		net_layer = torch.cat([state, net_action], dim=-1)
		net_layer = self.net_layer1(net_layer).relu()
		net_layer = self.net_layer2(net_layer).relu()
		q_value = self.q_value(net_layer)
		return q_value

class SACNetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=SACActor, critic=SACCritic, lr=LEARN_RATE, tau=TARGET_UPDATE_RATE, gpu=True, load=None, name="sac"):
		self.discrete = type(action_size)!=tuple
		super().__init__(state_size, action_size, actor, critic if not self.discrete else lambda s,a: PTCritic(s,a), lr=lr, tau=tau, gpu=gpu, load=load, name=name)
		self.log_alpha = torch.nn.Parameter(torch.zeros(1, requires_grad=True).to(self.device))
		self.alpha_optimizer = torch.optim.Adam([self.log_alpha], lr=lr)
		self.target_entropy = -np.product(action_size)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob = self.actor_local(state.to(self.device), action_in, sample)
			return [x.cpu().numpy() if numpy else x for x in [action, log_prob]]

	def get_q_value(self, state, action, use_target=False, grad=False, numpy=False, probs=False):
		with torch.enable_grad() if grad else torch.no_grad():
			critic = self.critic_local if not use_target else self.critic_target
			q_value = critic(state) if self.discrete else critic(state, action)
			return q_value.cpu().numpy() if numpy else q_value
	
	def optimize(self, states, actions, targets, next_log_probs, dones, gamma=DISCOUNT_RATE):
		alpha = self.log_alpha.clamp(-5, 0).detach().exp()
		if not self.discrete: next_log_probs = next_log_probs.sum(-1, keepdim=True)
		q_targets = targets - gamma*alpha*next_log_probs*(1-dones.unsqueeze(-1))
		q_targets = (actions*q_targets).sum(-1, keepdim=True) if self.discrete else q_targets

		q_values = self.get_q_value(states, actions, grad=True)
		q_values = q_values.gather(-1, actions.argmax(-1, keepdim=True)) if self.discrete else q_values
		critic1_loss = (q_values - q_targets.detach()).pow(2)
		self.step(self.critic_optimizer, critic1_loss.mean(), self.critic_local.parameters())
		self.soft_copy(self.critic_local, self.critic_target)

		actor_action, log_prob = self.actor_local(states)
		q_actions = self.get_q_value(states, actor_action, grad=True)
		q_baseline = q_targets if self.discrete else q_values
		actor_loss = alpha*log_prob - (q_actions - q_baseline.detach())
		actor_loss = actor_action*actor_loss if self.discrete else actor_loss
		self.step(self.actor_optimizer, actor_loss.mean(), self.actor_local.parameters())
		
		log_prob = (actor_action*log_prob).sum(-1) if self.discrete else log_prob
		alpha_loss = -(self.log_alpha * (log_prob.detach() + self.target_entropy))
		self.step(self.alpha_optimizer, alpha_loss.mean())

class SACAgent(PTACAgent):
	def __init__(self, state_size, action_size, decay=EPS_DECAY, lr=LEARN_RATE, gpu=True, load=None):
		super().__init__(state_size, action_size, SACNetwork, decay=decay, lr=lr, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True, e_greedy=False):
		action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return action
		
	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()	
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			next_action, next_log_prob = self.network.get_action_probs(states[-1])
			actions = torch.cat([actions, next_action.unsqueeze(0)], dim=0)
			log_probs = torch.cat([log_probs, next_log_prob.unsqueeze(0)], dim=0)
			values = self.network.get_q_value(states, actions, use_target=True)
			targets = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1])[0]
			states, actions, targets, next_log_probs, dones = [x.view(x.size(0)*x.size(1), *x.size()[2:]).cpu().numpy() for x in (states[:-1], actions[:-1], targets, log_probs[1:], dones)]
			self.replay_buffer.extend(list(zip(states, actions, targets, next_log_probs, dones)), shuffle=False)	
		if len(self.replay_buffer) > REPLAY_BATCH_SIZE:
			states, actions, targets, next_log_probs, dones = self.replay_buffer.sample(REPLAY_BATCH_SIZE, dtype=self.to_tensor)[0]
			self.network.optimize(states, actions, targets, next_log_probs, dones)

REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -19.44 [14.824], Avg: -19.44 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -23.493 [16.460], Avg: -21.466 (1.0000) <0-00:08:08> 
Step:    2000, Reward: -25.107 [14.103], Avg: -22.68 (1.0000) <0-00:16:52> 
Step:    3000, Reward: -23.672 [13.861], Avg: -22.928 (1.0000) <0-00:25:14> 
Step:    4000, Reward: -23.748 [13.545], Avg: -23.092 (1.0000) <0-00:33:46> 
Step:    5000, Reward: -21.525 [12.979], Avg: -22.831 (1.0000) <0-00:42:11> 
Step:    6000, Reward: -24.585 [15.992], Avg: -23.081 (1.0000) <0-00:50:46> 
Step:    7000, Reward: -26.404 [12.379], Avg: -23.497 (1.0000) <0-00:59:18> 
Step:    8000, Reward: -17.757 [18.960], Avg: -22.859 (1.0000) <0-01:07:51> 
Step:    9000, Reward: -23.1 [14.952], Avg: -22.883 (1.0000) <0-01:16:23> 
Step:   10000, Reward: -21.621 [17.635], Avg: -22.768 (1.0000) <0-01:24:57> 
Step:   11000, Reward: -22.375 [13.811], Avg: -22.736 (1.0000) <0-01:33:34> 
Step:   12000, Reward: -22.838 [10.156], Avg: -22.743 (1.0000) <0-01:42:23> 
Step:   13000, Reward: -19.442 [15.590], Avg: -22.508 (1.0000) <0-01:49:21> 
Step:   14000, Reward: -25.331 [11.680], Avg: -22.696 (1.0000) <0-01:54:36> 
Step:   15000, Reward: -25.511 [11.670], Avg: -22.872 (1.0000) <0-02:00:13> 
Step:   16000, Reward: -24.91 [13.913], Avg: -22.992 (1.0000) <0-02:05:50> 
Step:   17000, Reward: -25.176 [12.632], Avg: -23.113 (1.0000) <0-02:11:33> 
Step:   18000, Reward: -23.816 [10.796], Avg: -23.15 (1.0000) <0-02:17:11> 
Step:   19000, Reward: -134.09 [16.435], Avg: -28.697 (1.0000) <0-02:22:49> 
Step:   20000, Reward: -51.242 [14.036], Avg: -29.771 (1.0000) <0-02:28:29> 
Step:   21000, Reward: -48.563 [17.845], Avg: -30.625 (1.0000) <0-02:34:05> 
Step:   22000, Reward: -77.357 [8.879], Avg: -32.657 (1.0000) <0-02:39:54> 
Step:   23000, Reward: 11.736 [58.174], Avg: -30.807 (1.0000) <0-02:45:37> 
Step:   24000, Reward: -128.109 [28.298], Avg: -34.699 (1.0000) <0-02:51:15> 
Step:   25000, Reward: -76.838 [5.571], Avg: -36.32 (1.0000) <0-02:56:54> 
Step:   26000, Reward: -74.247 [8.241], Avg: -37.724 (1.0000) <0-03:02:45> 
Step:   27000, Reward: -58.195 [47.509], Avg: -38.456 (1.0000) <0-03:08:29> 
Step:   28000, Reward: -76.906 [39.129], Avg: -39.781 (1.0000) <0-03:14:04> 
Step:   29000, Reward: -66.45 [3.349], Avg: -40.67 (1.0000) <0-03:19:49> 
Step:   30000, Reward: -66.516 [2.821], Avg: -41.504 (1.0000) <0-03:25:30> 
Step:   31000, Reward: -60.988 [8.211], Avg: -42.113 (1.0000) <0-03:31:10> 
Step:   32000, Reward: 22.414 [41.026], Avg: -40.158 (1.0000) <0-03:36:53> 
Step:   33000, Reward: 403.727 [187.578], Avg: -27.102 (1.0000) <0-03:42:33> 
Step:   34000, Reward: 9.258 [11.927], Avg: -26.063 (1.0000) <0-03:48:36> 
Step:   35000, Reward: 40.18 [12.258], Avg: -24.223 (1.0000) <0-03:54:38> 
Step:   36000, Reward: 87.926 [21.792], Avg: -21.192 (1.0000) <0-04:00:37> 
Step:   37000, Reward: 183.337 [24.596], Avg: -15.81 (1.0000) <0-04:06:19> 
Step:   38000, Reward: 320.307 [32.590], Avg: -7.191 (1.0000) <0-04:11:55> 
Step:   39000, Reward: 359.05 [123.507], Avg: 1.965 (1.0000) <0-04:17:37> 
Step:   40000, Reward: 18.065 [161.899], Avg: 2.357 (1.0000) <0-04:23:37> 
Step:   41000, Reward: 394.362 [40.997], Avg: 11.691 (1.0000) <0-04:29:23> 
Step:   42000, Reward: 524.993 [53.032], Avg: 23.628 (1.0000) <0-04:35:07> 
Step:   43000, Reward: 538.235 [42.617], Avg: 35.324 (1.0000) <0-04:41:09> 
Step:   44000, Reward: 358.976 [142.704], Avg: 42.516 (1.0000) <0-04:46:50> 
Step:   45000, Reward: 218.709 [71.786], Avg: 46.346 (1.0000) <0-04:52:45> 
Step:   46000, Reward: -15.552 [27.042], Avg: 45.029 (1.0000) <0-04:58:43> 
Step:   47000, Reward: 202.787 [101.134], Avg: 48.316 (1.0000) <0-05:04:29> 
Step:   48000, Reward: 228.515 [94.555], Avg: 51.993 (1.0000) <0-05:10:18> 
Step:   49000, Reward: 180.055 [97.074], Avg: 54.555 (1.0000) <0-05:15:56> 
Step:   50000, Reward: 238.2 [91.300], Avg: 58.155 (1.0000) <0-05:21:33> 
Step:   51000, Reward: 251.673 [194.325], Avg: 61.877 (1.0000) <0-05:27:27> 
Step:   52000, Reward: 92.896 [94.916], Avg: 62.462 (1.0000) <0-05:33:01> 
Step:   53000, Reward: 178.119 [75.250], Avg: 64.604 (1.0000) <0-05:38:42> 
Step:   54000, Reward: 194.419 [125.602], Avg: 66.964 (1.0000) <0-05:44:14> 
Step:   55000, Reward: 249.945 [119.748], Avg: 70.232 (1.0000) <0-05:50:07> 
Step:   56000, Reward: 163.815 [115.002], Avg: 71.874 (1.0000) <0-05:56:24> 
Step:   57000, Reward: 158.741 [78.005], Avg: 73.371 (1.0000) <0-06:02:19> 
Step:   58000, Reward: 443.0 [222.643], Avg: 79.636 (1.0000) <0-06:08:10> 
Step:   59000, Reward: 393.747 [184.906], Avg: 84.871 (1.0000) <0-06:14:11> 
Step:   60000, Reward: 452.551 [258.289], Avg: 90.899 (1.0000) <0-06:20:11> 
Step:   61000, Reward: 278.484 [138.551], Avg: 93.924 (1.0000) <0-06:26:10> 
Step:   62000, Reward: 447.293 [169.039], Avg: 99.534 (1.0000) <0-06:32:07> 
Step:   63000, Reward: 407.53 [179.831], Avg: 104.346 (1.0000) <0-06:37:57> 
Step:   64000, Reward: 281.723 [147.591], Avg: 107.075 (1.0000) <0-06:43:49> 
Step:   65000, Reward: 414.853 [184.318], Avg: 111.738 (1.0000) <0-06:49:40> 
Step:   66000, Reward: 303.49 [252.139], Avg: 114.6 (1.0000) <0-06:55:19> 
Step:   67000, Reward: 181.105 [140.857], Avg: 115.578 (1.0000) <0-07:01:06> 
Step:   68000, Reward: 416.368 [240.113], Avg: 119.937 (1.0000) <0-07:06:48> 
Step:   69000, Reward: 397.347 [181.938], Avg: 123.9 (1.0000) <0-07:12:34> 
Step:   70000, Reward: 448.184 [207.748], Avg: 128.468 (1.0000) <0-07:18:25> 
Step:   71000, Reward: 620.252 [221.961], Avg: 135.298 (1.0000) <0-07:24:17> 
Step:   72000, Reward: 539.193 [246.778], Avg: 140.831 (1.0000) <0-07:30:17> 
Step:   73000, Reward: 417.032 [204.796], Avg: 144.563 (1.0000) <0-07:36:06> 
Step:   74000, Reward: 372.977 [161.692], Avg: 147.609 (1.0000) <0-07:42:04> 
Step:   75000, Reward: 341.255 [200.003], Avg: 150.157 (1.0000) <0-07:47:55> 
Step:   76000, Reward: 388.305 [193.432], Avg: 153.25 (1.0000) <0-07:53:41> 
Step:   77000, Reward: 224.885 [192.971], Avg: 154.168 (1.0000) <0-07:59:30> 
Step:   78000, Reward: 478.082 [308.299], Avg: 158.268 (1.0000) <0-08:05:20> 
Step:   79000, Reward: 572.47 [242.929], Avg: 163.446 (1.0000) <0-08:11:28> 
Step:   80000, Reward: 405.385 [297.197], Avg: 166.433 (1.0000) <0-08:17:04> 
Step:   81000, Reward: 351.672 [181.900], Avg: 168.692 (1.0000) <0-08:23:10> 
Step:   82000, Reward: 626.404 [196.539], Avg: 174.206 (1.0000) <0-08:28:59> 
Step:   83000, Reward: 715.887 [158.004], Avg: 180.655 (1.0000) <0-08:34:56> 
Step:   84000, Reward: 555.539 [234.549], Avg: 185.065 (1.0000) <0-08:40:45> 
Step:   85000, Reward: 427.744 [281.537], Avg: 187.887 (1.0000) <0-08:46:35> 
Step:   86000, Reward: 654.237 [201.217], Avg: 193.247 (1.0000) <0-08:52:44> 
Step:   87000, Reward: 646.612 [205.869], Avg: 198.399 (1.0000) <0-08:58:33> 
Step:   88000, Reward: 664.806 [152.449], Avg: 203.64 (1.0000) <0-09:04:40> 
Step:   89000, Reward: -62.051 [15.964], Avg: 200.688 (1.0000) <0-09:10:37> 
Step:   90000, Reward: 644.69 [132.364], Avg: 205.567 (1.0000) <0-09:16:34> 
Step:   91000, Reward: 555.14 [122.039], Avg: 209.367 (1.0000) <0-09:22:23> 
Step:   92000, Reward: 430.356 [175.573], Avg: 211.743 (1.0000) <0-09:28:08> 
Step:   93000, Reward: 480.818 [221.838], Avg: 214.605 (1.0000) <0-09:33:52> 
Step:   94000, Reward: 486.738 [269.805], Avg: 217.47 (1.0000) <0-09:39:23> 
Step:   95000, Reward: 94.547 [118.479], Avg: 216.189 (1.0000) <0-09:45:07> 
Step:   96000, Reward: 565.086 [269.869], Avg: 219.786 (1.0000) <0-09:50:48> 
Step:   97000, Reward: 614.079 [225.874], Avg: 223.81 (1.0000) <0-09:56:51> 
Step:   98000, Reward: 661.628 [151.615], Avg: 228.232 (1.0000) <0-10:02:44> 
Step:   99000, Reward: 624.536 [286.382], Avg: 232.195 (1.0000) <0-10:08:26> 
Step:  100000, Reward: 681.927 [244.564], Avg: 236.648 (1.0000) <0-10:14:26> 
Step:  101000, Reward: 617.959 [226.985], Avg: 240.386 (1.0000) <0-10:20:30> 
Step:  102000, Reward: 357.115 [278.004], Avg: 241.52 (1.0000) <0-10:26:38> 
Step:  103000, Reward: 484.195 [202.185], Avg: 243.853 (1.0000) <0-10:32:39> 
Step:  104000, Reward: 363.676 [203.572], Avg: 244.994 (1.0000) <0-10:38:42> 
Step:  105000, Reward: 518.391 [182.405], Avg: 247.573 (1.0000) <0-10:44:31> 
Step:  106000, Reward: 466.607 [245.338], Avg: 249.62 (1.0000) <0-10:50:42> 
Step:  107000, Reward: 562.693 [290.855], Avg: 252.519 (1.0000) <0-10:56:34> 
Step:  108000, Reward: 604.956 [264.991], Avg: 255.753 (1.0000) <0-11:02:25> 
