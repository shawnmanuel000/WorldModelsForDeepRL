Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: take_cover/iter0, Date: 23/03/2020 17:01:56
CPU: 4 Core, 2.2GHz, 16.0 GB, Darwin-18.7.0-x86_64-i386-64bit
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 57eb00c1a9e75822d6f7108a463014144cffb906
Branch: master

num_envs: 16,
state_size: (64, 64, 3),
action_size: [2],
action_space: Discrete(2),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x12b0bc518>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action_in=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = self.dist(action_mu, action_sig)
		action = dist.sample() if action_in is None else action_in.argmax(-1) if self.discrete else action_in
		action_out = one_hot_from_indices(action, action_mu.size(-1)) if self.discrete else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action_out, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)


Step:       0, Reward: 201.625 [83.041], Avg: 201.625 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 298.062 [82.240], Avg: 249.844 (1.0000) <0-00:01:32> 
Step:    2000, Reward: 227.062 [86.228], Avg: 242.25 (1.0000) <0-00:03:04> 
Step:    3000, Reward: 280.688 [114.788], Avg: 251.859 (1.0000) <0-00:04:46> 
Step:    4000, Reward: 298.375 [108.345], Avg: 261.162 (1.0000) <0-00:06:25> 
Step:    5000, Reward: 275.688 [109.929], Avg: 263.583 (1.0000) <0-00:07:59> 
Step:    6000, Reward: 257.812 [81.006], Avg: 262.759 (1.0000) <0-00:09:28> 
Step:    7000, Reward: 288.312 [91.410], Avg: 265.953 (1.0000) <0-00:11:01> 
Step:    8000, Reward: 235.188 [81.880], Avg: 262.535 (1.0000) <0-00:12:28> 
Step:    9000, Reward: 274.125 [89.890], Avg: 263.694 (1.0000) <0-00:14:00> 
Step:   10000, Reward: 272.5 [59.239], Avg: 264.494 (1.0000) <0-00:15:32> 
Step:   11000, Reward: 239.625 [83.451], Avg: 262.422 (1.0000) <0-00:17:05> 
Step:   12000, Reward: 261.5 [40.916], Avg: 262.351 (1.0000) <0-00:18:38> 
Step:   13000, Reward: 257.875 [46.915], Avg: 262.031 (1.0000) <0-00:20:09> 
Step:   14000, Reward: 258.688 [48.045], Avg: 261.808 (1.0000) <0-00:21:34> 
Step:   15000, Reward: 302.5 [67.224], Avg: 264.352 (1.0000) <0-00:23:09> 
Step:   16000, Reward: 268.625 [55.287], Avg: 264.603 (1.0000) <0-00:24:41> 
Step:   17000, Reward: 269.062 [52.222], Avg: 264.851 (1.0000) <0-00:26:05> 
Step:   18000, Reward: 284.312 [72.595], Avg: 265.875 (1.0000) <0-00:27:30> 
Step:   19000, Reward: 291.5 [80.941], Avg: 267.156 (1.0000) <0-00:29:10> 
Step:   20000, Reward: 262.5 [74.570], Avg: 266.934 (1.0000) <0-00:30:40> 
Step:   21000, Reward: 278.5 [81.563], Avg: 267.46 (1.0000) <0-00:32:06> 
Step:   22000, Reward: 241.375 [70.802], Avg: 266.326 (1.0000) <0-00:33:36> 
Step:   23000, Reward: 281.062 [54.545], Avg: 266.94 (1.0000) <0-00:35:05> 
Step:   24000, Reward: 302.25 [65.429], Avg: 268.352 (1.0000) <0-00:36:38> 
Step:   25000, Reward: 293.75 [45.214], Avg: 269.329 (1.0000) <0-00:38:05> 
Step:   26000, Reward: 277.938 [67.841], Avg: 269.648 (1.0000) <0-00:39:43> 
Step:   27000, Reward: 261.438 [47.339], Avg: 269.355 (1.0000) <0-00:41:17> 
Step:   28000, Reward: 243.188 [48.576], Avg: 268.453 (1.0000) <0-00:42:47> 
Step:   29000, Reward: 247.062 [50.501], Avg: 267.74 (1.0000) <0-00:44:27> 
Step:   30000, Reward: 252.812 [49.597], Avg: 267.258 (1.0000) <0-00:46:00> 
Step:   31000, Reward: 265.625 [46.348], Avg: 267.207 (1.0000) <0-00:47:40> 
Step:   32000, Reward: 274.625 [76.281], Avg: 267.432 (1.0000) <0-00:49:18> 
Step:   33000, Reward: 295.5 [95.609], Avg: 268.257 (1.0000) <0-00:50:53> 
Step:   34000, Reward: 301.0 [85.362], Avg: 269.193 (1.0000) <0-00:52:40> 
Step:   35000, Reward: 281.625 [83.828], Avg: 269.538 (1.0000) <0-00:54:10> 
Step:   36000, Reward: 300.875 [79.739], Avg: 270.385 (1.0000) <0-00:56:01> 
Step:   37000, Reward: 315.562 [103.562], Avg: 271.574 (1.0000) <0-00:57:37> 
Step:   38000, Reward: 274.25 [58.445], Avg: 271.643 (1.0000) <0-00:59:34> 
Step:   39000, Reward: 296.25 [78.721], Avg: 272.258 (1.0000) <0-01:01:10> 
Step:   40000, Reward: 309.875 [73.653], Avg: 273.175 (1.0000) <0-01:03:03> 
Step:   41000, Reward: 278.25 [90.745], Avg: 273.296 (1.0000) <0-01:04:50> 
Step:   42000, Reward: 316.438 [79.281], Avg: 274.299 (1.0000) <0-01:06:39> 
Step:   43000, Reward: 257.75 [80.277], Avg: 273.923 (1.0000) <0-01:08:21> 
Step:   44000, Reward: 330.562 [81.217], Avg: 275.182 (1.0000) <0-01:10:13> 
Step:   45000, Reward: 315.75 [80.641], Avg: 276.064 (1.0000) <0-01:12:00> 
Step:   46000, Reward: 333.938 [98.990], Avg: 277.295 (1.0000) <0-01:13:48> 
Step:   47000, Reward: 304.125 [90.184], Avg: 277.854 (1.0000) <0-01:15:32> 
Step:   48000, Reward: 314.062 [111.180], Avg: 278.593 (1.0000) <0-01:17:23> 
Step:   49000, Reward: 262.938 [101.976], Avg: 278.28 (1.0000) <0-01:19:16> 
Step:   50000, Reward: 313.875 [147.933], Avg: 278.978 (1.0000) <0-01:21:15> 
Step:   51000, Reward: 328.0 [86.061], Avg: 279.921 (1.0000) <0-01:23:01> 
Step:   52000, Reward: 309.438 [73.516], Avg: 280.478 (1.0000) <0-01:24:39> 
Step:   53000, Reward: 260.75 [95.789], Avg: 280.112 (1.0000) <0-01:26:41> 
Step:   54000, Reward: 267.188 [77.694], Avg: 279.877 (1.0000) <0-01:28:24> 
Step:   55000, Reward: 290.688 [86.818], Avg: 280.07 (1.0000) <0-01:30:17> 
Step:   56000, Reward: 270.875 [89.355], Avg: 279.909 (1.0000) <0-01:32:05> 
Step:   57000, Reward: 279.688 [104.905], Avg: 279.905 (1.0000) <0-01:33:49> 
Step:   58000, Reward: 299.125 [86.170], Avg: 280.231 (1.0000) <0-01:35:42> 
Step:   59000, Reward: 320.062 [47.431], Avg: 280.895 (1.0000) <0-01:37:20> 
Step:   60000, Reward: 294.312 [41.950], Avg: 281.115 (1.0000) <0-01:39:16> 
Step:   61000, Reward: 285.562 [65.482], Avg: 281.186 (1.0000) <0-01:41:04> 
Step:   62000, Reward: 316.688 [40.961], Avg: 281.75 (1.0000) <0-01:42:46> 
Step:   63000, Reward: 274.375 [94.450], Avg: 281.635 (1.0000) <0-01:44:35> 
Step:   64000, Reward: 299.75 [77.298], Avg: 281.913 (1.0000) <0-01:46:20> 
Step:   65000, Reward: 276.438 [64.673], Avg: 281.83 (1.0000) <0-01:48:10> 
Step:   66000, Reward: 306.875 [50.188], Avg: 282.204 (1.0000) <0-01:50:03> 
Step:   67000, Reward: 294.875 [57.896], Avg: 282.391 (1.0000) <0-01:51:48> 
Step:   68000, Reward: 297.562 [55.225], Avg: 282.611 (1.0000) <0-01:53:41> 
Step:   69000, Reward: 282.875 [53.128], Avg: 282.614 (1.0000) <0-01:55:30> 
Step:   70000, Reward: 285.0 [75.265], Avg: 282.648 (1.0000) <0-01:57:16> 
Step:   71000, Reward: 261.5 [65.902], Avg: 282.354 (1.0000) <0-01:59:05> 
Step:   72000, Reward: 315.688 [52.673], Avg: 282.811 (1.0000) <0-02:00:44> 
Step:   73000, Reward: 334.25 [76.195], Avg: 283.506 (1.0000) <0-02:02:40> 
Step:   74000, Reward: 325.062 [59.198], Avg: 284.06 (1.0000) <0-02:04:38> 
Step:   75000, Reward: 298.812 [47.488], Avg: 284.254 (1.0000) <0-02:06:28> 
Step:   76000, Reward: 292.375 [61.421], Avg: 284.36 (1.0000) <0-02:08:14> 
Step:   77000, Reward: 310.188 [67.406], Avg: 284.691 (1.0000) <0-02:10:08> 
Step:   78000, Reward: 334.938 [86.627], Avg: 285.327 (1.0000) <0-02:11:54> 
Step:   79000, Reward: 290.0 [72.029], Avg: 285.385 (1.0000) <0-02:13:57> 
Step:   80000, Reward: 256.875 [89.152], Avg: 285.033 (1.0000) <0-02:15:47> 
Step:   81000, Reward: 302.312 [81.479], Avg: 285.244 (1.0000) <0-02:17:49> 
Step:   82000, Reward: 315.312 [83.417], Avg: 285.606 (1.0000) <0-02:19:37> 
Step:   83000, Reward: 274.938 [74.388], Avg: 285.479 (1.0000) <0-02:21:45> 
Step:   84000, Reward: 286.438 [89.650], Avg: 285.49 (1.0000) <0-02:23:32> 
Step:   85000, Reward: 306.25 [81.858], Avg: 285.732 (1.0000) <0-02:25:35> 
Step:   86000, Reward: 296.188 [71.074], Avg: 285.852 (1.0000) <0-02:27:30> 
Step:   87000, Reward: 320.938 [67.005], Avg: 286.251 (1.0000) <0-02:29:19> 
Step:   88000, Reward: 333.75 [78.122], Avg: 286.784 (1.0000) <0-02:31:13> 
Step:   89000, Reward: 283.125 [64.050], Avg: 286.744 (1.0000) <0-02:33:23> 
Step:   90000, Reward: 315.0 [81.183], Avg: 287.054 (1.0000) <0-02:35:21> 
Step:   91000, Reward: 301.25 [79.019], Avg: 287.209 (1.0000) <0-02:37:19> 
Step:   92000, Reward: 301.812 [45.589], Avg: 287.366 (1.0000) <0-02:39:24> 
Step:   93000, Reward: 287.812 [60.504], Avg: 287.37 (1.0000) <0-02:41:02> 
Step:   94000, Reward: 316.062 [55.218], Avg: 287.672 (1.0000) <0-02:43:12> 
