Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: CarRacing-v0/pytorch, Date: 24/03/2020 17:46:40
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 56691ae322b4160e26475e814b89099e839b1564
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.ImgStack object at 0x7f12f408fbe0>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action_in=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = self.dist(action_mu, action_sig)
		action = dist.sample() if action_in is None else action_in.argmax(-1) if self.discrete else action_in
		action_out = one_hot_from_indices(action, action_mu.size(-1)) if self.discrete else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action_out, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
				
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -33.494 [3.735], Avg: -33.494 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -32.413 [6.175], Avg: -32.954 (1.0000) <0-00:00:52> 
Step:    2000, Reward: -32.598 [5.236], Avg: -32.835 (1.0000) <0-00:01:43> 
Step:    3000, Reward: -29.158 [7.461], Avg: -31.916 (1.0000) <0-00:02:33> 
Step:    4000, Reward: -28.63 [7.314], Avg: -31.259 (1.0000) <0-00:03:23> 
Step:    5000, Reward: -27.207 [5.700], Avg: -30.583 (1.0000) <0-00:04:12> 
Step:    6000, Reward: -30.393 [5.274], Avg: -30.556 (1.0000) <0-00:05:02> 
Step:    7000, Reward: -27.243 [9.159], Avg: -30.142 (1.0000) <0-00:05:50> 
Step:    8000, Reward: -27.337 [5.577], Avg: -29.83 (1.0000) <0-00:06:39> 
Step:    9000, Reward: -28.942 [7.727], Avg: -29.742 (1.0000) <0-00:07:28> 
Step:   10000, Reward: -25.264 [10.001], Avg: -29.334 (1.0000) <0-00:08:17> 
Step:   11000, Reward: -25.802 [11.071], Avg: -29.04 (1.0000) <0-00:09:05> 
Step:   12000, Reward: -21.236 [13.607], Avg: -28.44 (1.0000) <0-00:09:54> 
Step:   13000, Reward: -31.035 [9.534], Avg: -28.625 (1.0000) <0-00:10:43> 
Step:   14000, Reward: -26.543 [15.480], Avg: -28.486 (1.0000) <0-00:11:32> 
Step:   15000, Reward: -25.233 [15.108], Avg: -28.283 (1.0000) <0-00:12:20> 
Step:   16000, Reward: -31.37 [9.895], Avg: -28.465 (1.0000) <0-00:13:09> 
Step:   17000, Reward: -21.65 [24.612], Avg: -28.086 (1.0000) <0-00:13:58> 
Step:   18000, Reward: -26.145 [14.777], Avg: -27.984 (1.0000) <0-00:14:46> 
Step:   19000, Reward: -20.278 [19.414], Avg: -27.599 (1.0000) <0-00:15:35> 
Step:   20000, Reward: -29.711 [14.487], Avg: -27.699 (1.0000) <0-00:16:25> 
Step:   21000, Reward: -29.623 [6.650], Avg: -27.787 (1.0000) <0-00:17:13> 
Step:   22000, Reward: -31.797 [9.008], Avg: -27.961 (1.0000) <0-00:18:02> 
Step:   23000, Reward: -20.279 [18.599], Avg: -27.641 (1.0000) <0-00:18:51> 
Step:   24000, Reward: -23.841 [19.797], Avg: -27.489 (1.0000) <0-00:19:40> 
Step:   25000, Reward: -39.665 [11.243], Avg: -27.957 (1.0000) <0-00:20:29> 
Step:   26000, Reward: -28.468 [9.942], Avg: -27.976 (1.0000) <0-00:21:18> 
Step:   27000, Reward: -35.95 [17.752], Avg: -28.261 (1.0000) <0-00:22:07> 
Step:   28000, Reward: -23.816 [29.262], Avg: -28.108 (1.0000) <0-00:22:56> 
Step:   29000, Reward: -26.45 [16.586], Avg: -28.052 (1.0000) <0-00:23:45> 
Step:   30000, Reward: -38.234 [18.074], Avg: -28.381 (1.0000) <0-00:24:34> 
Step:   31000, Reward: -27.104 [28.404], Avg: -28.341 (1.0000) <0-00:25:23> 
Step:   32000, Reward: -11.897 [32.751], Avg: -27.843 (1.0000) <0-00:26:12> 
Step:   33000, Reward: -14.569 [34.659], Avg: -27.452 (1.0000) <0-00:27:00> 
Step:   34000, Reward: -17.01 [35.035], Avg: -27.154 (1.0000) <0-00:27:50> 
Step:   35000, Reward: -13.668 [37.162], Avg: -26.779 (1.0000) <0-00:28:39> 
Step:   36000, Reward: -9.309 [47.224], Avg: -26.307 (1.0000) <0-00:29:27> 
Step:   37000, Reward: -19.519 [26.892], Avg: -26.128 (1.0000) <0-00:30:17> 
Step:   38000, Reward: -12.905 [33.252], Avg: -25.789 (1.0000) <0-00:31:06> 
Step:   39000, Reward: 1.053 [62.582], Avg: -25.118 (1.0000) <0-00:31:55> 
Step:   40000, Reward: 52.102 [77.522], Avg: -23.235 (1.0000) <0-00:32:43> 
Step:   41000, Reward: 30.291 [92.022], Avg: -21.96 (1.0000) <0-00:33:33> 
Step:   42000, Reward: 81.231 [110.456], Avg: -19.561 (1.0000) <0-00:34:21> 
Step:   43000, Reward: 94.777 [120.436], Avg: -16.962 (1.0000) <0-00:35:10> 
Step:   44000, Reward: 91.115 [136.386], Avg: -14.56 (1.0000) <0-00:35:59> 
Step:   45000, Reward: 223.047 [147.665], Avg: -9.395 (1.0000) <0-00:36:47> 
Step:   46000, Reward: 250.83 [161.904], Avg: -3.858 (1.0000) <0-00:37:36> 
Step:   47000, Reward: 350.82 [209.750], Avg: 3.531 (1.0000) <0-00:38:25> 
Step:   48000, Reward: 369.838 [207.726], Avg: 11.006 (1.0000) <0-00:39:14> 
Step:   49000, Reward: 228.663 [201.256], Avg: 15.36 (1.0000) <0-00:40:03> 
Step:   50000, Reward: 435.321 [156.368], Avg: 23.594 (1.0000) <0-00:40:52> 
Step:   51000, Reward: 498.443 [123.763], Avg: 32.726 (1.0000) <0-00:41:41> 
Step:   52000, Reward: 483.762 [149.521], Avg: 41.236 (1.0000) <0-00:42:30> 
Step:   53000, Reward: 565.761 [202.123], Avg: 50.949 (1.0000) <0-00:43:19> 
Step:   54000, Reward: 551.777 [264.527], Avg: 60.055 (1.0000) <0-00:44:07> 
Step:   55000, Reward: 571.694 [216.008], Avg: 69.192 (1.0000) <0-00:44:56> 
