Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: CarRacing-v0/pytorch, Date: 23/03/2020 23:10:05
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: bdf3edfce3f9915e7fed852cdd58b3287d3412d7
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.ImgStack object at 0x7ff9dd308be0>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action_in=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = self.dist(action_mu, action_sig)
		action = dist.sample() if action_in is None else action_in.argmax(-1) if self.discrete else action_in
		action_out = one_hot_from_indices(action, action_mu.size(-1)) if self.discrete else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action_out, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -34.061 [4.471], Avg: -34.061 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -34.35 [2.999], Avg: -34.206 (1.0000) <0-00:00:48> 
Step:    2000, Reward: -30.661 [4.240], Avg: -33.024 (1.0000) <0-00:01:57> 
Step:    3000, Reward: -29.597 [3.855], Avg: -32.167 (1.0000) <0-00:03:16> 
Step:    4000, Reward: -28.904 [5.750], Avg: -31.515 (1.0000) <0-00:04:36> 
Step:    5000, Reward: -22.036 [10.101], Avg: -29.935 (1.0000) <0-00:05:58> 
Step:    6000, Reward: -23.067 [8.733], Avg: -28.954 (1.0000) <0-00:07:18> 
Step:    7000, Reward: -19.997 [8.658], Avg: -27.834 (1.0000) <0-00:08:38> 
Step:    8000, Reward: -23.155 [9.653], Avg: -27.314 (1.0000) <0-00:09:57> 
Step:    9000, Reward: -23.638 [10.730], Avg: -26.947 (1.0000) <0-00:11:20> 
Step:   10000, Reward: -21.176 [10.810], Avg: -26.422 (1.0000) <0-00:12:40> 
Step:   11000, Reward: -20.111 [15.367], Avg: -25.896 (1.0000) <0-00:14:00> 
Step:   12000, Reward: -21.388 [12.845], Avg: -25.549 (1.0000) <0-00:15:19> 
Step:   13000, Reward: -21.047 [12.672], Avg: -25.228 (1.0000) <0-00:16:39> 
Step:   14000, Reward: -28.614 [12.844], Avg: -25.453 (1.0000) <0-00:17:58> 
Step:   15000, Reward: -27.024 [15.152], Avg: -25.552 (1.0000) <0-00:19:17> 
Step:   16000, Reward: -27.407 [18.205], Avg: -25.661 (1.0000) <0-00:20:37> 
Step:   17000, Reward: -25.552 [12.760], Avg: -25.655 (1.0000) <0-00:21:58> 
Step:   18000, Reward: -30.28 [19.424], Avg: -25.898 (1.0000) <0-00:23:18> 
Step:   19000, Reward: -31.402 [14.855], Avg: -26.173 (1.0000) <0-00:24:39> 
Step:   20000, Reward: -21.373 [12.464], Avg: -25.945 (1.0000) <0-00:25:59> 
Step:   21000, Reward: -31.433 [14.467], Avg: -26.194 (1.0000) <0-00:27:20> 
Step:   22000, Reward: -21.945 [21.710], Avg: -26.009 (1.0000) <0-00:28:40> 
Step:   23000, Reward: -36.158 [12.027], Avg: -26.432 (1.0000) <0-00:30:00> 
Step:   24000, Reward: -25.739 [16.611], Avg: -26.405 (1.0000) <0-00:31:20> 
Step:   25000, Reward: -23.503 [12.027], Avg: -26.293 (1.0000) <0-00:32:39> 
Step:   26000, Reward: -23.748 [26.481], Avg: -26.199 (1.0000) <0-00:33:58> 
Step:   27000, Reward: -25.188 [14.715], Avg: -26.163 (1.0000) <0-00:35:18> 
Step:   28000, Reward: -20.933 [30.383], Avg: -25.982 (1.0000) <0-00:36:37> 
Step:   29000, Reward: -8.764 [27.403], Avg: -25.408 (1.0000) <0-00:37:57> 
Step:   30000, Reward: -25.155 [14.838], Avg: -25.4 (1.0000) <0-00:39:18> 
Step:   31000, Reward: -4.514 [30.327], Avg: -24.748 (1.0000) <0-00:40:37> 
Step:   32000, Reward: -7.365 [24.153], Avg: -24.221 (1.0000) <0-00:41:58> 
Step:   33000, Reward: 4.476 [38.511], Avg: -23.377 (1.0000) <0-00:43:18> 
Step:   34000, Reward: -8.622 [27.043], Avg: -22.955 (1.0000) <0-00:44:39> 
Step:   35000, Reward: -8.631 [29.359], Avg: -22.557 (1.0000) <0-00:45:58> 
Step:   36000, Reward: -22.731 [35.683], Avg: -22.562 (1.0000) <0-00:47:17> 
Step:   37000, Reward: -11.762 [29.691], Avg: -22.278 (1.0000) <0-00:48:38> 
Step:   38000, Reward: -1.756 [38.297], Avg: -21.752 (1.0000) <0-00:49:57> 
Step:   39000, Reward: 16.099 [49.472], Avg: -20.805 (1.0000) <0-00:51:16> 
Step:   40000, Reward: 10.095 [48.186], Avg: -20.052 (1.0000) <0-00:52:35> 
Step:   41000, Reward: 20.779 [33.590], Avg: -19.079 (1.0000) <0-00:53:55> 
Step:   42000, Reward: 15.246 [65.271], Avg: -18.281 (1.0000) <0-00:55:14> 
Step:   43000, Reward: 54.307 [59.164], Avg: -16.631 (1.0000) <0-00:56:35> 
Step:   44000, Reward: 32.293 [71.203], Avg: -15.544 (1.0000) <0-00:57:54> 
Step:   45000, Reward: 41.154 [55.848], Avg: -14.312 (1.0000) <0-00:59:14> 
Step:   46000, Reward: 46.646 [80.173], Avg: -13.015 (1.0000) <0-01:00:33> 
Step:   47000, Reward: 75.674 [89.178], Avg: -11.167 (1.0000) <0-01:01:51> 
Step:   48000, Reward: 77.835 [108.474], Avg: -9.351 (1.0000) <0-01:03:11> 
Step:   49000, Reward: 121.092 [105.505], Avg: -6.742 (1.0000) <0-01:04:30> 
Step:   50000, Reward: 102.183 [83.203], Avg: -4.606 (1.0000) <0-01:05:48> 
Step:   51000, Reward: 149.394 [128.536], Avg: -1.645 (1.0000) <0-01:07:09> 
Step:   52000, Reward: 162.733 [152.640], Avg: 1.457 (1.0000) <0-01:08:29> 
Step:   53000, Reward: 171.262 [169.417], Avg: 4.601 (1.0000) <0-01:09:49> 
Step:   54000, Reward: 218.074 [136.725], Avg: 8.483 (1.0000) <0-01:11:09> 
Step:   55000, Reward: 254.918 [178.166], Avg: 12.883 (1.0000) <0-01:12:29> 
Step:   56000, Reward: 310.149 [172.143], Avg: 18.099 (1.0000) <0-01:13:49> 
Step:   57000, Reward: 319.036 [160.817], Avg: 23.287 (1.0000) <0-01:15:09> 
Step:   58000, Reward: 383.172 [220.803], Avg: 29.387 (1.0000) <0-01:16:28> 
Step:   59000, Reward: 441.149 [139.275], Avg: 36.25 (1.0000) <0-01:17:49> 
Step:   60000, Reward: 435.389 [184.227], Avg: 42.793 (1.0000) <0-01:19:08> 
Step:   61000, Reward: 517.468 [152.095], Avg: 50.449 (1.0000) <0-01:20:27> 
Step:   62000, Reward: 465.774 [186.605], Avg: 57.041 (1.0000) <0-01:21:47> 
Step:   63000, Reward: 551.171 [179.805], Avg: 64.762 (1.0000) <0-01:23:06> 
Step:   64000, Reward: 492.52 [161.897], Avg: 71.343 (1.0000) <0-01:24:25> 
Step:   65000, Reward: 550.179 [146.617], Avg: 78.598 (1.0000) <0-01:25:45> 
Step:   66000, Reward: 496.924 [197.259], Avg: 84.842 (1.0000) <0-01:27:05> 
Step:   67000, Reward: 589.921 [151.982], Avg: 92.269 (1.0000) <0-01:28:24> 
Step:   68000, Reward: 624.517 [205.811], Avg: 99.983 (1.0000) <0-01:29:43> 
Step:   69000, Reward: 633.616 [138.000], Avg: 107.607 (1.0000) <0-01:31:02> 
Step:   70000, Reward: 529.053 [276.067], Avg: 113.542 (1.0000) <0-01:32:22> 
Step:   71000, Reward: 672.824 [256.740], Avg: 121.31 (1.0000) <0-01:33:42> 
Step:   72000, Reward: 638.711 [261.890], Avg: 128.398 (1.0000) <0-01:35:02> 
Step:   73000, Reward: 731.92 [162.451], Avg: 136.554 (1.0000) <0-01:36:24> 
Step:   74000, Reward: 710.202 [187.730], Avg: 144.202 (1.0000) <0-01:37:45> 
Step:   75000, Reward: 766.221 [181.841], Avg: 152.387 (1.0000) <0-01:39:05> 
Step:   76000, Reward: 729.453 [208.361], Avg: 159.881 (1.0000) <0-01:40:25> 
Step:   77000, Reward: 720.723 [147.879], Avg: 167.071 (1.0000) <0-01:41:45> 
Step:   78000, Reward: 708.664 [221.763], Avg: 173.927 (1.0000) <0-01:43:05> 
Step:   79000, Reward: 793.71 [136.646], Avg: 181.674 (1.0000) <0-01:44:26> 
Step:   80000, Reward: 759.617 [189.411], Avg: 188.809 (1.0000) <0-01:45:47> 
Step:   81000, Reward: 791.742 [125.660], Avg: 196.162 (1.0000) <0-01:47:07> 
Step:   82000, Reward: 793.929 [141.345], Avg: 203.364 (1.0000) <0-01:48:26> 
Step:   83000, Reward: 786.807 [192.554], Avg: 210.31 (1.0000) <0-01:49:45> 
Step:   84000, Reward: 812.486 [108.159], Avg: 217.394 (1.0000) <0-01:51:06> 
Step:   85000, Reward: 759.769 [199.819], Avg: 223.701 (1.0000) <0-01:52:26> 
Step:   86000, Reward: 803.312 [147.812], Avg: 230.363 (1.0000) <0-01:53:43> 
Step:   87000, Reward: 767.68 [179.991], Avg: 236.469 (1.0000) <0-01:55:03> 
Step:   88000, Reward: 744.947 [233.388], Avg: 242.182 (1.0000) <0-01:56:23> 
Step:   89000, Reward: 815.155 [170.318], Avg: 248.549 (1.0000) <0-01:57:47> 
Step:   90000, Reward: 878.047 [49.639], Avg: 255.466 (1.0000) <0-01:59:08> 
Step:   91000, Reward: 816.135 [126.522], Avg: 261.56 (1.0000) <0-02:00:29> 
Step:   92000, Reward: 764.002 [164.057], Avg: 266.963 (1.0000) <0-02:01:50> 
Step:   93000, Reward: 756.608 [175.062], Avg: 272.172 (1.0000) <0-02:03:11> 
Step:   94000, Reward: 733.264 [170.747], Avg: 277.026 (1.0000) <0-02:04:31> 
Step:   95000, Reward: 741.118 [177.056], Avg: 281.86 (1.0000) <0-02:05:51> 
Step:   96000, Reward: 822.39 [74.572], Avg: 287.432 (1.0000) <0-02:07:12> 
Step:   97000, Reward: 766.152 [188.159], Avg: 292.317 (1.0000) <0-02:08:31> 
Step:   98000, Reward: 795.288 [95.075], Avg: 297.398 (1.0000) <0-02:09:53> 
Step:   99000, Reward: 763.589 [133.270], Avg: 302.06 (1.0000) <0-02:11:13> 
Step:  100000, Reward: 821.328 [113.250], Avg: 307.201 (1.0000) <0-02:12:33> 
Step:  101000, Reward: 828.774 [82.623], Avg: 312.314 (1.0000) <0-02:13:53> 
Step:  102000, Reward: 818.463 [148.717], Avg: 317.229 (1.0000) <0-02:15:18> 
Step:  103000, Reward: 792.499 [195.265], Avg: 321.798 (1.0000) <0-02:16:38> 
Step:  104000, Reward: 809.814 [108.876], Avg: 326.446 (1.0000) <0-02:17:59> 
Step:  105000, Reward: 739.029 [199.520], Avg: 330.339 (1.0000) <0-02:19:19> 
Step:  106000, Reward: 827.369 [157.653], Avg: 334.984 (1.0000) <0-02:20:39> 
Step:  107000, Reward: 875.35 [75.925], Avg: 339.987 (1.0000) <0-02:22:00> 
Step:  108000, Reward: 805.643 [173.012], Avg: 344.259 (1.0000) <0-02:23:21> 
Step:  109000, Reward: 739.048 [204.095], Avg: 347.848 (1.0000) <0-02:24:41> 
Step:  110000, Reward: 771.536 [198.966], Avg: 351.665 (1.0000) <0-02:26:02> 
Step:  111000, Reward: 824.012 [141.280], Avg: 355.883 (1.0000) <0-02:27:21> 
Step:  112000, Reward: 756.258 [233.730], Avg: 359.426 (1.0000) <0-02:28:41> 
Step:  113000, Reward: 773.551 [225.175], Avg: 363.058 (1.0000) <0-02:30:02> 
Step:  114000, Reward: 791.182 [121.760], Avg: 366.781 (1.0000) <0-02:31:22> 
Step:  115000, Reward: 833.815 [130.302], Avg: 370.807 (1.0000) <0-02:32:44> 
Step:  116000, Reward: 889.678 [29.828], Avg: 375.242 (1.0000) <0-02:34:04> 
Step:  117000, Reward: 802.619 [149.081], Avg: 378.864 (1.0000) <0-02:35:22> 
Step:  118000, Reward: 798.235 [163.198], Avg: 382.388 (1.0000) <0-02:36:39> 
Step:  119000, Reward: 789.772 [213.327], Avg: 385.783 (1.0000) <0-02:38:04> 
Step:  120000, Reward: 771.865 [195.038], Avg: 388.974 (1.0000) <0-02:39:24> 
Step:  121000, Reward: 809.71 [154.765], Avg: 392.422 (1.0000) <0-02:40:46> 
Step:  122000, Reward: 777.617 [197.791], Avg: 395.554 (1.0000) <0-02:42:06> 
Step:  123000, Reward: 886.463 [33.101], Avg: 399.513 (1.0000) <0-02:43:27> 
Step:  124000, Reward: 851.596 [90.504], Avg: 403.13 (1.0000) <0-02:44:47> 
Step:  125000, Reward: 802.608 [172.214], Avg: 406.3 (1.0000) <0-02:46:09> 
Step:  126000, Reward: 778.377 [186.465], Avg: 409.23 (1.0000) <0-02:47:29> 
Step:  127000, Reward: 855.596 [59.324], Avg: 412.717 (1.0000) <0-02:48:44> 
Step:  128000, Reward: 788.408 [155.188], Avg: 415.629 (1.0000) <0-02:50:04> 
Step:  129000, Reward: 820.713 [139.664], Avg: 418.745 (1.0000) <0-02:51:24> 
Step:  130000, Reward: 798.917 [124.362], Avg: 421.647 (1.0000) <0-02:52:48> 
Step:  131000, Reward: 861.735 [38.015], Avg: 424.981 (1.0000) <0-02:54:09> 
Step:  132000, Reward: 859.97 [69.244], Avg: 428.252 (1.0000) <0-02:55:29> 
Step:  133000, Reward: 825.021 [113.640], Avg: 431.213 (1.0000) <0-02:56:48> 
Step:  134000, Reward: 863.7 [121.247], Avg: 434.417 (1.0000) <0-02:58:05> 
Step:  135000, Reward: 842.332 [124.899], Avg: 437.416 (1.0000) <0-02:59:25> 
Step:  136000, Reward: 839.214 [150.728], Avg: 440.349 (1.0000) <0-03:00:46> 
Step:  137000, Reward: 854.61 [131.781], Avg: 443.351 (1.0000) <0-03:02:06> 
Step:  138000, Reward: 872.934 [68.445], Avg: 446.441 (1.0000) <0-03:03:31> 
Step:  139000, Reward: 890.642 [31.570], Avg: 449.614 (1.0000) <0-03:04:51> 
Step:  140000, Reward: 872.799 [47.156], Avg: 452.615 (1.0000) <0-03:06:12> 
Step:  141000, Reward: 877.997 [24.092], Avg: 455.611 (1.0000) <0-03:07:33> 
Step:  142000, Reward: 801.369 [152.898], Avg: 458.029 (1.0000) <0-03:08:50> 
Step:  143000, Reward: 856.495 [62.841], Avg: 460.796 (1.0000) <0-03:10:13> 
Step:  144000, Reward: 836.646 [132.705], Avg: 463.388 (1.0000) <0-03:11:33> 
Step:  145000, Reward: 860.883 [75.231], Avg: 466.111 (1.0000) <0-03:12:49> 
Step:  146000, Reward: 864.131 [37.066], Avg: 468.818 (1.0000) <0-03:14:10> 
Step:  147000, Reward: 856.828 [44.600], Avg: 471.44 (1.0000) <0-03:15:31> 
Step:  148000, Reward: 854.336 [158.132], Avg: 474.01 (1.0000) <0-03:16:51> 
Step:  149000, Reward: 839.717 [103.622], Avg: 476.448 (1.0000) <0-03:18:12> 
Step:  150000, Reward: 842.985 [97.361], Avg: 478.875 (1.0000) <0-03:19:31> 
Step:  151000, Reward: 863.114 [98.334], Avg: 481.403 (1.0000) <0-03:20:54> 
Step:  152000, Reward: 812.719 [186.436], Avg: 483.569 (1.0000) <0-03:22:14> 
Step:  153000, Reward: 839.99 [116.189], Avg: 485.883 (1.0000) <0-03:23:36> 
Step:  154000, Reward: 892.211 [46.742], Avg: 488.505 (1.0000) <0-03:24:52> 
Step:  155000, Reward: 877.892 [32.078], Avg: 491.001 (1.0000) <0-03:26:12> 
Step:  156000, Reward: 883.36 [52.044], Avg: 493.5 (1.0000) <0-03:27:34> 
Step:  157000, Reward: 876.88 [33.786], Avg: 495.926 (1.0000) <0-03:28:56> 
Step:  158000, Reward: 808.576 [192.999], Avg: 497.892 (1.0000) <0-03:30:16> 
Step:  159000, Reward: 845.649 [93.297], Avg: 500.066 (1.0000) <0-03:31:36> 
