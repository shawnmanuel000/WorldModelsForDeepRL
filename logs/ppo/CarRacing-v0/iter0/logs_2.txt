Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: CarRacing-v0/iter0, Date: 25/03/2020 09:51:07
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
GPU 1: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 75217ee4675634f8777811ed51c7de0078811309
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7fcc3c06fb38>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.1				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action_in=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = self.dist(action_mu, action_sig)
		action = dist.sample() if action_in is None else action_in.argmax(-1) if self.discrete else action_in
		action_out = one_hot_from_indices(action, action_mu.size(-1)) if self.discrete else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action_out, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
				
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -48.538 [3.790], Avg: -48.538 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -51.941 [3.408], Avg: -50.24 (1.0000) <0-00:01:18> 
Step:    2000, Reward: -50.053 [5.773], Avg: -50.177 (1.0000) <0-00:02:36> 
Step:    3000, Reward: -46.602 [5.300], Avg: -49.284 (1.0000) <0-00:03:53> 
Step:    4000, Reward: -47.542 [4.215], Avg: -48.935 (1.0000) <0-00:05:11> 
Step:    5000, Reward: -44.33 [5.908], Avg: -48.168 (1.0000) <0-00:06:29> 
Step:    6000, Reward: -44.015 [3.851], Avg: -47.574 (1.0000) <0-00:07:48> 
Step:    7000, Reward: -39.074 [3.448], Avg: -46.512 (1.0000) <0-00:09:06> 
Step:    8000, Reward: -36.286 [5.133], Avg: -45.376 (1.0000) <0-00:10:24> 
Step:    9000, Reward: -29.574 [5.608], Avg: -43.796 (1.0000) <0-00:11:41> 
Step:   10000, Reward: -28.82 [4.744], Avg: -42.434 (1.0000) <0-00:12:58> 
Step:   11000, Reward: -31.069 [5.775], Avg: -41.487 (1.0000) <0-00:14:17> 
Step:   12000, Reward: -25.178 [8.199], Avg: -40.232 (1.0000) <0-00:15:34> 
Step:   13000, Reward: -27.76 [6.955], Avg: -39.342 (1.0000) <0-00:16:53> 
Step:   14000, Reward: -26.951 [9.150], Avg: -38.516 (1.0000) <0-00:18:12> 
Step:   15000, Reward: -28.786 [8.084], Avg: -37.907 (1.0000) <0-00:19:31> 
Step:   16000, Reward: -25.005 [9.130], Avg: -37.148 (1.0000) <0-00:20:50> 
Step:   17000, Reward: -23.055 [10.764], Avg: -36.366 (1.0000) <0-00:22:09> 
Step:   18000, Reward: -23.659 [10.888], Avg: -35.697 (1.0000) <0-00:23:27> 
Step:   19000, Reward: -27.025 [14.047], Avg: -35.263 (1.0000) <0-00:24:45> 
Step:   20000, Reward: -26.876 [9.922], Avg: -34.864 (1.0000) <0-00:26:03> 
Step:   21000, Reward: -27.891 [12.715], Avg: -34.547 (1.0000) <0-00:27:21> 
Step:   22000, Reward: -16.996 [20.981], Avg: -33.784 (1.0000) <0-00:28:39> 
Step:   23000, Reward: -25.134 [18.958], Avg: -33.423 (1.0000) <0-00:29:56> 
Step:   24000, Reward: -27.553 [21.349], Avg: -33.189 (1.0000) <0-00:31:15> 
Step:   25000, Reward: -18.832 [27.634], Avg: -32.636 (1.0000) <0-00:32:33> 
Step:   26000, Reward: -23.813 [20.761], Avg: -32.31 (1.0000) <0-00:33:51> 
Step:   27000, Reward: -40.406 [13.461], Avg: -32.599 (1.0000) <0-00:35:11> 
Step:   28000, Reward: -40.082 [15.393], Avg: -32.857 (1.0000) <0-00:36:29> 
Step:   29000, Reward: -32.248 [31.030], Avg: -32.836 (1.0000) <0-00:37:46> 
Step:   30000, Reward: -36.454 [15.897], Avg: -32.953 (1.0000) <0-00:39:05> 
Step:   31000, Reward: -30.721 [11.976], Avg: -32.883 (1.0000) <0-00:40:23> 
Step:   32000, Reward: -21.743 [24.997], Avg: -32.546 (1.0000) <0-00:41:41> 
Step:   33000, Reward: -15.725 [39.311], Avg: -32.051 (1.0000) <0-00:42:59> 
Step:   34000, Reward: -19.152 [30.779], Avg: -31.683 (1.0000) <0-00:44:16> 
Step:   35000, Reward: -2.491 [45.674], Avg: -30.872 (1.0000) <0-00:45:34> 
Step:   36000, Reward: 21.074 [71.761], Avg: -29.468 (1.0000) <0-00:46:54> 
Step:   37000, Reward: 31.864 [85.454], Avg: -27.854 (1.0000) <0-00:48:12> 
Step:   38000, Reward: 71.814 [94.485], Avg: -25.298 (1.0000) <0-00:49:29> 
Step:   39000, Reward: 168.313 [185.844], Avg: -20.458 (1.0000) <0-00:50:47> 
Step:   40000, Reward: 117.282 [149.835], Avg: -17.098 (1.0000) <0-00:52:05> 
Step:   41000, Reward: 197.111 [187.362], Avg: -11.998 (1.0000) <0-00:53:22> 
Step:   42000, Reward: 161.412 [123.500], Avg: -7.965 (1.0000) <0-00:54:40> 
Step:   43000, Reward: 231.2 [189.608], Avg: -2.53 (1.0000) <0-00:56:00> 
Step:   44000, Reward: 370.773 [248.649], Avg: 5.766 (1.0000) <0-00:57:18> 
Step:   45000, Reward: 442.743 [163.785], Avg: 15.265 (1.0000) <0-00:58:37> 
Step:   46000, Reward: 382.304 [231.669], Avg: 23.075 (1.0000) <0-00:59:56> 
Step:   47000, Reward: 362.262 [222.420], Avg: 30.141 (1.0000) <0-01:01:15> 
Step:   48000, Reward: 458.787 [254.391], Avg: 38.889 (1.0000) <0-01:02:32> 
Step:   49000, Reward: 389.039 [211.594], Avg: 45.892 (1.0000) <0-01:03:51> 
Step:   50000, Reward: 527.919 [261.484], Avg: 55.343 (1.0000) <0-01:05:09> 
Step:   51000, Reward: 427.83 [207.936], Avg: 62.507 (1.0000) <0-01:06:27> 
Step:   52000, Reward: 531.783 [264.395], Avg: 71.361 (1.0000) <0-01:07:45> 
Step:   53000, Reward: 611.85 [224.296], Avg: 81.37 (1.0000) <0-01:09:06> 
Step:   54000, Reward: 676.638 [177.307], Avg: 92.193 (1.0000) <0-01:10:25> 
Step:   55000, Reward: 527.987 [294.875], Avg: 99.975 (1.0000) <0-01:11:43> 
Step:   56000, Reward: 563.322 [257.300], Avg: 108.104 (1.0000) <0-01:13:03> 
Step:   57000, Reward: 602.123 [247.008], Avg: 116.622 (1.0000) <0-01:14:23> 
Step:   58000, Reward: 793.246 [113.936], Avg: 128.09 (1.0000) <0-01:15:43> 
Step:   59000, Reward: 774.51 [149.532], Avg: 138.863 (1.0000) <0-01:17:01> 
Step:   60000, Reward: 762.36 [212.582], Avg: 149.085 (1.0000) <0-01:18:18> 
Step:   61000, Reward: 776.614 [176.205], Avg: 159.206 (1.0000) <0-01:19:36> 
Step:   62000, Reward: 771.053 [160.961], Avg: 168.918 (1.0000) <0-01:20:55> 
Step:   63000, Reward: 760.372 [158.688], Avg: 178.159 (1.0000) <0-01:22:14> 
Step:   64000, Reward: 797.026 [162.959], Avg: 187.68 (1.0000) <0-01:23:32> 
Step:   65000, Reward: 766.575 [209.463], Avg: 196.452 (1.0000) <0-01:24:51> 
Step:   66000, Reward: 779.414 [168.165], Avg: 205.153 (1.0000) <0-01:26:09> 
Step:   67000, Reward: 867.453 [61.134], Avg: 214.892 (1.0000) <0-01:27:28> 
Step:   68000, Reward: 768.113 [215.468], Avg: 222.91 (1.0000) <0-01:28:46> 
Step:   69000, Reward: 814.233 [99.396], Avg: 231.357 (1.0000) <0-01:30:04> 
Step:   70000, Reward: 843.751 [112.626], Avg: 239.983 (1.0000) <0-01:31:22> 
Step:   71000, Reward: 808.251 [172.705], Avg: 247.875 (1.0000) <0-01:32:41> 
Step:   72000, Reward: 791.425 [80.295], Avg: 255.321 (1.0000) <0-01:33:59> 
Step:   73000, Reward: 813.841 [80.183], Avg: 262.869 (1.0000) <0-01:35:17> 
Step:   74000, Reward: 804.487 [200.165], Avg: 270.09 (1.0000) <0-01:36:35> 
Step:   75000, Reward: 806.681 [146.895], Avg: 277.151 (1.0000) <0-01:37:53> 
Step:   76000, Reward: 786.638 [168.802], Avg: 283.767 (1.0000) <0-01:39:11> 
Step:   77000, Reward: 836.27 [65.934], Avg: 290.851 (1.0000) <0-01:40:29> 
Step:   78000, Reward: 842.83 [82.045], Avg: 297.838 (1.0000) <0-01:41:48> 
Step:   79000, Reward: 832.443 [89.664], Avg: 304.52 (1.0000) <0-01:43:07> 
Step:   80000, Reward: 782.945 [147.116], Avg: 310.427 (1.0000) <0-01:44:25> 
Step:   81000, Reward: 784.189 [173.785], Avg: 316.205 (1.0000) <0-01:45:43> 
Step:   82000, Reward: 852.097 [58.883], Avg: 322.661 (1.0000) <0-01:47:01> 
Step:   83000, Reward: 828.588 [135.266], Avg: 328.684 (1.0000) <0-01:48:18> 
Step:   84000, Reward: 837.242 [88.297], Avg: 334.667 (1.0000) <0-01:49:37> 
Step:   85000, Reward: 778.636 [206.247], Avg: 339.829 (1.0000) <0-01:50:58> 
Step:   86000, Reward: 770.521 [187.211], Avg: 344.78 (1.0000) <0-01:52:16> 
Step:   87000, Reward: 772.822 [173.125], Avg: 349.644 (1.0000) <0-01:53:34> 
Step:   88000, Reward: 737.53 [164.110], Avg: 354.002 (1.0000) <0-01:54:52> 
Step:   89000, Reward: 674.073 [280.189], Avg: 357.559 (1.0000) <0-01:56:11> 
Step:   90000, Reward: 739.792 [158.349], Avg: 361.759 (1.0000) <0-01:57:29> 
Step:   91000, Reward: 699.441 [279.961], Avg: 365.429 (1.0000) <0-01:58:47> 
Step:   92000, Reward: 863.159 [44.721], Avg: 370.781 (1.0000) <0-02:00:05> 
Step:   93000, Reward: 787.769 [191.568], Avg: 375.217 (1.0000) <0-02:01:23> 
Step:   94000, Reward: 857.916 [43.722], Avg: 380.298 (1.0000) <0-02:02:41> 
Step:   95000, Reward: 809.743 [114.170], Avg: 384.772 (1.0000) <0-02:04:00> 
Step:   96000, Reward: 716.013 [224.460], Avg: 388.187 (1.0000) <0-02:05:16> 
Step:   97000, Reward: 770.068 [170.001], Avg: 392.083 (1.0000) <0-02:06:34> 
Step:   98000, Reward: 752.356 [227.952], Avg: 395.723 (1.0000) <0-02:07:52> 
Step:   99000, Reward: 742.781 [196.642], Avg: 399.193 (1.0000) <0-02:09:11> 
Step:  100000, Reward: 833.735 [99.277], Avg: 403.496 (1.0000) <0-02:10:30> 
Step:  101000, Reward: 787.891 [165.840], Avg: 407.264 (1.0000) <0-02:11:48> 
Step:  102000, Reward: 826.479 [124.336], Avg: 411.334 (1.0000) <0-02:13:06> 
Step:  103000, Reward: 810.97 [153.853], Avg: 415.177 (1.0000) <0-02:14:24> 
Step:  104000, Reward: 830.828 [100.883], Avg: 419.135 (1.0000) <0-02:15:42> 
Step:  105000, Reward: 795.073 [166.635], Avg: 422.682 (1.0000) <0-02:17:03> 
Step:  106000, Reward: 825.866 [165.104], Avg: 426.45 (1.0000) <0-02:18:22> 
Step:  107000, Reward: 861.823 [47.661], Avg: 430.481 (1.0000) <0-02:19:41> 
Step:  108000, Reward: 882.414 [47.382], Avg: 434.627 (1.0000) <0-02:20:58> 
Step:  109000, Reward: 804.711 [219.640], Avg: 437.992 (1.0000) <0-02:22:17> 
Step:  110000, Reward: 840.936 [83.103], Avg: 441.622 (1.0000) <0-02:23:36> 
Step:  111000, Reward: 865.89 [76.316], Avg: 445.41 (1.0000) <0-02:24:53> 
Step:  112000, Reward: 817.716 [114.430], Avg: 448.705 (1.0000) <0-02:26:11> 
Step:  113000, Reward: 855.171 [67.746], Avg: 452.27 (1.0000) <0-02:27:30> 
Step:  114000, Reward: 754.887 [210.412], Avg: 454.902 (1.0000) <0-02:28:50> 
Step:  115000, Reward: 845.533 [137.610], Avg: 458.269 (1.0000) <0-02:30:08> 
Step:  116000, Reward: 841.226 [106.494], Avg: 461.542 (1.0000) <0-02:31:26> 
Step:  117000, Reward: 821.548 [137.155], Avg: 464.593 (1.0000) <0-02:32:45> 
Step:  118000, Reward: 728.565 [204.063], Avg: 466.812 (1.0000) <0-02:34:03> 
Step:  119000, Reward: 813.195 [92.557], Avg: 469.698 (1.0000) <0-02:35:23> 
Step:  120000, Reward: 771.315 [213.755], Avg: 472.191 (1.0000) <0-02:36:43> 
Step:  121000, Reward: 787.422 [152.989], Avg: 474.775 (1.0000) <0-02:38:02> 
Step:  122000, Reward: 819.921 [195.134], Avg: 477.581 (1.0000) <0-02:39:19> 
Step:  123000, Reward: 872.774 [50.053], Avg: 480.768 (1.0000) <0-02:40:35> 
Step:  124000, Reward: 853.173 [77.295], Avg: 483.747 (1.0000) <0-02:41:53> 
Step:  125000, Reward: 859.396 [76.325], Avg: 486.728 (1.0000) <0-02:43:13> 
Step:  126000, Reward: 799.774 [197.231], Avg: 489.193 (1.0000) <0-02:44:30> 
Step:  127000, Reward: 823.747 [153.615], Avg: 491.807 (1.0000) <0-02:45:50> 
Step:  128000, Reward: 857.273 [77.063], Avg: 494.64 (1.0000) <0-02:47:08> 
Step:  129000, Reward: 758.321 [200.259], Avg: 496.668 (1.0000) <0-02:48:26> 
Step:  130000, Reward: 811.202 [200.987], Avg: 499.069 (1.0000) <0-02:49:44> 
Step:  131000, Reward: 691.106 [237.937], Avg: 500.524 (1.0000) <0-02:51:02> 
Step:  132000, Reward: 854.988 [132.961], Avg: 503.189 (1.0000) <0-02:52:22> 
Step:  133000, Reward: 820.008 [114.614], Avg: 505.554 (1.0000) <0-02:53:40> 
Step:  134000, Reward: 801.764 [158.795], Avg: 507.748 (1.0000) <0-02:54:57> 
Step:  135000, Reward: 713.511 [230.358], Avg: 509.261 (1.0000) <0-02:56:15> 
Step:  136000, Reward: 758.882 [220.264], Avg: 511.083 (1.0000) <0-02:57:34> 
Step:  137000, Reward: 781.481 [187.172], Avg: 513.042 (1.0000) <0-02:58:52> 
Step:  138000, Reward: 837.517 [72.731], Avg: 515.377 (1.0000) <0-03:00:11> 
Step:  139000, Reward: 799.252 [92.754], Avg: 517.404 (1.0000) <0-03:01:29> 
Step:  140000, Reward: 824.89 [151.102], Avg: 519.585 (1.0000) <0-03:02:46> 
Step:  141000, Reward: 740.126 [180.959], Avg: 521.138 (1.0000) <0-03:04:05> 
Step:  142000, Reward: 702.058 [243.321], Avg: 522.403 (1.0000) <0-03:05:22> 
Step:  143000, Reward: 796.95 [131.682], Avg: 524.31 (1.0000) <0-03:06:41> 
Step:  144000, Reward: 734.107 [186.163], Avg: 525.757 (1.0000) <0-03:07:59> 
Step:  145000, Reward: 799.283 [188.912], Avg: 527.63 (1.0000) <0-03:09:17> 
Step:  146000, Reward: 786.569 [137.668], Avg: 529.392 (1.0000) <0-03:10:36> 
Step:  147000, Reward: 784.124 [123.784], Avg: 531.113 (1.0000) <0-03:11:55> 
Step:  148000, Reward: 837.309 [75.499], Avg: 533.168 (1.0000) <0-03:13:14> 
Step:  149000, Reward: 848.942 [77.957], Avg: 535.273 (1.0000) <0-03:14:31> 
Step:  150000, Reward: 839.168 [71.217], Avg: 537.286 (1.0000) <0-03:15:50> 
Step:  151000, Reward: 802.318 [173.830], Avg: 539.029 (1.0000) <0-03:17:09> 
Step:  152000, Reward: 780.031 [147.382], Avg: 540.604 (1.0000) <0-03:18:30> 
Step:  153000, Reward: 770.133 [171.619], Avg: 542.095 (1.0000) <0-03:19:48> 
Step:  154000, Reward: 772.854 [176.597], Avg: 543.584 (1.0000) <0-03:21:07> 
Step:  155000, Reward: 797.617 [159.880], Avg: 545.212 (1.0000) <0-03:22:26> 
Step:  156000, Reward: 856.938 [63.924], Avg: 547.198 (1.0000) <0-03:23:44> 
Step:  157000, Reward: 882.393 [37.439], Avg: 549.319 (1.0000) <0-03:25:02> 
Step:  158000, Reward: 764.706 [146.842], Avg: 550.674 (1.0000) <0-03:26:21> 
Step:  159000, Reward: 711.948 [214.406], Avg: 551.682 (1.0000) <0-03:27:40> 
Step:  160000, Reward: 832.031 [120.674], Avg: 553.423 (1.0000) <0-03:29:00> 
Step:  161000, Reward: 819.549 [158.471], Avg: 555.066 (1.0000) <0-03:30:18> 
Step:  162000, Reward: 832.789 [85.450], Avg: 556.77 (1.0000) <0-03:31:37> 
Step:  163000, Reward: 800.447 [159.171], Avg: 558.255 (1.0000) <0-03:32:53> 
Step:  164000, Reward: 777.458 [129.203], Avg: 559.584 (1.0000) <0-03:34:11> 
