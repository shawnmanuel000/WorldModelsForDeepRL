Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: CarRacing-v0/iter1, Date: 24/03/2020 17:47:42
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 56691ae322b4160e26475e814b89099e839b1564
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f9344056b38>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action_in=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = self.dist(action_mu, action_sig)
		action = dist.sample() if action_in is None else action_in.argmax(-1) if self.discrete else action_in
		action_out = one_hot_from_indices(action, action_mu.size(-1)) if self.discrete else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action_out, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
				
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: -38.209 [5.356], Avg: -38.209 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -40.857 [9.891], Avg: -39.533 (1.0000) <0-00:00:48> 
Step:    2000, Reward: -34.977 [6.938], Avg: -38.014 (1.0000) <0-00:01:35> 
Step:    3000, Reward: -37.159 [4.185], Avg: -37.8 (1.0000) <0-00:02:22> 
Step:    4000, Reward: -37.171 [4.238], Avg: -37.675 (1.0000) <0-00:03:09> 
Step:    5000, Reward: -36.636 [4.583], Avg: -37.502 (1.0000) <0-00:03:57> 
Step:    6000, Reward: -32.455 [3.785], Avg: -36.781 (1.0000) <0-00:04:44> 
Step:    7000, Reward: -33.596 [6.014], Avg: -36.382 (1.0000) <0-00:05:31> 
Step:    8000, Reward: -32.819 [4.426], Avg: -35.987 (1.0000) <0-00:06:18> 
Step:    9000, Reward: -34.102 [6.849], Avg: -35.798 (1.0000) <0-00:07:06> 
Step:   10000, Reward: -32.043 [6.030], Avg: -35.457 (1.0000) <0-00:07:53> 
Step:   11000, Reward: -31.439 [5.357], Avg: -35.122 (1.0000) <0-00:08:40> 
Step:   12000, Reward: -29.671 [5.573], Avg: -34.703 (1.0000) <0-00:09:28> 
Step:   13000, Reward: -26.956 [5.737], Avg: -34.149 (1.0000) <0-00:10:15> 
Step:   14000, Reward: -28.703 [5.858], Avg: -33.786 (1.0000) <0-00:11:02> 
Step:   15000, Reward: -30.846 [6.424], Avg: -33.602 (1.0000) <0-00:11:50> 
Step:   16000, Reward: -27.585 [8.288], Avg: -33.248 (1.0000) <0-00:12:38> 
Step:   17000, Reward: -26.74 [6.316], Avg: -32.887 (1.0000) <0-00:13:25> 
Step:   18000, Reward: -19.47 [10.213], Avg: -32.181 (1.0000) <0-00:14:13> 
Step:   19000, Reward: -25.024 [8.277], Avg: -31.823 (1.0000) <0-00:15:00> 
Step:   20000, Reward: -25.026 [9.038], Avg: -31.499 (1.0000) <0-00:15:48> 
Step:   21000, Reward: -22.414 [11.881], Avg: -31.086 (1.0000) <0-00:16:35> 
Step:   22000, Reward: -24.826 [8.798], Avg: -30.814 (1.0000) <0-00:17:22> 
Step:   23000, Reward: -27.365 [11.298], Avg: -30.67 (1.0000) <0-00:18:09> 
Step:   24000, Reward: -21.502 [11.884], Avg: -30.304 (1.0000) <0-00:18:56> 
Step:   25000, Reward: -27.515 [8.519], Avg: -30.196 (1.0000) <0-00:19:44> 
Step:   26000, Reward: -28.061 [6.782], Avg: -30.117 (1.0000) <0-00:20:32> 
Step:   27000, Reward: -21.165 [17.339], Avg: -29.798 (1.0000) <0-00:21:19> 
Step:   28000, Reward: -24.715 [8.493], Avg: -29.622 (1.0000) <0-00:22:05> 
Step:   29000, Reward: -29.873 [11.898], Avg: -29.631 (1.0000) <0-00:22:52> 
Step:   30000, Reward: -30.75 [13.020], Avg: -29.667 (1.0000) <0-00:23:40> 
Step:   31000, Reward: -30.234 [10.476], Avg: -29.684 (1.0000) <0-00:24:27> 
Step:   32000, Reward: -37.001 [10.085], Avg: -29.906 (1.0000) <0-00:25:15> 
Step:   33000, Reward: -34.463 [12.196], Avg: -30.04 (1.0000) <0-00:26:02> 
Step:   34000, Reward: -39.782 [8.754], Avg: -30.319 (1.0000) <0-00:26:49> 
Step:   35000, Reward: -34.351 [15.051], Avg: -30.431 (1.0000) <0-00:27:36> 
Step:   36000, Reward: -30.94 [19.399], Avg: -30.444 (1.0000) <0-00:28:23> 
Step:   37000, Reward: -40.381 [14.950], Avg: -30.706 (1.0000) <0-00:29:10> 
Step:   38000, Reward: -37.613 [8.748], Avg: -30.883 (1.0000) <0-00:29:57> 
Step:   39000, Reward: -31.074 [14.686], Avg: -30.888 (1.0000) <0-00:30:44> 
Step:   40000, Reward: -38.098 [7.788], Avg: -31.064 (1.0000) <0-00:31:31> 
Step:   41000, Reward: -24.184 [20.761], Avg: -30.9 (1.0000) <0-00:32:18> 
Step:   42000, Reward: -30.144 [17.153], Avg: -30.882 (1.0000) <0-00:33:05> 
Step:   43000, Reward: -32.681 [13.391], Avg: -30.923 (1.0000) <0-00:33:52> 
Step:   44000, Reward: -28.237 [23.391], Avg: -30.863 (1.0000) <0-00:34:39> 
Step:   45000, Reward: -35.549 [11.496], Avg: -30.965 (1.0000) <0-00:35:26> 
Step:   46000, Reward: -33.082 [26.004], Avg: -31.01 (1.0000) <0-00:36:13> 
Step:   47000, Reward: -36.045 [12.196], Avg: -31.115 (1.0000) <0-00:37:01> 
Step:   48000, Reward: -41.947 [18.321], Avg: -31.336 (1.0000) <0-00:37:48> 
Step:   49000, Reward: -28.088 [32.751], Avg: -31.271 (1.0000) <0-00:38:35> 
Step:   50000, Reward: -37.055 [33.333], Avg: -31.385 (1.0000) <0-00:39:22> 
Step:   51000, Reward: -47.74 [12.919], Avg: -31.699 (1.0000) <0-00:40:10> 
Step:   52000, Reward: -37.802 [26.888], Avg: -31.814 (1.0000) <0-00:40:57> 
Step:   53000, Reward: -32.495 [15.022], Avg: -31.827 (1.0000) <0-00:41:44> 
Step:   54000, Reward: -24.764 [50.397], Avg: -31.699 (1.0000) <0-00:42:31> 
Step:   55000, Reward: -16.773 [31.323], Avg: -31.432 (1.0000) <0-00:43:18> 
Step:   56000, Reward: -27.566 [23.659], Avg: -31.364 (1.0000) <0-00:44:05> 
Step:   57000, Reward: -24.095 [27.443], Avg: -31.239 (1.0000) <0-00:44:52> 
Step:   58000, Reward: 2.588 [46.969], Avg: -30.666 (1.0000) <0-00:45:39> 
Step:   59000, Reward: 33.772 [49.454], Avg: -29.592 (1.0000) <0-00:46:26> 
Step:   60000, Reward: 10.204 [54.884], Avg: -28.939 (1.0000) <0-00:47:13> 
Step:   61000, Reward: 41.491 [92.405], Avg: -27.803 (1.0000) <0-00:48:01> 
Step:   62000, Reward: 84.774 [114.931], Avg: -26.016 (1.0000) <0-00:48:48> 
Step:   63000, Reward: 62.068 [93.254], Avg: -24.64 (1.0000) <0-00:49:35> 
Step:   64000, Reward: 103.676 [121.129], Avg: -22.666 (1.0000) <0-00:50:22> 
Step:   65000, Reward: 117.89 [135.881], Avg: -20.536 (1.0000) <0-00:51:08> 
Step:   66000, Reward: 174.448 [106.464], Avg: -17.626 (1.0000) <0-00:51:55> 
Step:   67000, Reward: 175.776 [124.825], Avg: -14.782 (1.0000) <0-00:52:42> 
Step:   68000, Reward: 195.18 [132.333], Avg: -11.739 (1.0000) <0-00:53:30> 
Step:   69000, Reward: 266.631 [153.727], Avg: -7.762 (1.0000) <0-00:54:17> 
Step:   70000, Reward: 184.929 [173.867], Avg: -5.048 (1.0000) <0-00:55:04> 
Step:   71000, Reward: 240.863 [192.487], Avg: -1.633 (1.0000) <0-00:55:52> 
Step:   72000, Reward: 222.879 [158.396], Avg: 1.443 (1.0000) <0-00:56:39> 
Step:   73000, Reward: 244.918 [182.552], Avg: 4.733 (1.0000) <0-00:57:26> 
Step:   74000, Reward: 150.945 [206.147], Avg: 6.682 (1.0000) <0-00:58:11> 
Step:   75000, Reward: 198.493 [202.363], Avg: 9.206 (1.0000) <0-00:58:58> 
Step:   76000, Reward: 187.763 [206.756], Avg: 11.525 (1.0000) <0-00:59:45> 
Step:   77000, Reward: 274.8 [243.142], Avg: 14.9 (1.0000) <0-01:00:33> 
Step:   78000, Reward: 352.012 [221.927], Avg: 19.168 (1.0000) <0-01:01:20> 
Step:   79000, Reward: 341.517 [299.642], Avg: 23.197 (1.0000) <0-01:02:07> 
Step:   80000, Reward: 383.259 [300.776], Avg: 27.642 (1.0000) <0-01:02:55> 
Step:   81000, Reward: 469.83 [278.386], Avg: 33.035 (1.0000) <0-01:03:42> 
Step:   82000, Reward: 308.579 [298.636], Avg: 36.355 (1.0000) <0-01:04:31> 
Step:   83000, Reward: 530.452 [278.725], Avg: 42.237 (1.0000) <0-01:05:19> 
Step:   84000, Reward: 558.855 [263.360], Avg: 48.315 (1.0000) <0-01:06:12> 
Step:   85000, Reward: 399.96 [310.150], Avg: 52.403 (1.0000) <0-01:06:59> 
Step:   86000, Reward: 446.403 [270.798], Avg: 56.932 (1.0000) <0-01:07:47> 
Step:   87000, Reward: 456.86 [299.955], Avg: 61.477 (1.0000) <0-01:08:34> 
Step:   88000, Reward: 599.027 [268.889], Avg: 67.517 (1.0000) <0-01:09:22> 
Step:   89000, Reward: 694.262 [214.869], Avg: 74.481 (1.0000) <0-01:10:09> 
Step:   90000, Reward: 482.841 [301.240], Avg: 78.968 (1.0000) <0-01:10:57> 
Step:   91000, Reward: 653.241 [254.312], Avg: 85.21 (1.0000) <0-01:11:45> 
Step:   92000, Reward: 672.611 [289.923], Avg: 91.526 (1.0000) <0-01:12:32> 
Step:   93000, Reward: 607.764 [273.880], Avg: 97.018 (1.0000) <0-01:13:19> 
Step:   94000, Reward: 686.344 [273.202], Avg: 103.222 (1.0000) <0-01:14:07> 
Step:   95000, Reward: 666.987 [266.933], Avg: 109.094 (1.0000) <0-01:14:54> 
Step:   96000, Reward: 665.027 [299.432], Avg: 114.825 (1.0000) <0-01:15:42> 
Step:   97000, Reward: 764.13 [159.397], Avg: 121.451 (1.0000) <0-01:16:29> 
Step:   98000, Reward: 742.576 [241.570], Avg: 127.725 (1.0000) <0-01:17:17> 
Step:   99000, Reward: 633.276 [254.662], Avg: 132.78 (1.0000) <0-01:18:05> 
Step:  100000, Reward: 600.452 [249.630], Avg: 137.411 (1.0000) <0-01:18:54> 
Step:  101000, Reward: 531.1 [304.464], Avg: 141.271 (1.0000) <0-01:19:41> 
Step:  102000, Reward: 606.152 [257.846], Avg: 145.784 (1.0000) <0-01:20:29> 
Step:  103000, Reward: 657.199 [231.416], Avg: 150.701 (1.0000) <0-01:21:17> 
Step:  104000, Reward: 733.248 [215.529], Avg: 156.25 (1.0000) <0-01:22:03> 
Step:  105000, Reward: 737.954 [241.114], Avg: 161.737 (1.0000) <0-01:22:51> 
Step:  106000, Reward: 628.485 [274.100], Avg: 166.099 (1.0000) <0-01:23:38> 
Step:  107000, Reward: 796.395 [121.220], Avg: 171.935 (1.0000) <0-01:24:26> 
Step:  108000, Reward: 607.694 [254.081], Avg: 175.933 (1.0000) <0-01:25:13> 
Step:  109000, Reward: 747.817 [186.195], Avg: 181.132 (1.0000) <0-01:26:01> 
Step:  110000, Reward: 818.119 [157.792], Avg: 186.871 (1.0000) <0-01:26:48> 
Step:  111000, Reward: 825.737 [114.704], Avg: 192.575 (1.0000) <0-01:27:35> 
Step:  112000, Reward: 793.441 [182.417], Avg: 197.892 (1.0000) <0-01:28:25> 
Step:  113000, Reward: 780.779 [213.153], Avg: 203.005 (1.0000) <0-01:29:11> 
Step:  114000, Reward: 805.783 [186.398], Avg: 208.247 (1.0000) <0-01:30:00> 
Step:  115000, Reward: 818.147 [196.317], Avg: 213.505 (1.0000) <0-01:30:48> 
Step:  116000, Reward: 861.355 [112.964], Avg: 219.042 (1.0000) <0-01:31:35> 
Step:  117000, Reward: 754.805 [271.851], Avg: 223.582 (1.0000) <0-01:32:22> 
Step:  118000, Reward: 803.228 [179.764], Avg: 228.453 (1.0000) <0-01:33:09> 
Step:  119000, Reward: 827.449 [173.144], Avg: 233.445 (1.0000) <0-01:33:57> 
Step:  120000, Reward: 826.798 [141.560], Avg: 238.349 (1.0000) <0-01:34:45> 
Step:  121000, Reward: 786.4 [265.984], Avg: 242.841 (1.0000) <0-01:35:32> 
Step:  122000, Reward: 803.674 [180.319], Avg: 247.4 (1.0000) <0-01:36:19> 
Step:  123000, Reward: 821.254 [112.053], Avg: 252.028 (1.0000) <0-01:37:07> 
Step:  124000, Reward: 769.579 [244.940], Avg: 256.169 (1.0000) <0-01:37:54> 
Step:  125000, Reward: 823.178 [155.742], Avg: 260.669 (1.0000) <0-01:38:42> 
