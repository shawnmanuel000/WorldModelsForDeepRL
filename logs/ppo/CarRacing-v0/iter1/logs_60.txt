Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: CarRacing-v0/iter1/, Date: 22/03/2020 20:27:01
CPU: 20 Core, 0.0GHz, 377.59 GB, Linux-4.14.167-llgrid-10ms-x86_64-with-debian-buster-sid
GPU 0: Tesla V100-PCIE-32GB, 32.51 GB (Driver: 440.33.01)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 38eb13fbd4efaa8660598c61139327578e8369f1
Branch: master

num_envs: 16,
state_size: (96, 96, 3),
action_size: (3,),
action_space: Box(3,),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.WorldModel object at 0x7f2970060a20>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, ADVANTAGE_DECAY, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		
	def forward(self, state, action=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = torch.distributions.Normal(action_mu, action_sig)
		action = dist.sample() if action is None else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=False, log=True, render=False):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=True) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load="", train=False, gpu=False, worldmodel=True).load(checkpoint)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}/"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render)

Step:       0, Reward: -30.854 [6.803], Avg: -30.854 (1.0000) <0-00:00:00> 
Step:    1000, Reward: -29.43 [6.376], Avg: -30.142 (1.0000) <0-00:01:11> 
Step:    2000, Reward: -30.553 [5.286], Avg: -30.279 (1.0000) <0-00:02:25> 
Step:    3000, Reward: -29.067 [4.807], Avg: -29.976 (1.0000) <0-00:03:36> 
Step:    4000, Reward: -27.86 [5.583], Avg: -29.553 (1.0000) <0-00:04:49> 
Step:    5000, Reward: -24.718 [4.974], Avg: -28.747 (1.0000) <0-00:06:01> 
Step:    6000, Reward: -27.738 [6.757], Avg: -28.603 (1.0000) <0-00:07:16> 
Step:    7000, Reward: -24.792 [8.238], Avg: -28.126 (1.0000) <0-00:08:30> 
Step:    8000, Reward: -24.721 [7.911], Avg: -27.748 (1.0000) <0-00:09:42> 
Step:    9000, Reward: -26.204 [8.025], Avg: -27.594 (1.0000) <0-00:10:55> 
Step:   10000, Reward: -22.714 [5.547], Avg: -27.15 (1.0000) <0-00:12:08> 
Step:   11000, Reward: -25.385 [10.046], Avg: -27.003 (1.0000) <0-00:13:20> 
Step:   12000, Reward: -21.337 [10.216], Avg: -26.567 (1.0000) <0-00:14:33> 
Step:   13000, Reward: -24.317 [10.083], Avg: -26.406 (1.0000) <0-00:15:45> 
Step:   14000, Reward: -21.946 [8.438], Avg: -26.109 (1.0000) <0-00:16:59> 
Step:   15000, Reward: -18.966 [7.464], Avg: -25.663 (1.0000) <0-00:18:12> 
Step:   16000, Reward: -22.266 [12.352], Avg: -25.463 (1.0000) <0-00:19:25> 
Step:   17000, Reward: -21.176 [10.987], Avg: -25.225 (1.0000) <0-00:20:38> 
Step:   18000, Reward: -23.368 [12.616], Avg: -25.127 (1.0000) <0-00:21:50> 
Step:   19000, Reward: -20.908 [10.536], Avg: -24.916 (1.0000) <0-00:23:04> 
Step:   20000, Reward: -24.704 [6.929], Avg: -24.906 (1.0000) <0-00:24:17> 
Step:   21000, Reward: -23.133 [12.529], Avg: -24.825 (1.0000) <0-00:25:29> 
Step:   22000, Reward: -21.653 [12.109], Avg: -24.687 (1.0000) <0-00:26:42> 
Step:   23000, Reward: -24.87 [8.175], Avg: -24.695 (1.0000) <0-00:27:55> 
Step:   24000, Reward: -23.454 [10.120], Avg: -24.645 (1.0000) <0-00:29:07> 
Step:   25000, Reward: -18.66 [18.317], Avg: -24.415 (1.0000) <0-00:30:20> 
Step:   26000, Reward: -17.549 [18.964], Avg: -24.161 (1.0000) <0-00:31:31> 
Step:   27000, Reward: -22.291 [12.332], Avg: -24.094 (1.0000) <0-00:32:44> 
Step:   28000, Reward: -22.169 [15.756], Avg: -24.028 (1.0000) <0-00:33:59> 
Step:   29000, Reward: -19.554 [18.779], Avg: -23.879 (1.0000) <0-00:35:11> 
Step:   30000, Reward: -22.566 [19.714], Avg: -23.836 (1.0000) <0-00:36:24> 
Step:   31000, Reward: -25.303 [19.564], Avg: -23.882 (1.0000) <0-00:37:38> 
Step:   32000, Reward: -13.929 [22.755], Avg: -23.58 (1.0000) <0-00:38:51> 
Step:   33000, Reward: -16.397 [27.819], Avg: -23.369 (1.0000) <0-00:40:03> 
Step:   34000, Reward: -12.78 [27.276], Avg: -23.067 (1.0000) <0-00:41:15> 
Step:   35000, Reward: -6.892 [27.938], Avg: -22.617 (1.0000) <0-00:42:28> 
Step:   36000, Reward: -21.566 [17.087], Avg: -22.589 (1.0000) <0-00:43:42> 
Step:   37000, Reward: -5.287 [40.154], Avg: -22.134 (1.0000) <0-00:44:55> 
Step:   38000, Reward: -11.408 [32.818], Avg: -21.859 (1.0000) <0-00:46:09> 
Step:   39000, Reward: 52.878 [62.755], Avg: -19.99 (1.0000) <0-00:47:21> 
Step:   40000, Reward: 59.47 [65.178], Avg: -18.052 (1.0000) <0-00:48:34> 
Step:   41000, Reward: 85.673 [80.737], Avg: -15.582 (1.0000) <0-00:49:45> 
Step:   42000, Reward: 84.464 [91.420], Avg: -13.256 (1.0000) <0-00:50:59> 
Step:   43000, Reward: 130.926 [102.591], Avg: -9.979 (1.0000) <0-00:52:13> 
Step:   44000, Reward: 153.009 [133.112], Avg: -6.357 (1.0000) <0-00:53:28> 
Step:   45000, Reward: 274.26 [100.257], Avg: -0.257 (1.0000) <0-00:54:41> 
Step:   46000, Reward: 287.477 [113.806], Avg: 5.865 (1.0000) <0-00:55:53> 
Step:   47000, Reward: 344.83 [129.198], Avg: 12.927 (1.0000) <0-00:57:06> 
Step:   48000, Reward: 355.65 [171.732], Avg: 19.921 (1.0000) <0-00:58:19> 
Step:   49000, Reward: 415.142 [159.247], Avg: 27.826 (1.0000) <0-00:59:32> 
Step:   50000, Reward: 479.883 [175.271], Avg: 36.69 (1.0000) <0-01:00:47> 
Step:   51000, Reward: 548.955 [80.549], Avg: 46.541 (1.0000) <0-01:02:00> 
Step:   52000, Reward: 529.0 [136.136], Avg: 55.644 (1.0000) <0-01:03:14> 
Step:   53000, Reward: 573.641 [170.448], Avg: 65.237 (1.0000) <0-01:04:27> 
Step:   54000, Reward: 667.073 [84.014], Avg: 76.179 (1.0000) <0-01:05:41> 
Step:   55000, Reward: 681.273 [141.199], Avg: 86.984 (1.0000) <0-01:06:54> 
Step:   56000, Reward: 631.21 [176.309], Avg: 96.532 (1.0000) <0-01:08:07> 
Step:   57000, Reward: 761.104 [67.998], Avg: 107.99 (1.0000) <0-01:09:20> 
Step:   58000, Reward: 708.541 [72.039], Avg: 118.169 (1.0000) <0-01:10:33> 
Step:   59000, Reward: 702.524 [137.778], Avg: 127.908 (1.0000) <0-01:11:45> 
Step:   60000, Reward: 726.836 [122.105], Avg: 137.727 (1.0000) <0-01:12:58> 
Step:   61000, Reward: 776.858 [148.914], Avg: 148.035 (1.0000) <0-01:14:11> 
Step:   62000, Reward: 709.599 [137.428], Avg: 156.949 (1.0000) <0-01:15:24> 
Step:   63000, Reward: 759.941 [101.049], Avg: 166.371 (1.0000) <0-01:16:37> 
Step:   64000, Reward: 780.249 [146.001], Avg: 175.815 (1.0000) <0-01:17:51> 
Step:   65000, Reward: 806.569 [77.043], Avg: 185.372 (1.0000) <0-01:19:04> 
Step:   66000, Reward: 742.171 [144.017], Avg: 193.682 (1.0000) <0-01:20:16> 
Step:   67000, Reward: 765.121 [125.213], Avg: 202.086 (1.0000) <0-01:21:31> 
Step:   68000, Reward: 775.762 [186.691], Avg: 210.4 (1.0000) <0-01:22:42> 
Step:   69000, Reward: 828.325 [95.747], Avg: 219.228 (1.0000) <0-01:23:56> 
Step:   70000, Reward: 686.722 [216.820], Avg: 225.812 (1.0000) <0-01:25:10> 
Step:   71000, Reward: 851.716 [48.576], Avg: 234.505 (1.0000) <0-01:26:21> 
Step:   72000, Reward: 766.754 [190.379], Avg: 241.796 (1.0000) <0-01:27:34> 
Step:   73000, Reward: 729.957 [207.074], Avg: 248.393 (1.0000) <0-01:28:48> 
Step:   74000, Reward: 776.154 [189.481], Avg: 255.43 (1.0000) <0-01:30:02> 
Step:   75000, Reward: 719.566 [191.542], Avg: 261.537 (1.0000) <0-01:31:15> 
Step:   76000, Reward: 791.284 [150.940], Avg: 268.417 (1.0000) <0-01:32:28> 
Step:   77000, Reward: 756.39 [151.274], Avg: 274.673 (1.0000) <0-01:33:43> 
Step:   78000, Reward: 777.947 [163.965], Avg: 281.043 (1.0000) <0-01:34:54> 
Step:   79000, Reward: 711.209 [200.409], Avg: 286.42 (1.0000) <0-01:36:07> 
Step:   80000, Reward: 845.553 [89.098], Avg: 293.323 (1.0000) <0-01:37:20> 
Step:   81000, Reward: 853.354 [58.219], Avg: 300.153 (1.0000) <0-01:38:33> 
Step:   82000, Reward: 857.476 [78.338], Avg: 306.868 (1.0000) <0-01:39:46> 
Step:   83000, Reward: 865.703 [116.997], Avg: 313.52 (1.0000) <0-01:40:58> 
Step:   84000, Reward: 768.765 [252.273], Avg: 318.876 (1.0000) <0-01:42:11> 
Step:   85000, Reward: 852.403 [103.510], Avg: 325.08 (1.0000) <0-01:43:25> 
Step:   86000, Reward: 810.369 [118.319], Avg: 330.658 (1.0000) <0-01:44:40> 
Step:   87000, Reward: 872.54 [74.968], Avg: 336.816 (1.0000) <0-01:45:53> 
Step:   88000, Reward: 849.013 [129.808], Avg: 342.571 (1.0000) <0-01:47:10> 
