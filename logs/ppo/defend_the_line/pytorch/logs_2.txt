Model: <class 'models.singleagent.ppo.PPOAgent'>, Env: defend_the_line/pytorch, Date: 25/03/2020 03:41:53
CPU: 8 Core, 5.0GHz, 62.66 GB, Linux-5.3.0-42-generic-x86_64-with-Ubuntu-18.04-bionic
GPU 0: GeForce RTX 2070, 7.98 GB (Driver: 440.64.00)
Git URL: git@github.com:shawnmanuel000/WorldModelsForDeepRL.git
Hash: 0b8d328793808c266c32d2dbcc3d239bbb55e10f
Branch: master

num_envs: 16,
state_size: (64, 64, 3),
action_size: [3],
action_space: Discrete(3),
envs: <class 'utils.envs.EnvManager'>,
statemodel: <utils.wrappers.ImgStack object at 0x7f8510c0c5c0>,

import torch
import numpy as np
from utils.rand import ReplayBuffer, PrioritizedReplayBuffer
from utils.network import PTACNetwork, PTACAgent, Conv, INPUT_LAYER, ACTOR_HIDDEN, CRITIC_HIDDEN, LEARN_RATE, DISCOUNT_RATE, NUM_STEPS, one_hot_from_indices

BATCH_SIZE = 32					# Number of samples to train on for each train step
PPO_EPOCHS = 2					# Number of iterations to sample batches for training
ENTROPY_WEIGHT = 0.005			# The weight for the entropy term of the Actor loss
CLIP_PARAM = 0.05				# The limit of the ratio of new action probabilities to old probabilities

class PPOActor(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.discrete = type(action_size) != tuple
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, ACTOR_HIDDEN)
		self.layer3 = torch.nn.Linear(ACTOR_HIDDEN, ACTOR_HIDDEN)
		self.action_mu = torch.nn.Linear(ACTOR_HIDDEN, action_size[-1])
		self.action_sig = torch.nn.Parameter(torch.zeros(action_size[-1]))
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)
		self.dist = lambda m,s: torch.distributions.Categorical(m.softmax(-1)) if self.discrete else torch.distributions.Normal(m,s)
		
	def forward(self, state, action_in=None, sample=True):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		action_mu = self.action_mu(state)
		action_sig = self.action_sig.exp().expand_as(action_mu)
		dist = self.dist(action_mu, action_sig)
		action = dist.sample() if action_in is None else action_in.argmax(-1) if self.discrete else action_in
		action_out = one_hot_from_indices(action, action_mu.size(-1)) if self.discrete else action
		log_prob = dist.log_prob(action)
		entropy = dist.entropy()
		return action_out, log_prob, entropy

class PPOCritic(torch.nn.Module):
	def __init__(self, state_size, action_size):
		super().__init__()
		self.layer1 = torch.nn.Linear(state_size[-1], INPUT_LAYER) if len(state_size)!=3 else Conv(state_size, INPUT_LAYER)
		self.layer2 = torch.nn.Linear(INPUT_LAYER, CRITIC_HIDDEN)
		self.layer3 = torch.nn.Linear(CRITIC_HIDDEN, CRITIC_HIDDEN)
		self.value = torch.nn.Linear(CRITIC_HIDDEN, 1)
		self.apply(lambda m: torch.nn.init.xavier_normal_(m.weight) if type(m) in [torch.nn.Conv2d, torch.nn.Linear] else None)

	def forward(self, state):
		state = self.layer1(state).relu()
		state = self.layer2(state).relu()
		state = self.layer3(state).relu()
		value = self.value(state)
		return value

class PPONetwork(PTACNetwork):
	def __init__(self, state_size, action_size, actor=PPOActor, critic=PPOCritic, lr=LEARN_RATE, tau=None, gpu=True, load=None, name="ppo"):
		super().__init__(state_size, action_size, actor=actor, critic=critic, lr=lr, gpu=gpu, load=load, name=name)

	def get_action_probs(self, state, action_in=None, grad=False, numpy=False, sample=True):
		with torch.enable_grad() if grad else torch.no_grad():
			action, log_prob, entropy = self.actor_local(state.to(self.device), action_in, sample)
			action_or_entropy = action if action_in is None else entropy.mean()
			return (x.cpu().numpy() if numpy else x for x in [action_or_entropy, log_prob])

	def get_value(self, state, grad=False, numpy=False):
		with torch.enable_grad() if grad else torch.no_grad():
			return self.critic_local(state.to(self.device)).cpu().numpy() if numpy else self.critic_local(state.to(self.device))

	def optimize(self, states, actions, old_log_probs, targets, advantages, clip_param=CLIP_PARAM, e_weight=ENTROPY_WEIGHT, scale=1):
		values = self.get_value(states, grad=True)
		critic_loss = (values - targets).pow(2) * scale
		self.step(self.critic_optimizer, critic_loss.mean())

		entropy, new_log_probs = self.get_action_probs(states, actions, grad=True)
		ratio = (new_log_probs - old_log_probs).exp()
		ratio_clipped = torch.clamp(ratio, 1.0-clip_param, 1.0+clip_param)
		actor_loss = -(torch.min(ratio*advantages, ratio_clipped*advantages) + e_weight*entropy) * scale
		self.step(self.actor_optimizer, actor_loss.mean())

class PPOAgent(PTACAgent):
	def __init__(self, state_size, action_size, lr=LEARN_RATE, update_freq=NUM_STEPS, gpu=True, load=None):
		super().__init__(state_size, action_size, PPONetwork, lr=lr, update_freq=update_freq, gpu=gpu, load=load)

	def get_action(self, state, eps=None, sample=True):
		self.action, self.log_prob = self.network.get_action_probs(self.to_tensor(state), numpy=True, sample=sample)
		return np.tanh(self.action)

	def train(self, state, action, next_state, reward, done):
		self.buffer.append((state, self.action, self.log_prob, reward, done))
		if np.any(done[0]) or len(self.buffer) >= self.update_freq:
			states, actions, log_probs, rewards, dones = map(self.to_tensor, zip(*self.buffer))
			self.buffer.clear()
			states = torch.cat([states, self.to_tensor(next_state).unsqueeze(0)], dim=0)
			values = self.network.get_value(states)
			targets, advantages = self.compute_gae(values[-1], rewards.unsqueeze(-1), dones.unsqueeze(-1), values[:-1], gamma=DISCOUNT_RATE)
			states, actions, log_probs, targets, advantages = [x.view(x.size(0)*x.size(1), *x.size()[2:]) for x in (states[:-1], actions, log_probs, targets, advantages)]
			self.replay_buffer.clear().extend(list(zip(states, actions, log_probs, targets, advantages)), shuffle=True)
			for _ in range((len(self.replay_buffer)*PPO_EPOCHS)//BATCH_SIZE):
				state, action, log_prob, target, advantage = self.replay_buffer.next_batch(BATCH_SIZE, torch.stack)
				self.network.optimize(state, action, log_prob, target, advantage)
				
REG_LAMBDA = 1e-6             	# Penalty multiplier to apply for the size of the network weights
LEARN_RATE = 0.0001           	# Sets how much we want to update the network weights at each training step
TARGET_UPDATE_RATE = 0.0004   	# How frequently we want to copy the local network to the target network (for double DQNs)
INPUT_LAYER = 512				# The number of output nodes from the first layer to Actor and Critic networks
ACTOR_HIDDEN = 256				# The number of nodes in the hidden layers of the Actor network
CRITIC_HIDDEN = 1024			# The number of nodes in the hidden layers of the Critic networks
DISCOUNT_RATE = 0.99			# The discount rate to use in the Bellman Equation
NUM_STEPS = 500					# The number of steps to collect experience in sequence for each GAE calculation
EPS_MAX = 1.0                 	# The starting proportion of random to greedy actions to take
EPS_MIN = 0.020               	# The lower limit proportion of random to greedy actions to take
EPS_DECAY = 0.980             	# The rate at which eps decays from EPS_MAX to EPS_MIN
ADVANTAGE_DECAY = 0.95			# The discount factor for the cumulative GAE calculation
REPLAY_BATCH_SIZE = 32        	# How many experience tuples to sample from the buffer for each train step
MAX_BUFFER_SIZE = 100000      	# Sets the maximum length of the replay buffer
SAVE_DIR = "./saved_models"

import os
import gym
import torch
import argparse
import numpy as np
from envs import make_env, all_envs, env_name
from models import all_models, EPS_MIN
from utils.rand import RandomAgent
from utils.misc import Logger, rollout
from utils.envs import EnsembleEnv, EnvManager, EnvWorker
from utils.wrappers import WorldACAgent
from utils.multiprocess import set_rank_size

TRIAL_AT = 1000
SAVE_AT = 1

def train(make_env, model, ports, steps, checkpoint=None, save_best=True, log=True, render=False, worldmodel=True):
	envs = (EnvManager if len(ports)>0 else EnsembleEnv)(make_env, ports if ports else 4)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, gpu=True, worldmodel=worldmodel) 
	logger = Logger(model, checkpoint, num_envs=envs.num_envs, state_size=agent.state_size, action_size=envs.action_size, action_space=envs.env.action_space, envs=type(envs), statemodel=agent.state_model)
	states = envs.reset(train=True)
	total_rewards = []
	for s in range(steps+1):
		env_actions, actions, states = agent.get_env_action(envs.env, states)
		next_states, rewards, dones, _ = envs.step(env_actions, train=True)
		agent.train(states, actions, next_states, rewards, dones)
		states = next_states
		if s%TRIAL_AT==0:
			rollouts = rollout(envs, agent, render=render)
			total_rewards.append(np.round(np.mean(rollouts, axis=-1), 3))
			if checkpoint and len(total_rewards)%SAVE_AT==0: agent.save_model(checkpoint)
			if checkpoint and save_best and np.all(total_rewards[-1] >= np.max(total_rewards, axis=-1)): agent.save_model(checkpoint, "best")
			if log: logger.log(f"Step: {s:7d}, Reward: {total_rewards[-1]} [{np.std(rollouts):4.3f}], Avg: {round(np.mean(total_rewards, axis=0),3)} ({agent.acagent.eps:.4f})")
	envs.close()

def trial(make_env, model, checkpoint=None, render=False):
	envs = EnsembleEnv(make_env, 1)
	agent = WorldACAgent(envs.state_size, envs.action_size, model, envs.num_envs, load=checkpoint, train=False, gpu=False, worldmodel=True)
	print(f"Reward: {rollout(envs, agent, eps=EPS_MIN, render=render)}")
	envs.close()

def parse_args(all_envs, all_models):
	parser = argparse.ArgumentParser(description="A3C Trainer")
	parser.add_argument("--env_name", type=str, default=env_name, choices=all_envs, help="Name of the environment to use. Allowed values are:\n"+', '.join(all_envs), metavar="env_name")
	parser.add_argument("--model", type=str, default="ppo", choices=all_models, help="Which RL algorithm to use. Allowed values are:\n"+', '.join(all_models), metavar="model")
	parser.add_argument("--iternum", type=int, default=-1, choices=[-1,0,1], help="Whether to train using World Model to load (0 or 1) or raw images (-1)")
	parser.add_argument("--tcp_ports", type=int, default=[], nargs="+", help="The list of worker ports to connect to")
	parser.add_argument("--tcp_rank", type=int, default=0, help="Which port to listen on (as a worker server)")
	parser.add_argument("--render", action="store_true", help="Whether to render an environment rollout")
	parser.add_argument("--trial", action="store_true", help="Whether to show a trial run training on the Pendulum-v0 environment")
	parser.add_argument("--steps", type=int, default=100000, help="Number of steps to train the agent")
	args = parser.parse_args()
	return args

if __name__ == "__main__":
	args = parse_args(all_envs, all_models.keys())
	checkpoint = f"{args.env_name}/pytorch" if args.iternum < 0 else f"{args.env_name}/iter{args.iternum}"
	rank, size = set_rank_size(args.tcp_rank, args.tcp_ports)
	get_env = lambda: make_env(args.env_name, args.render)
	model = all_models[args.model]
	if rank>0:
		EnvWorker(make_env=get_env).start()
	elif args.trial:
		trial(make_env=get_env, model=model, checkpoint=checkpoint, render=args.render)
	else:
		train(make_env=get_env, model=model, ports=list(range(1,size)), steps=args.steps, checkpoint=checkpoint, render=args.render, worldmodel=args.iternum>=0)


Step:       0, Reward: 12.062 [4.616], Avg: 12.062 (1.0000) <0-00:00:00> 
Step:    1000, Reward: 11.562 [4.107], Avg: 11.812 (1.0000) <0-00:00:27> 
Step:    2000, Reward: 10.375 [3.586], Avg: 11.333 (1.0000) <0-00:00:56> 
Step:    3000, Reward: 10.938 [4.451], Avg: 11.234 (1.0000) <0-00:01:22> 
Step:    4000, Reward: 10.375 [4.045], Avg: 11.062 (1.0000) <0-00:01:50> 
Step:    5000, Reward: 13.688 [5.709], Avg: 11.5 (1.0000) <0-00:02:21> 
Step:    6000, Reward: 10.625 [3.706], Avg: 11.375 (1.0000) <0-00:02:44> 
Step:    7000, Reward: 15.125 [5.266], Avg: 11.844 (1.0000) <0-00:03:17> 
Step:    8000, Reward: 12.875 [3.295], Avg: 11.958 (1.0000) <0-00:03:43> 
Step:    9000, Reward: 12.5 [4.228], Avg: 12.012 (1.0000) <0-00:04:09> 
Step:   10000, Reward: 14.438 [4.769], Avg: 12.233 (1.0000) <0-00:04:39> 
Step:   11000, Reward: 12.0 [3.021], Avg: 12.214 (1.0000) <0-00:05:06> 
Step:   12000, Reward: 13.5 [5.232], Avg: 12.313 (1.0000) <0-00:05:32> 
Step:   13000, Reward: 9.938 [4.465], Avg: 12.143 (1.0000) <0-00:06:01> 
Step:   14000, Reward: 12.938 [4.630], Avg: 12.196 (1.0000) <0-00:06:27> 
Step:   15000, Reward: 14.312 [5.531], Avg: 12.328 (1.0000) <0-00:06:56> 
Step:   16000, Reward: 12.25 [5.309], Avg: 12.324 (1.0000) <0-00:07:26> 
Step:   17000, Reward: 13.0 [4.402], Avg: 12.361 (1.0000) <0-00:07:54> 
Step:   18000, Reward: 13.5 [3.969], Avg: 12.421 (1.0000) <0-00:08:19> 
Step:   19000, Reward: 11.625 [4.400], Avg: 12.381 (1.0000) <0-00:08:48> 
Step:   20000, Reward: 10.812 [4.126], Avg: 12.307 (1.0000) <0-00:09:16> 
Step:   21000, Reward: 12.438 [3.278], Avg: 12.313 (1.0000) <0-00:09:45> 
Step:   22000, Reward: 13.188 [5.270], Avg: 12.351 (1.0000) <0-00:10:14> 
Step:   23000, Reward: 10.062 [2.657], Avg: 12.255 (1.0000) <0-00:10:38> 
Step:   24000, Reward: 12.188 [3.557], Avg: 12.253 (1.0000) <0-00:11:05> 
Step:   25000, Reward: 12.625 [5.384], Avg: 12.267 (1.0000) <0-00:11:39> 
Step:   26000, Reward: 11.25 [5.130], Avg: 12.229 (1.0000) <0-00:12:06> 
Step:   27000, Reward: 13.938 [4.630], Avg: 12.29 (1.0000) <0-00:12:36> 
Step:   28000, Reward: 13.688 [5.394], Avg: 12.338 (1.0000) <0-00:13:08> 
Step:   29000, Reward: 12.438 [4.227], Avg: 12.342 (1.0000) <0-00:13:34> 
Step:   30000, Reward: 13.188 [3.860], Avg: 12.369 (1.0000) <0-00:14:02> 
Step:   31000, Reward: 14.25 [3.849], Avg: 12.428 (1.0000) <0-00:14:29> 
Step:   32000, Reward: 13.312 [3.770], Avg: 12.455 (1.0000) <0-00:14:57> 
Step:   33000, Reward: 13.062 [3.749], Avg: 12.473 (1.0000) <0-00:15:25> 
Step:   34000, Reward: 15.75 [5.202], Avg: 12.566 (1.0000) <0-00:15:53> 
Step:   35000, Reward: 15.562 [5.579], Avg: 12.649 (1.0000) <0-00:16:20> 
Step:   36000, Reward: 14.062 [5.285], Avg: 12.688 (1.0000) <0-00:16:51> 
Step:   37000, Reward: 18.312 [4.058], Avg: 12.836 (1.0000) <0-00:17:23> 
Step:   38000, Reward: 11.438 [4.527], Avg: 12.8 (1.0000) <0-00:17:50> 
Step:   39000, Reward: 16.812 [4.489], Avg: 12.9 (1.0000) <0-00:18:18> 
Step:   40000, Reward: 16.625 [8.138], Avg: 12.991 (1.0000) <0-00:18:51> 
Step:   41000, Reward: 16.812 [5.235], Avg: 13.082 (1.0000) <0-00:19:21> 
Step:   42000, Reward: 16.0 [4.153], Avg: 13.15 (1.0000) <0-00:19:50> 
Step:   43000, Reward: 13.375 [4.948], Avg: 13.155 (1.0000) <0-00:20:21> 
Step:   44000, Reward: 14.625 [4.512], Avg: 13.188 (1.0000) <0-00:20:48> 
Step:   45000, Reward: 14.688 [5.096], Avg: 13.22 (1.0000) <0-00:21:20> 
Step:   46000, Reward: 14.062 [4.589], Avg: 13.238 (1.0000) <0-00:21:48> 
Step:   47000, Reward: 15.312 [5.181], Avg: 13.281 (1.0000) <0-00:22:16> 
Step:   48000, Reward: 14.062 [5.214], Avg: 13.297 (1.0000) <0-00:22:42> 
Step:   49000, Reward: 16.25 [5.651], Avg: 13.356 (1.0000) <0-00:23:13> 
Step:   50000, Reward: 15.375 [4.622], Avg: 13.396 (1.0000) <0-00:23:42> 
Step:   51000, Reward: 14.25 [4.969], Avg: 13.412 (1.0000) <0-00:24:08> 
Step:   52000, Reward: 16.188 [3.557], Avg: 13.465 (1.0000) <0-00:24:38> 
Step:   53000, Reward: 14.25 [4.562], Avg: 13.479 (1.0000) <0-00:25:05> 
Step:   54000, Reward: 12.812 [5.399], Avg: 13.467 (1.0000) <0-00:25:34> 
Step:   55000, Reward: 15.375 [4.702], Avg: 13.501 (1.0000) <0-00:26:04> 
Step:   56000, Reward: 15.312 [2.973], Avg: 13.533 (1.0000) <0-00:26:33> 
Step:   57000, Reward: 15.375 [5.266], Avg: 13.565 (1.0000) <0-00:27:00> 
Step:   58000, Reward: 15.0 [3.808], Avg: 13.589 (1.0000) <0-00:27:32> 
Step:   59000, Reward: 14.875 [6.660], Avg: 13.61 (1.0000) <0-00:28:02> 
Step:   60000, Reward: 12.875 [3.935], Avg: 13.598 (1.0000) <0-00:28:31> 
Step:   61000, Reward: 16.125 [3.855], Avg: 13.639 (1.0000) <0-00:29:00> 
Step:   62000, Reward: 16.562 [3.657], Avg: 13.685 (1.0000) <0-00:29:27> 
Step:   63000, Reward: 16.188 [6.156], Avg: 13.725 (1.0000) <0-00:30:00> 
Step:   64000, Reward: 17.5 [4.809], Avg: 13.783 (1.0000) <0-00:30:28> 
Step:   65000, Reward: 14.688 [5.229], Avg: 13.796 (1.0000) <0-00:30:56> 
Step:   66000, Reward: 15.812 [4.990], Avg: 13.826 (1.0000) <0-00:31:29> 
Step:   67000, Reward: 15.875 [5.023], Avg: 13.857 (1.0000) <0-00:31:58> 
Step:   68000, Reward: 16.312 [3.901], Avg: 13.892 (1.0000) <0-00:32:24> 
Step:   69000, Reward: 15.312 [3.836], Avg: 13.912 (1.0000) <0-00:32:54> 
Step:   70000, Reward: 15.0 [4.123], Avg: 13.928 (1.0000) <0-00:33:23> 
Step:   71000, Reward: 15.062 [6.388], Avg: 13.944 (1.0000) <0-00:33:54> 
Step:   72000, Reward: 15.0 [3.298], Avg: 13.958 (1.0000) <0-00:34:18> 
Step:   73000, Reward: 13.812 [4.953], Avg: 13.956 (1.0000) <0-00:34:48> 
Step:   74000, Reward: 14.562 [5.000], Avg: 13.964 (1.0000) <0-00:35:16> 
Step:   75000, Reward: 15.375 [6.040], Avg: 13.983 (1.0000) <0-00:35:48> 
Step:   76000, Reward: 13.875 [4.755], Avg: 13.981 (1.0000) <0-00:36:15> 
Step:   77000, Reward: 17.688 [3.885], Avg: 14.029 (1.0000) <0-00:36:41> 
Step:   78000, Reward: 16.375 [4.512], Avg: 14.059 (1.0000) <0-00:37:13> 
Step:   79000, Reward: 16.0 [5.420], Avg: 14.083 (1.0000) <0-00:37:44> 
Step:   80000, Reward: 15.188 [4.517], Avg: 14.096 (1.0000) <0-00:38:12> 
Step:   81000, Reward: 16.5 [4.809], Avg: 14.126 (1.0000) <0-00:38:42> 
Step:   82000, Reward: 16.812 [5.725], Avg: 14.158 (1.0000) <0-00:39:13> 
Step:   83000, Reward: 15.875 [4.675], Avg: 14.179 (1.0000) <0-00:39:43> 
Step:   84000, Reward: 16.312 [6.039], Avg: 14.204 (1.0000) <0-00:40:13> 
Step:   85000, Reward: 16.0 [4.730], Avg: 14.225 (1.0000) <0-00:40:36> 
Step:   86000, Reward: 14.125 [5.349], Avg: 14.223 (1.0000) <0-00:41:09> 
Step:   87000, Reward: 15.562 [5.160], Avg: 14.239 (1.0000) <0-00:41:40> 
Step:   88000, Reward: 14.875 [3.516], Avg: 14.246 (1.0000) <0-00:42:05> 
Step:   89000, Reward: 16.188 [7.239], Avg: 14.267 (1.0000) <0-00:42:43> 
Step:   90000, Reward: 14.812 [5.247], Avg: 14.273 (1.0000) <0-00:43:09> 
Step:   91000, Reward: 13.812 [4.433], Avg: 14.268 (1.0000) <0-00:43:33> 
Step:   92000, Reward: 13.0 [3.937], Avg: 14.255 (1.0000) <0-00:44:05> 
Step:   93000, Reward: 14.438 [4.677], Avg: 14.257 (1.0000) <0-00:44:32> 
Step:   94000, Reward: 13.875 [5.754], Avg: 14.253 (1.0000) <0-00:45:00> 
Step:   95000, Reward: 14.812 [4.096], Avg: 14.258 (1.0000) <0-00:45:28> 
Step:   96000, Reward: 15.625 [5.097], Avg: 14.273 (1.0000) <0-00:45:59> 
Step:   97000, Reward: 15.75 [4.323], Avg: 14.288 (1.0000) <0-00:46:24> 
Step:   98000, Reward: 15.312 [5.587], Avg: 14.298 (1.0000) <0-00:46:55> 
Step:   99000, Reward: 16.0 [4.500], Avg: 14.315 (1.0000) <0-00:47:25> 
Step:  100000, Reward: 15.062 [4.723], Avg: 14.322 (1.0000) <0-00:47:50> 
Step:  101000, Reward: 14.0 [4.444], Avg: 14.319 (1.0000) <0-00:48:21> 
Step:  102000, Reward: 14.688 [4.660], Avg: 14.323 (1.0000) <0-00:48:50> 
Step:  103000, Reward: 14.125 [3.257], Avg: 14.321 (1.0000) <0-00:49:14> 
Step:  104000, Reward: 14.312 [4.398], Avg: 14.321 (1.0000) <0-00:49:40> 
Step:  105000, Reward: 15.375 [3.276], Avg: 14.331 (1.0000) <0-00:50:11> 
Step:  106000, Reward: 15.688 [5.576], Avg: 14.343 (1.0000) <0-00:50:40> 
Step:  107000, Reward: 17.75 [7.293], Avg: 14.375 (1.0000) <0-00:51:14> 
Step:  108000, Reward: 18.375 [4.948], Avg: 14.412 (1.0000) <0-00:51:43> 
Step:  109000, Reward: 14.188 [3.206], Avg: 14.41 (1.0000) <0-00:52:08> 
Step:  110000, Reward: 17.062 [5.402], Avg: 14.434 (1.0000) <0-00:52:35> 
Step:  111000, Reward: 15.688 [5.144], Avg: 14.445 (1.0000) <0-00:53:04> 
Step:  112000, Reward: 14.375 [4.540], Avg: 14.444 (1.0000) <0-00:53:36> 
Step:  113000, Reward: 15.375 [4.484], Avg: 14.452 (1.0000) <0-00:54:05> 
Step:  114000, Reward: 16.75 [5.573], Avg: 14.472 (1.0000) <0-00:54:35> 
Step:  115000, Reward: 15.688 [4.805], Avg: 14.483 (1.0000) <0-00:55:02> 
Step:  116000, Reward: 15.375 [3.756], Avg: 14.49 (1.0000) <0-00:55:32> 
Step:  117000, Reward: 14.5 [3.657], Avg: 14.49 (1.0000) <0-00:55:58> 
Step:  118000, Reward: 14.875 [4.270], Avg: 14.494 (1.0000) <0-00:56:27> 
Step:  119000, Reward: 14.125 [4.484], Avg: 14.491 (1.0000) <0-00:56:57> 
Step:  120000, Reward: 17.0 [4.402], Avg: 14.511 (1.0000) <0-00:57:21> 
Step:  121000, Reward: 15.375 [5.883], Avg: 14.518 (1.0000) <0-00:57:53> 
Step:  122000, Reward: 16.875 [5.146], Avg: 14.538 (1.0000) <0-00:58:24> 
Step:  123000, Reward: 15.875 [4.885], Avg: 14.548 (1.0000) <0-00:58:53> 
Step:  124000, Reward: 14.75 [4.380], Avg: 14.55 (1.0000) <0-00:59:22> 
Step:  125000, Reward: 17.125 [4.897], Avg: 14.57 (1.0000) <0-00:59:50> 
Step:  126000, Reward: 16.812 [4.142], Avg: 14.588 (1.0000) <0-01:00:18> 
Step:  127000, Reward: 15.5 [4.402], Avg: 14.595 (1.0000) <0-01:00:49> 
Step:  128000, Reward: 17.25 [6.408], Avg: 14.616 (1.0000) <0-01:01:19> 
Step:  129000, Reward: 14.562 [3.872], Avg: 14.615 (1.0000) <0-01:01:50> 
Step:  130000, Reward: 13.875 [4.649], Avg: 14.61 (1.0000) <0-01:02:20> 
Step:  131000, Reward: 14.625 [4.581], Avg: 14.61 (1.0000) <0-01:02:48> 
Step:  132000, Reward: 14.812 [4.653], Avg: 14.611 (1.0000) <0-01:03:14> 
Step:  133000, Reward: 17.312 [3.117], Avg: 14.631 (1.0000) <0-01:03:45> 
Step:  134000, Reward: 14.875 [4.923], Avg: 14.633 (1.0000) <0-01:04:09> 
Step:  135000, Reward: 14.75 [3.683], Avg: 14.634 (1.0000) <0-01:04:40> 
Step:  136000, Reward: 13.25 [4.323], Avg: 14.624 (1.0000) <0-01:05:08> 
Step:  137000, Reward: 13.375 [3.480], Avg: 14.615 (1.0000) <0-01:05:30> 
Step:  138000, Reward: 14.125 [3.855], Avg: 14.611 (1.0000) <0-01:06:00> 
Step:  139000, Reward: 14.375 [3.655], Avg: 14.61 (1.0000) <0-01:06:25> 
Step:  140000, Reward: 13.875 [5.499], Avg: 14.605 (1.0000) <0-01:06:57> 
Step:  141000, Reward: 15.562 [4.743], Avg: 14.611 (1.0000) <0-01:07:30> 
Step:  142000, Reward: 13.625 [4.136], Avg: 14.604 (1.0000) <0-01:07:57> 
Step:  143000, Reward: 15.688 [3.566], Avg: 14.612 (1.0000) <0-01:08:25> 
Step:  144000, Reward: 15.75 [6.427], Avg: 14.62 (1.0000) <0-01:08:55> 
Step:  145000, Reward: 16.062 [4.520], Avg: 14.63 (1.0000) <0-01:09:24> 
Step:  146000, Reward: 17.312 [6.131], Avg: 14.648 (1.0000) <0-01:09:51> 
Step:  147000, Reward: 16.25 [3.326], Avg: 14.659 (1.0000) <0-01:10:22> 
Step:  148000, Reward: 15.5 [3.518], Avg: 14.664 (1.0000) <0-01:10:49> 
Step:  149000, Reward: 14.562 [3.201], Avg: 14.664 (1.0000) <0-01:11:19> 
Step:  150000, Reward: 15.875 [3.756], Avg: 14.672 (1.0000) <0-01:11:44> 
Step:  151000, Reward: 14.875 [4.794], Avg: 14.673 (1.0000) <0-01:12:16> 
Step:  152000, Reward: 14.312 [5.763], Avg: 14.671 (1.0000) <0-01:12:44> 
Step:  153000, Reward: 15.062 [6.805], Avg: 14.673 (1.0000) <0-01:13:13> 
Step:  154000, Reward: 17.188 [7.204], Avg: 14.689 (1.0000) <0-01:13:50> 
Step:  155000, Reward: 14.562 [4.568], Avg: 14.689 (1.0000) <0-01:14:18> 
Step:  156000, Reward: 15.312 [7.638], Avg: 14.693 (1.0000) <0-01:14:51> 
Step:  157000, Reward: 14.938 [4.981], Avg: 14.694 (1.0000) <0-01:15:21> 
Step:  158000, Reward: 16.312 [4.959], Avg: 14.704 (1.0000) <0-01:15:46> 
Step:  159000, Reward: 14.438 [4.834], Avg: 14.703 (1.0000) <0-01:16:19> 
Step:  160000, Reward: 15.25 [3.865], Avg: 14.706 (1.0000) <0-01:16:47> 
Step:  161000, Reward: 16.375 [5.384], Avg: 14.716 (1.0000) <0-01:17:16> 
Step:  162000, Reward: 16.25 [6.139], Avg: 14.726 (1.0000) <0-01:17:53> 
Step:  163000, Reward: 13.375 [4.386], Avg: 14.718 (1.0000) <0-01:18:21> 
Step:  164000, Reward: 13.0 [5.050], Avg: 14.707 (1.0000) <0-01:18:51> 
Step:  165000, Reward: 15.688 [5.394], Avg: 14.713 (1.0000) <0-01:19:22> 
Step:  166000, Reward: 12.5 [3.102], Avg: 14.7 (1.0000) <0-01:19:50> 
Step:  167000, Reward: 13.75 [4.802], Avg: 14.694 (1.0000) <0-01:20:16> 
Step:  168000, Reward: 16.25 [4.684], Avg: 14.703 (1.0000) <0-01:20:46> 
Step:  169000, Reward: 16.25 [8.220], Avg: 14.712 (1.0000) <0-01:21:16> 
Step:  170000, Reward: 14.562 [6.819], Avg: 14.712 (1.0000) <0-01:21:47> 
Step:  171000, Reward: 14.375 [5.171], Avg: 14.71 (1.0000) <0-01:22:16> 
Step:  172000, Reward: 13.312 [4.524], Avg: 14.702 (1.0000) <0-01:22:47> 
Step:  173000, Reward: 14.0 [4.950], Avg: 14.698 (1.0000) <0-01:23:13> 
Step:  174000, Reward: 13.25 [4.776], Avg: 14.689 (1.0000) <0-01:23:44> 
Step:  175000, Reward: 13.812 [4.640], Avg: 14.684 (1.0000) <0-01:24:12> 
Step:  176000, Reward: 14.875 [6.061], Avg: 14.685 (1.0000) <0-01:24:39> 
Step:  177000, Reward: 14.375 [5.840], Avg: 14.684 (1.0000) <0-01:25:11> 
Step:  178000, Reward: 14.625 [3.257], Avg: 14.683 (1.0000) <0-01:25:40> 
Step:  179000, Reward: 14.125 [4.635], Avg: 14.68 (1.0000) <0-01:26:06> 
Step:  180000, Reward: 13.562 [3.840], Avg: 14.674 (1.0000) <0-01:26:35> 
Step:  181000, Reward: 13.375 [4.091], Avg: 14.667 (1.0000) <0-01:27:02> 
Step:  182000, Reward: 13.5 [5.990], Avg: 14.66 (1.0000) <0-01:27:31> 
